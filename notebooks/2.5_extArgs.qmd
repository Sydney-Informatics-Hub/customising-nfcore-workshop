---
title: "**Passing external arguments to a process**"
output:
  html_document:
    toc: false
    toc_float: false
from: markdown+emoji
---

::: callout-tip
### Objectives{.unlisted}

- Understand how to use the `ext.args` feature to pass additional command-line arguments to a process
- Implement additional external arguments to a process that are not hardcoded in the process script 
- Observe the behaviour of Nextflow's cache functionality   
:::

All nf-core modules are currently required to provide the mandatory arguments for a tool to run in the process' `main.nf` file. Remember that nf-core pipelines generally run with sensible parameters as default, so these processes may also contain commonly changed or applied optional arguments for a tool. Despite this, nf-core pipelines allow you the flexibility to customise the command a process runs, whether it is permitted by the nf-core workflow parameters or not. In this lesson, we will be using Nextflow's [`ext` directive](https://www.nextflow.io/docs/latest/process.html#ext) to specify an optional argument to a process within the workflow. 

### **External directives in action**

 nf-core modules provide all optional non-file arguments as a string using the [`ext` directive](https://www.nextflow.io/docs/latest/process.html#ext) via the `$task.ext.args` variable. In the diagram below, on the left is an example of the standard `main.nf` format of a process stored in the `modules/` directory. Above the script block, the `$args` variable is defined. Inside the script block the `$args` variable is applied to the process command.

::: {.callout-note}
## What's that Nextflow expression doing?
The `task.ext.args ?: ''` expression checks if the `ext.args` parameter has already been defined already for a task. If it isn't defined it will assign an empty string by default. 
:::

But where is the `$ext.args` string actually defined? In the middle of the diagram below there is an example of a custom configuration file targeting the `modules/example/main.nf` process. This configuration file is using the EXAMPLE process `ext.args` to pass `-flag1` to the tool command. Running the pipeline having included `-c example-custom.config` in the run command, you will observe the application of `-flag1` in the `.command.sh` inside that task's work directory.  

![](../figs/2.5_ext-args.png)

### **Customisation at the process level**

To practice this, we are going to pass an optional flag to the Trim Galore process. It is up to you to decipher what customisations are required to make your analysis suitable for your data and research questions. In order to understand what customisations you may want to specify as extra arguments, we recommend you: 

1. Read the tool documentation to understand all the available parameters for that tool 
2. View the list of nf-core parameters for that tool 
3. View which paramteres are hard-coded within the nextflow process

For the sake of the lesson, let's assume we want to increase the minimum quality Phred score from the default of 20 to a much more stringent value of 40. 

::: {.callout-warning}
### **Warning!**
For RNAseq datasets, this Phred score is way too high!
:::

1. Explore the full list of Trim Galore parameters either using the [Trim Galore documentation](https://github.com/FelixKrueger/TrimGalore/blob/master/Docs/Trim_Galore_User_Guide.md#general-options). 
2. Look at the nf-core/rnaseq pipeline parameter options in the nf-core/rnaseq pipeline [documentation](https://nf-co.re/rnaseq/3.11.1/parameters) 
3. View the nf-core/rnaseq pipeline Trim Galore [`main.nf`](https://github.com/nf-core/rnaseq/blob/master/modules/nf-core/trimgalore/main.nf) file

::: callout-tip
### **Challenge**{.unlisted}

1. What Trim Galore flag would you use to change the default Phred score? 
2. Is this flag offered as an input parameter by the nf-core/rnaseq pipeline? 
3. What optional flags are applied to the Trim Galore process? 
:::

::: {.callout-caution collapse="true"}
### Solution

1. `--quality` or `-q`
2. No
3. `--cores` and `--gzip` 
:::

We will follow the Trim Galore user guide to apply the `--quality` flag with a Phred score of 40:

```default
--quality 40
```

### **Observe the application of `ext.args`**

To parse that to the Trim Galore process, we need to specify this in a custom config. This time, our Trim Galore custom configuration file will restrict the usage of the parameter to the only place it applies, the Trim Galore process. We can do this using the Nextflow `process {}` scope and `withName:` selector. 

Open a new file `trim-galore.config` and add the following content:
```default
// Trim Galore Phred score custom configuration 

process {
    withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {   
        ext.args = '--quality 40'
    }
}
```

::: {.callout-note}
### **How did you find that process name?!** :exploding_head:
Tracking down process names in nf-core workflow code can be confusing as developers increasingly include subworkflow modules comprising multiple individual modules from the [nf-core/modules](https://github.com/nf-core/modules) repository. A process' name will depend on whether it is included in the workflow as part of a submodule or a module. If we search the workflow code for 'trimgalore' we find trimgalore is included in the `FASTQ_FASTQC_UMITOOLS_TRIMGALORE` subworkflow: 

```default
grep "trimgalore" nf-core-rnaseq-3.11.1/workflow/workflows/rnaseq.nf
```

Inside that subworkflow, we can see Trim Galore process is named `TRIMGALORE`:

```default
cat nf-core-rnaseq-3.11.1/workflow/subworkflows/nf-core/fastq_fastqc_umitools_trimgalore/main.nf
```

Hence, our arrival at the name:

```default
FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE
```
:::

We need to instruct nextflow to use the custom config, and we do this with the -c flag:

```default 
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
  -profile workshop \
  -c custom-nimbus.config,trim-galore.config \
  -params-file workshop-params.yaml \
  --outdir Lesson-5 \
  -resume
```

::: callout-tip
### **Challenge**{.unlisted}

Given we have applied the `-resume` flag, what tasks do you expect to be re-run, and what outputs do you expect to be taken from cache?
:::

::: {.callout-caution collapse="true"}
### Solution

* Taken from cache: initial FastQC processes for each fastq file
* Rerun: read trimming and all downstream processes
:::

This time, the workflow should run for a while and then stop before performing read alignment with STAR with the following message :frowning::

```default
-[nf-core/rnaseq] Pipeline completed successfully with skipped sampl(es)-
-[nf-core/rnaseq] Please check MultiQC report: 6/6 samples skipped since they failed 10000 trimmed read threshold.-
```

Open the Lesson 5 `multiqc_report.html`, like you did in the previous lesson. Note the 'WARNING: Fail Trimming Check' on the navigation headings on the left. Click on this warning. Our Phred threshold was way too high, all 6 samples have < 5,000 reads remaining after trimming!

What has caused these samples to fail though? Let's take a look at the [--min_trimmed_reads parameter documentation](https://nf-co.re/rnaseq/3.11.1/parameters#min_trimmed_reads). Our samples have less reads after trimming than the default value of 10,000.

On your `multiqc_report.html` file, view the section 'nf-core/rnaseq Workflow Summary'. The quality parameter is not described. We can view the full parameters that were supplied to trimgalore in two ways: 

1. View one of the Trim Galore log files for a sample

```default
more Lesson-5/trimgalore/SRR3473988.fastq.gz_trimming_report.txt
```

2. View the process execution script

Define the run_name and tool variables, like we did in lesson 2:
```default
run_name=<ENTER_YOUR_RUN_NAME>
tool=trim_galore
```

The run the following custom bash command again: 
```default
nextflow log ${run_name} | while read line;
    do
      cmd=$(ls ${line}/.command.sh 2>/dev/null);
      if grep -q $tool $cmd;
      then  
        echo $cmd;     
      fi; 
    done 
```

Open one of the `.command.sh` files, you'll see that the quality threshold has been applied.

::: {.callout-important}
## Stay vigilant! 

This lesson highlights the need to **thoroughly check your output to ensure that the intended anlysis has been run and the results are what you require**. The message `Pipeline completed successfully` printed to your terminal, everytime a run completes (and also exit status of zero for invidual tasks or cluster jobs if you are running on a cluster) indicates that there were no errors running the pipeline, **not** that your samples have produced the desired output!
:::

::: {.callout-note}
### **Key points**
- takeaway 1
- takeaway 2
:::