---
title: "**Using multiple configuration files at once**"
output:
  html_document:
    toc: false
    toc_float: false
from: markdown+emoji
---

::: callout-tip
### Objectives{.unlisted}

- Create and apply a custom configuration file for resource tracing
- Create and apply a custom configuration file for MultiQC
- Add a custom configuration file details to the params YAML file 
- Apply multiple custom configuration files in workflow execution
- Observe the heirarchy of parameter configuration in action
:::

Using multiple configuration files allows you to customise nf-core pipelines to your specific needs. Depending on how you work, where you work, and what pipelines you run, you may have configuration files that handle distinct issues, can be applied to specific infrastructures, or shared by multiple nf-core pipelines. In this lesson we will be applying multiple configuration files to the one run command. 

### **Apply multiple configurations**

You may need to apply multiple configuration files at once to an nf-core pipeline run. A few scenarios in which you would need to do this include: 

|Scenario |Why?|
|------|---------------------------------|
|Debugging and testing|If you are toubleshooting a particular process in the workflow, you may want to create a separate config file with process-specific modifications. |
|Resource optimisation|Depending on the scale and complexity of your data, some steps of the pipeline may require different settings or resources to achieve optimal performance. By using different config files with different parameters or settings, you can fine-tune the pipeline run.|
|MultiQC configuration|MultiQC allows users to specify configuration options in a YAML file called multiqc_config.yaml. This file allows users to customize the behavior and appearance of the MultiQC report.|

Let's make a portable configuration file for resource tracing called `trace-benchmark.config`. We can apply this config when we want to collect resource benchmarks. Because this config is not infrastructure- or pipeline-specific, we can share it with collaborators and use it across multiple pipelines:

```default
// Define timestamp, to avoid overwriting existing trace 
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')

// Generate custom resource trace file 
trace {
  enabled = true 
  file = "workshop-resource-trace-${trace_timestamp}.txt"
  fields = 'name,status,realtime,cpus,%cpu,memory,%mem,rss'
}
```

Rerun the workflow, adding `trace-benchmark.config` to the config flag and observe the extra file that is saved to our `session2` directory:

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
  -profile workshop \
  -c custom-nimbus.config,trace-benchmark.config \
  -params-file workshop-params.yaml \
  --outdir Lesson-4 \
  -resume
```

::: {.callout-warning}
### :skull_and_crossbones: **Don't confuse double and single quotes!** :skull_and_crossbones:

**Double quotes (`""`) allow for variable interpolation**, which means that variables can be evaluated and their values are substituted within the string. 

**Single quotes (`''`) denote a string literally**, which means that the string is treated as-is without any variable interpolation.

Try swapping the double quoted file value in your custom config above for a single-quoted value, rerun the workflow and note the creation of a 
```default
file = 'workshop-resource-trace-${trace_timestamp}.txt'
```
:::

### **Configure MultiQC reports**

Many nf-core pipelines use [MultiQC](https://multiqc.info/docs/) to generate a summary report at the end of a workflow. MultiQC is a reporting tool that can aggregate results and statistics output by various bioinformatics tools. It helps to summarise experiments containing multiple samples and multiple analysis steps. In nf-core pipelines, MultiQC is used to summarise statistics and results output by processes in the workflow and its reports can be quite verbose. MultiQC can be configured using custom YAML files to [customise the outputs of reports](https://multiqc.info/docs/reports/customisation/). 

We are going to configure MultiQC to aid interpretation of the [FastQC output it plots](https://multiqc.info/modules/fastqc/). Create a custom MultiQC configuration YAML file called `multiqc-config.yaml` and add the following:

```yaml
fastqc_config:
  fastqc_theoretical_gc: "mm10_txome" 
```

Here, we're plotting the [theoretical GC content](https://multiqc.info/modules/fastqc/#theoretical-gc-content) for the mouse reference transcript. 

To the `workshop-params.yaml` file, add:

```yaml
multiqc_config: "multiqc-config.yaml" 
```

Make sure both YAML files are saved, then re-run the workflow:

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
  -profile workshop \
  -c custom-nimbus.config \
  -params-file workshop-params.yaml \
  --outdir Lesson-4 \
  -resume
```

The logging information printed to the screen shows us again that the `params.yaml` file with the output directory set to **Lesson-2** has been overridden by the use of the flag `--outdir Lesson-4` in the run command. As the workflow runs, notice all the completed processes that are pulled from the cache and not rerun. Our use of the `multiqc-config.yaml` file adjusted the MultiQC process, as such this process was repeated using the updated settings. 

The changes we made above added the normal mouse transcriptome GC profile as a track to the fastQC per-sequence GC content plot. Take a look at the changes, open the Exercise4 `multiqc_report.html` file with Live Server as per previosuly (or use scp to take a copy to your local computer if you are not on VS Code). Compare this report with the MultiQC report from **lesson 1** by looking at the section **FastQC: Per Sequence GC Content**. Compare the two plots to observe the custom track has been successfully added. 

![](../figs/2.4_MultiQC.png)

::: callout-tip
### **Challenge**{.unlisted}

Given the normal mouse transcriptome GC profile indicated by the black dotted line, can you detect any GC bias in the input sequence data? 
:::

::: {.callout-caution collapse="true"}
### Solution

No, all samples' GC profiles follow a normal distribution. 
:::

Note that if we did detect GC bias, we could go back and correct for this by adding the custom salmon flag `--gcBias` to the nf-core parameter `--extra_salmon_quant_args`. If we were to do this, we would have to add the following line to our `workflow-params.yaml` file:

```default
extra_salmon_quant_args : '--writeUnmappedNames --gcBias'
```



::: {.callout-note}
### **Key points**
- takeaway 1
- takeaway 2
:::
  