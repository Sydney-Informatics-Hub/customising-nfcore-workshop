---
title: "**2.4. Using multiple configuration files at once**"
output:
  html_document:
    toc: false
    toc_float: false
from: markdown+emoji
---

::: callout-tip
### Objectives{.unlisted}
- Create and apply custom configuration files for:
  - Customised resource tracing
  - Bespoke MultiQC report formatting
  - Over-riding the default container for a tool
  - Adding tool arguments that are not available as nf-core parameters
- Apply multiple custom configuration files in a single workflow execution with `-c <conf-1,conf2,...>` 
:::

Using multiple configuration files allows you to customise nf-core pipelines to your specific needs. They can be applied in a **modular** fashion, where custom configs can be added to or dropped from a pipeline execution only as required. 

This flexibility ensures that we preserve the  **portability** and **reproducibility** of nf-core pipelines by **not editing the core workflow code** to make bespoke customisations. 

In this lesson we will create four custom configuration files for different customisation scenarios, and apply them to the one run command.
<br/><br/>


### **2.4.1. Customised resource tracing**

Running Nextflow workflows with the option `-with-trace` writes a [trace report](https://www.nextflow.io/docs/latest/tracing.html#trace-report) named `trace.txt` in the working directory.

nf-core pipelines by default create an `execution_trace` file within `<outdir>/pipeline_info`. A trace report can be customised to include any combination of [available fields](https://www.nextflow.io/docs/latest/tracing.html#trace-fields)  using the Nextflow `-fields` flag.

If there is a specific combination of fields you would like to regularly capture for your pipeline runs, perhaps for [resource benchmarking](https://www.nature.com/articles/s41467-019-09406-4), it would be useful to have a custom configuration file that can be optionally applied to any run, to save having to extract this information later. 

In this exercise, we will create a custom configuration file that writes a detailed resource tracing file with our custom fields. 

Unlike our institutional config `custom-nimbus.config`, which is required for our run in order to access tools through Singularity and restrict resource use to what we have on our VM, this config will be **optional** and **portable**:


- <span style="color:#000080;">We can apply it only as needed</span>
- <span style="color:#000080;">We can apply it to any nf-core pipeline</span>
- <span style="color:#000080;">We can apply it to nf-core runs on any machine</span>

<br/>


&#x27A4; To practise, extract some custom fields from a previous run using the `nextflow log` command.  

::: callout-tip
### Challenge

Using the [trace report fields](https://www.nextflow.io/docs/latest/tracing.html#trace-fields), write a `nextflow log` command to query the following for a previous workflow run:

- Task **name**
- Task **status**
- Task **exit** status 
- Task execution time (**realtime**)
- Number of **cpus** requested for the task
- Percentage of CPU used by the process ([use **pcpu** rather than **%cpu**](https://github.com/nextflow-io/nextflow/issues/3893#event-9076291921))
- Amount of **memory** requested for the task 
- Percentage of memory used by the process ([use **pmem** rather than **%mem**](https://github.com/nextflow-io/nextflow/issues/3893#event-9076291921))
- Resident set size of the process (**rss**)

:::

::: {.callout-caution collapse="true"}
### Solution

First, run `nextflow log` with no arguments to obtain the name of your last run (unless you can remember it!)

```default
nextflow log | tail -1
```

Then, supply that run name to the command below:

```default
nextflow log <run_name> -f name,status,exit,realtime,cpus,pcpu,memory,pmem,rss
```
:::

<br/>

Let's make a portable configuration file for resource tracing that we can share with collaborators and use across multiple pipelines :handshake: 


&#x27A4;  Open a file for editing called `custom-trace.config` and add the following content:

::: callout-note
### Syntax pointers

- `trace_timestamp` variable is used to avoid output filename clashes
- `enabled = true` is equivalent to adding the Nextflow command line option `-with-trace`
- output file is saved in directory specified by nf-core parameter `outdir` 
- Note that we need to use `%cpu` and `%mem`, as per the [Nextflow documentation](https://www.nextflow.io/docs/latest/tracing.html#trace-fields), and not `pcpu` and `pmem` as we applied on the command line due to this [issue](https://github.com/nextflow-io/nextflow/issues/3893#event-9076291921)

:::

```default
// Define timestamp, to avoid overwriting existing trace 
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')

// Generate custom resource trace file 
trace {
  enabled = true 
  file = "${params.outdir}/custom-resource-trace-${trace_timestamp}.txt"
  fields = 'name,status,exit,realtime,cpus,%cpu,memory,%mem,rss'
}
```
<br/>

&#x27A4;  Before submitting your run, delete or comment out the `withName: '.*:RNASEQ:ALIGN_STAR:STAR_ALIGN'` block we applied in the `custom-nimbus.config` file

- In Nextflow, use `//` for single line comments or  `/* .. */` to comment a block on multiple lines
<br/><br/>

&#x27A4;  Save both configs and resume your previous run, adding our second custom config `custom-trace.config` at `-c` and setting `outdir` to `Lesson-2.4.1`:

::: callout-note
### Specify multiple configs
When adding multiple custom configs, we supply them to `-c` in a **comma-delimited list**
:::


```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
  -profile workshop \
  -c custom-nimbus.config,custom-trace.config \
  -params-file workshop-params.yaml \
  --outdir Lesson-2.4.1 \
  -resume 
```


:eyes: Notice that your multiple custom configurations are listed under **Core Nextflow options** on the launch log printed to the screen:
<br/><br/>
![](../figs/2.4_screenshot_config_list.png)
<br/><br/>

&#x27A4;  Once the workflow has run, take a look at the `Lesson-2.4.1/custom-resource-trace-${trace_timestamp}.txt` file:

:eyes: Notice that while the status is `CACHED`, the resources reported are from the actual compute required to execute the process, and not the time this execution took to restore the data from cache

![](../figs/2.4_screenshot_custom_trace.png)
<br/><br/><br/>


### **2.4.2. Configure MultiQC reports**

Many nf-core pipelines use [MultiQC](https://multiqc.info/docs/) to generate a summary report at the end of a workflow. MultiQC is a reporting tool that can aggregate results and statistics output by various bioinformatics tools, helping to summarise experiments containing multiple samples and multiple analysis steps. 

MultiQC allows users the flexibility of [customising the output reports](https://multiqc.info/docs/reports/customisation/). 

nf-core has enabled users to take full advantage of this functionality through the inclusion of the [`--multiqc_config` parameter](https://nf-co.re/rnaseq/3.11.1/parameters#multiqc_config).

::: {.callout-important}
### Hidden nf-core parameters
The `--multiqc_config` parameter is a **'hidden param'!** To see this parameter, you need to apply `--show_hidden_params` on the command line help, or select **'Show hidden params'** on the nf-core parameters webpage 
:::
<br/>


We are going to create a custom MultiQC config to:

- Overlay a [theoretical GC content track](https://multiqc.info/modules/fastqc/#theoretical-gc-content) specific for our mm10 reference genome
- Add a custom report header 
<br/><br/>

&#x27A4;  Open a file for editing named `custom-multiqc-config.yaml` and add the following content:

::: {.callout-note}
### Tip
You can add any fields under the `report_header_info` section, as long as you follow the required formatting
:::

```default
# Project level information:
report_header_info:
  - Contact E-mail: "cali.willet@sydney.edu.au"
  - Workshop host: "Australian BioCommons"
  - Workshop title: "Unlocking nf-core - customising workflows for your research"
  - Workshop URL: https://sydney-informatics-hub.github.io/customising-nfcore-workshop/
  - Sample data: Mouse RNAseq from https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-016-2801-4 

# Theoretical GC Content:
fastqc_config:  
  fastqc_theoretical_gc: "mm10_txome" 
```
<br/>

&#x27A4; To the `workshop-params.yaml` file, add:

```default
multiqc_config: "custom-multiqc-config.yaml" 
```
<br/>

&#x27A4; Make sure both YAML files are saved, then re-run the workflow:

::: callout-tip
### Challenge
Can you construct the `run` command without viewing the solution below?

:bulb: Think about **nf-core parameters** versus **Nextflow configuration files**

:::

::: {.callout-caution collapse=true}
### Solution
We do **not** need to add our MultiQC YAML config at the Nextflow option `-c` because we have provided it as a value to the **nf-core parameter** `multiqc_config`  within `workshop-params.yaml`

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
  -profile workshop \
  -c custom-nimbus.config,custom-trace.config \
  -params-file workshop-params.yaml \
  --outdir Lesson-2.4.2 \
  -resume
```
:::


<br/>

&#x27A4; View the html file `Lesson-2.4.2/multiqc/star_salmon/multiqc_report.html` and compare it to the report generated by a previous run:

::: {.callout-note}
### Reminder: Viewing the MultiQC HTML
- If you are using VS Code with the 'Live Server' extension installed, right click the html file in the Explorer pane and select 'Open with Live Server'
- If you are using a terminal without a browser GUI enabled, use eg `scp` command to take a copy to your local computer and open in your preferred browser 
:::

Navigate to the section titled **FastQC: Per Sequence GC Content**. Compare the two plots to observe the custom track has been successfully added. 

![](../figs/2.4_MultiQC.png)
<br/>

:eyes: This track has shown that our sample transcriptomes follow a normal distribution consistent with the mm10 reference. 
<br/><br/>

::: callout-tip
### Challenge 
If we did detect GC bias, how could we customise our run to correct for this?

:weight_lifting: This is a tricky one, particularly if you are unfamiliar with RNAseq analysis! 

:bulb: So here is a freebie to get you started: correcting for GC bias in this analysis requires operation at the transcript quantification step, which is performed by the `SALMON_QUANT` module
:::

::: {.callout-caution collapse="true"}
### Solution


1. Check the tool documentation for `salmon`: we need to apply the [`--gcBias`](https://salmon.readthedocs.io/en/latest/salmon.html#gcbias) flag
2. Check the available nf-core [parameters for the rnaseq pipeline](https://nf-co.re/rnaseq/3.11.1/parameters): we find that there is no nf-core parameter addressing GC bias!
3. However, the astute observer would discover a parameter `--extra_salmon_quant_args` with description *'Extra arguments to pass to Salmon quant command in addition to defaults defined by the pipeline'*. Sounds perfect, yes?!
5. We can then provide the required `salmon` flag (and any others we needed) as an argument to the nf-core `--extra_salmon_quant_args` parameter, wrapped in quotes, supplying the parameter to the run as we would any other nf-core parameter (either on the command line or within a parameters file):

```default
# Within parameters YAML file:
extra_salmon_quant_args : '--gcBias'

# On the command line - note the intentional inclusion of whitespace inside the quotes:
--extra_salmon_quant_args '--gcBias '
```
:::
<br/><br/>

:scream: <span style="color:#8b0000;">**What would we do if the above solution was not available within our chosen nf-core pipeline?**</span>

 We will cover this in [Lesson 2.4.4 Apply external arguments](2.4_multiConfig.html#apply-external-arguments)! :sunglasses:

<br/>

### **2.4.3. Configure your run to use a non-default container**

::: callout-important
### Caveat
Note that for deploying nf-core workflows, it is not recommended to replace the tools within the workflow, as this will decrease portability and reproducibilty! This exercise is to demonstrate how you can specify containers, as this may aid you in developing and testing your own Nextflow workflows or testing new tool versions 
:::

For this example, let's assume we want to test out the latest version of [Trim Galore](https://github.com/FelixKrueger/TrimGalore), which is newer than the default version of Trim Galore used by version 3.11.1 of `nf-core/rnaseq`. 

As can often be the case in programming, [**TIMTOWTDI**!](https://wiki.treasurers.org/wiki/TIMTOWTDI) 

Given what you have learnt about custom configuration files so far, take a moment to think about the **optimal method to use** for this customisation.

::: callout-tip
### Thoughts? :thought_balloon:
**For maintaining portability and reproducibility, what is the best way to specify our custom Trim Galore container when we execute the `nf-core/rnaseq` pipeline?** 

**a.** Within the `custom-nimbus.config` institutional config file. It's already working well on our platform, so we can build on it for further customisations without issue. 

**b.** Within a separate custom config file named `custom-trimgalore-version.config`. We would then apply it at `-c` along with our institutional config whenever it was required. 

**c.** Within the Trim Galore `main.nf` file. This way, we don't need to worry about adding another custom config when we execute the `run` command. 

:::

::: {.callout-note appearance="simple" collapse="true"}
### Answer
In the event that we are testing a different tool version, this should **not** be placed within the institutional config that is shareable with others using nf-core pipelines on the same infrastructure. Doing so would prevent our institutional config from being portable to other analyses. 

In general, editing the process `main.nf` file is **not** recommended, as this impedes reproducibility. Swapping out tool versions is a bespoke adaptation of the nf-core workflow that would harm reproducibility if it was inadvertently executed, which is likely to happen if it is hidden within the source code.  

By placing it within a clearly named custom config file, there is less chance of unwittingly executing a workflow that does not match the expected utilisation of tools. Whenever we run an nf-core pipeline, the custom configs we applied are listed under **Core Nextflow options** in the run log, so there is a record that the particular configuration file was applied. Take care to **save** any custom configuration files applied to a run along with the project outputs, and to **use an informative config name**. 
:::

&#x27A4; Identify the default version of Trim Galore that has been used in our runs so far from the `software_versions.yml` file: 

- Versions of all tools used in nf-core pipelines are reported in the default output file `<outdir>/pipeline_info/software_versions.yml`
- This information is also shown in the 'nf-core/rnaseq Software Versions' section of the MultiQC html report  
- You might view the `software_versions.yml` file by opening it from the VS Code explorer pane, using `more` command, or `grep` for the tool name
- The module names are listed in alphabetical order, with the tools and versions used by the process listed below each module

```default
more Lesson-2.4.2/pipeline_info/software_versions.yml
```
```default
TRIMGALORE:
  cutadapt: '3.4'
  trimgalore: 0.6.7
```

::: callout-tip
### If you have not yet run this version of the pipeline
...and thus do not have a `software_versions.yaml` or MultiQC report to check, one way to discover the default tool version is to look in the process `main.nf` file:

``` default
grep container nf-core-rnaseq-3.11.1/workflow/modules/nf-core/trimgalore/main.nf 
```
```default
    container "${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?
        'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' }"
```

This should not often be the case, as nf-core pipelines should first be run with a test dataset *before* executing your full run and delving into custom configuration.

nf-core pipelines ship with `test` datasets to enable easy testing on your infrastructure with eg `nextflow run <workflow> -profile singularity,test` 
:::
<br/>


&#x27A4; Identify the container path for Trim Galore v. 0.6.10 hosted at CernVM-FS:

::: callout-note
### Biocontainers at cvmfs

- Recall that we have been accessing our training materials from [CernVM-FS](https://support.pawsey.org.au/documentation/pages/viewpage.action?pageId=92832676#NimbusforBioinformatics-1.BiocontainersandReferenceGenomedata )
- CernVM-FS is a read-only filesystem providing access to common bioinformatics reference datasets and Singularity [Biocontainers](https://biocontainers.pro/)
- CernVM-FS comes pre-mounted on Pawsey Nimbus VMs using the [Pawsey Bio - Ubuntu 22.04 - 2023-03 image](https://support.pawsey.org.au/documentation/display/US/Nimbus+for+Bioinformatics#)
- Containers are mounted at the path `/cvmfs/singularity.galaxyproject.org`, with sub-directories based on the first 2 letters of the tool name, eg `/cvmfs/singularity.galaxyproject.org/t/r/` for Trim Galore containers 
:::

``` default
ls /cvmfs/singularity.galaxyproject.org/t/r/trim*
```
```default
/cvmfs/singularity.galaxyproject.org/t/r/trim-galore:0.6.10--hdfd78af_0
```
<br/>

&#x27A4; Next, identify the execution path for the TRIMGALORE module: 

``` default
grep -i galore nf-core-rnaseq-3.11.1/workflow/conf/modules.config 
```
```default
    if (params.trimmer == 'trimgalore') {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
    if (params.trimmer == 'trimgalore') {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
                        params.extra_trimgalore_args ? params.extra_trimgalore_args.split("\\s(?=--)") : ''
```
<br/>

&#x27A4; Open a file for editing named  `custom-trimgalore-version.config`, and start building your config with the `process` scope and `withName` selector that we covered in
[Lesson 2.3.5](2.3_configEnv.html#custom-resource-configuration-using-process-names):

```default
process {
  withName: {

  }
}
```
<br/>

&#x27A4; Then copy the TRIMGALORE module execution path from your terminal inside the `withName` block:

- Make sure to copy the module for TRIMGALORE and not FASTQC which are both within the same SUBWORKFLOW

``` default
process {
  withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {

  }
}
```
<br/>

&#x27A4; Finally, copy the full container path inside the `withName` block:

::: callout-note
### 
Other remote container sources can be used, such as [quay.io](https://quay.io/organization/biocontainer), or point to a local image if your machine does not have internet access 
:::

``` default
process {
  withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
    container = '/cvmfs/singularity.galaxyproject.org/t/r/trim-galore:0.6.10--hdfd78af_0' 
  }
}
```
<br/>

&#x27A4; Save `custom-trimgalore-version.config` then resume the previous run, supplying our **three** configuration files at `-c` and specifying `--outdir Lesson-2.4.3`:

``` default
 nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
  -profile workshop \
  -c custom-nimbus.config,custom-trace.config,custom-trimgalore-version.config \
  -params-file workshop-params.yaml \
  --outdir Lesson-2.4.3 \
  -resume 
```

::: callout-warning
### :hourglass: 
Because we have altered a pre-processing step, read trimming and all downstream steps will need to be re-computed. Our run will take ~ 10 minutes to complete. 

For now we will skip forward to the next lesson and check on the results of this lesson a little later. 

&#x27A4; Leave the `run` command running in your terminal, and open a new terminal (if you are in VS Code, do this by clicking the `+` icon in the top right corner of your terminal)

- Run the `nextflow log` command with no arguments. Observe that this command is applicable to the working directory, not the session. 
:::
<br/><br/>

&#x27A4; After your run has completed, check that the updated version of Trim Galore has been used:

```default
grep -i galore Lesson-2.4.3/pipeline_info/software_versions.yml
```
```default
TRIMGALORE:
  trimgalore: 0.6.10
```
```default
grep -i galore Lesson-2.4.2/pipeline_info/software_versions.yml 
```
```default
TRIMGALORE:
  trimgalore: 0.6.7
```
<br/><br/>


### **2.4.4. Apply external arguments**

Mandatory minimum arguments that a tool needs to run are hard-coded within the `main.nf` file of the nf-core module.

Optional arguments for a tool that are commonly changed are usually included as nf-core workflow parameters, so they can be easily customised on the command line or supplied within a parameters file. 

As we are all aware, bioinformatics tools can have a *lot* of optional arguments. It is not feasible for nf-core to paramaterise all of these arguments...

![](../figs/2.4_args_pie_chart.png){width=40%}

<br/>


In this lesson, we will learn how to apply any argument for a tool that is not explicitly covered by an nf-core workflow parameter using Nextflow's [`ext` directive](https://www.nextflow.io/docs/latest/process.html#ext).
<br/><br/>

&#x27A4; Consider the diagram below:


- On the **left** of the diagram is an example of the standard `main.nf` format of a process named `example` stored in the `modules` directory
  - Above the script block, the `$args` variable is defined
  - The `task.ext.args ?: ''` expression checks if the `ext.args` parameter has already been defined
  - If it isn't defined it will assign an empty string 
  - Inside the script block, the `$args` variable is applied to the tool command
- In the **middle** of the diagram is a custom configuration file targeting the 'EXAMPLE' process
  - This configuration file gives the tool-specific argument `--flag1` to `ext.args` using `withName`
- On the **right** of the diagram we see how the tool command is executed if `-c example-custom.config` was applied to the run
  - The `$args` variable is interpolated to `--flag1` when `modules/example/main.nf` is executed
<br/><br/>

![](../figs/2.5_ext-args.png)
<br/><br/>

:eyes: You can observe the empty `$args` variable at play within `.command.sh` scripts for a run:

```default
nextflow log | tail -1
nextflow log <run_name> -f script
```
<br/><br/>


>:hourglass: <span style="color:#8b0000;">*Before we continue, time for a quick check back on the `Lesson-2.4.3` run!*</span> 

<br/><br/>

We will now pass an optional flag to the Trim Galore process using `  ext.args` in a custom configuration file. 

::: {.callout-important}
### Disclaimer :hand_over_mouth:
This workshop was developed *before* the release of `nf-core/rnaseq` revision 3.11.0, where the parameter [`--extra_trimgalore_args`](https://nf-co.re/rnaseq/3.11.1/parameters#extra_trimgalore_args) was first introduced. 

We have retained this exercise as it is equally applicable to other tools which *do not* have an `--extra_<tool>_args` nf-core parameter. 

This is a good reminder that:

- nf-core pipelines are under active development
- carefully check the parameter and usage docs with each new release
- submit feature requests to the nf-core/github pipeline repo to have `--extra_<tool>_args` added where you think it's warranted
:::
<br/><br/>

For the sake of the lesson, let's assume we want to apply a very stringent minimum Phred score of 40. 

:exclamation: *This is overly stringent! Bear with us...* :blush:
<br/><br/>

&#x27A4;  Follow the decision tree to work out how to apply this workflow customisation. Some useful links are below the flowchart:




![](../figs/2.4_trimgalore_qual_decision_chart.png)
<br/><br/>

:toolbox: [Trim Galore docs](https://github.com/FelixKrueger/TrimGalore/blob/master/Docs/Trim_Galore_User_Guide.md#general-options)

:toolbox: [nf-core/rnaseq trimming params v.3.11.1](https://nf-co.re/rnaseq/3.11.1/parameters#read-trimming-options) vs [v.3.10.1](https://nf-co.re/rnaseq/3.10.1/parameters#read-trimming-options)

:toolbox: [Trim Galore `main.nf`](https://github.com/nf-core/rnaseq/blob/3.11.1/modules/nf-core/trimgalore/main.nf)
<br/>

::: {.callout-note}
### Inclusion of ext.args
Recall from [Lesson 2.1.2](2.1_design.html#design-your-run-command) that the inclusion of `ext.args` is currently standard practice for all DSL2 nf-core modules where additional parameters may be required to run a process, however this *may not be implemented for all processes*
:::
<br/>

From the above investigation, we have learnt that:

- The Trim Galore argument `--quality 40` is required to over-ride the Trim Galore default of 20
- This parameter is absent from the `nf-core/rnaseq` parameters list (for v.3.10.1 that is!) :blush:
- Only `--cores`, `--gzip` and input file are hard-coded in `trimgalore/main.nf`
- `ext.args` **is** defined in `trimgalore/main.nf`


<br/>

 
::: callout-tip
### **Challenge**{.unlisted}
Write a custom configuration file named `custom-trimgalore-args.config` that adds `--quality 40` to the script block of the TRIMGALORE module 

:weight_lifting: Try to write the config without showing the solution!

:bulb: **Hint:** you may find it helpful to take a copy of the `custom-trimgalore-version.config` file from the previous exercise
:::

::: {.callout-caution collapse="true"}
### Solution
```default
// A custom configuration file for specifying external tool arguments to Trim Galore

process {
    withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {   
        ext.args = '--quality 40'
    }
}
```
:::
<br/>

&#x27A4;  Save `custom-trimgalore-args.config` then resume your run, adding our latest custom config file to the growing list at `-c` and set `outdir` param to `Lesson-2.4.4`:

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
  -profile workshop \
  -c custom-nimbus.config,custom-trace.config,custom-trimgalore-version.config,custom-trimgalore-args.config \
  -params-file workshop-params.yaml \
  --outdir Lesson-2.4.4 \
  -resume
```
<br/><br/>

:astonished: Pipeline **completed successfully** but <span style="color:#8b0000;"> 2/2 samples failed!</span>

![](../figs/2.4_failed_star.png)
<br/><br/>


&#x27A4;  Investigate the source of the failure:

- Following the advice of the warning message, check the MultiQC report by opening the file `Lesson-2.4.4/multiqc/star_salmon/multiqc_report.html` (with Live Server VS Code extension or taking a local copy)

- Click on the 'WARNING: Fail Trimming Check' on the navigation headings on the left

- Both of our samples '*failed the minimum trimmed reads threshold specified via the `--min_trimmed_reads` parameter, and hence were ignored for the downstream processing steps*'

- Looking at the `nf-core/rnaseq` parameter documentation, we see [`--min_trimmed_reads` param](https://nf-co.re/rnaseq/3.11.1/parameters#min_trimmed_reads) with default value 10,000. Our samples both had < 5,000 reads

- Comparing the outputs in `Lesson-2.4.4` to a previous run, notice there is no `star_salmon` directory, which is where the output of STAR alignment and Salmon quantification modules are saved 
<br/><br/>

::: {.callout-important}
## Stay vigilant! 

This lesson highlights the need to **thoroughly check your output to ensure that the intended anlysis has been run and the results are what you require**. 

The message `Pipeline completed successfully` printed to your terminal every time a run completes (and also exit status of zero for individual tasks or cluster jobs if you are running on a cluster) indicates that there were no errors running the pipeline, **not** that your samples have produced the desired output!
:::
<br/><br/>


&#x27A4;  Confirm that the external argument was actually applied:

:exclamation: In this example, it is clear that our `ext.args` customisation was successfully applied because of the catastrophic failure it produced. In less dramatic cases, **how can we confirm that the external argument was actually applied?** :thinking:
<br/><br/>

Within your MultiQC report, navigate to the section **'nf-core/rnaseq Workflow Summary'**

  - Unlike our custom **options**, **profiles**, and **configs**, the custom quality parameter is **not documented!**
  - :thinking: seems worthy of a feature request...

- Some tools write a handy log, in which case you might view the applied parameters from that file, eg:

```default 
head Lesson-2.4.4/trimgalore/SRR3473988.fastq.gz_trimming_report.txt 
```

![](../figs/2.4_trimgalore_log.png)
<br/><br/>


In the absence of an informative tool log, you can always rely on `nextflow log` :smiling_face_with_three_hearts:
```default
nextflow log <run_name> -f script | grep -A 10 trim_galore
```
```default
trim_galore \
  --quality 40 \
  --cores 1 \
  --gzip \
  SRR3473989.fastq.gz
```
<br/><br/>


&#x27A4;  **Optional final run for the purists at heart :angel:**

If you would like to conclude today's compute with a successful run, try changing the Trim Galore `--quality` threshold to 30
<br/><br/><br/> 




::: {.callout-note}
### **Key points**
- You can customise resource tracing, mutliqc report format and container use through custom configuration files
- `ext` is a very handy Nextflow directive that has been enabled by nf-core to provide full tool functionality for end users through `ext.args` in custom configs
- You can specify multiple custom configuration files at the Nextflow option `-c` in a comma-delimited list 
- Appropriate custom config use provides **modularity, portability and reproducibility** to nf-core workflows 
- **There is no substitute for reading the tool docs when customising your runs!** :book:
:::
  