---
title: "**Using multiple configuration files at once**"
output:
  html_document:
    toc: false
    toc_float: false
from: markdown+emoji
---

::: callout-tip
### Objectives{.unlisted}

- Create a custom configuration file for MultiQC
- Add a custom configuration file details to the params YAML file 
- Apply multiple custom configuration files in workflow execution
- Observe the heirarchy of parameter configuration in action
:::

Create a file in working directory called `multiqc_config.yaml`.

Add the following to this file:
```default
fastqc_config:  

  fastqc_theoretical_gc: "mm10_txome" 
```

To the `params.yaml` file, add:

```default
multiqc_config : multiqc_config.yaml 
```

Make sure both YAML files are saved, then run as usual, ensuring the `-resume` flag is included:

```default
nextflow run ../rnaseq/main.nf \
  -c pawsey_nimbus.config \
  -profile singularity,c2r8 \
  -params-file params.yaml \
  -resume \
  --outdir Exercise4
  ```

The logging information printed to the screen shows us again that the `params.yaml` file with the output directory set to **Exercise2** has been overridden by the use of the flag `--outdir Exercise4` in the run command. As the workflow runs, notice all the completed processes that are pulled from the cache and not rerun. Our use of the `multiqc_config.yaml` file adjusted the MultiQC process, as such this process was repeated using the updated settings. 

The changes we made above added the normal mouse transcriptome GC profile as a track to the fastQC per-sequence GC content plot. Take a look at the changes, open the Exercise4 `multiqc_report.html` file with Live Server as per previosuly (or use scp to take a copy to your local computer if you are not on VS Code):

::: {.callout-caution collapse="true"}
### Download the MultiQC report from your terminal with scp 

```bash
scp 
```
:::


Compare this report with the MultiQC report from **lesson 1** by looking at the section **FastQC: Per Sequence GC Content**. Compare the two plots to observe the custom track has been successfully added. 

![](../figs/2.4_MultiQC.png)

::: callout-tip
### **Challenge**{.unlisted}

Given the normal mouse transcriptome GC profile indicated by the black dotted line, can you detect any GC bias in the Exercise4 results? 
:::

::: {.callout-caution collapse="true"}
### Solution

No, all samples' GC profiles follow a normal distribution. 
:::

Note that if we did detect GC bias, we could go back and correct for this by adding the custom salmon flag `--gcBias` to the nf-core parameter `--extra_salmon_quant_args`. If we were to do this, our params.yaml file would have the following line:

```default
extra_salmon_quant_args : '--writeUnmappedNames --gcBias'
```

TODO: add challenge for location of the multiqc_report.html file is /home/ubuntu/nfcoreWorkshopTesting/exercise2/multiqc/star_salmon - can make an extra challenge to see if user can work out where to look for it given the stdout from the run (ie work/5d/e293 blah blah)

::: {.callout-note}
### **Key points**
- takeaway 1
- takeaway 2
:::
  