---
title: "**Configuring a run for your environment**"
output:
  html_document:
    toc: false
    toc_float: false
from: markdown+emoji
---

::: callout-tip
### Objectives{.unlisted}

- Understand formatting requirements of a config file 
- Write a custom config file for your local environment that overwrites default workflow settings 
- Run a workflow using the custom config file and appropriate Nextflow flag 
- Use an alternative container source for a workflow process  
:::

Nextflow's portability is enabled by its ability to separate workflow implementation from the configuration settings required to execute it. In this lesson we will be using a custom configuration file to define the specifications required for workflow execution on our compute environment. While nf-core workflows are designed to be portable and work out of the box, sometimes it will be necessary for you to customise the workflow's configuration so that it can run on your environment. The nf-core developer community currently offer a number of ways to [configure nf-core workflows](https://nf-co.re/usage/configuration). 

::: {.callout-caution collapse="true"}
### **What 'compute resources' are we talking about?**

Compute resources refer to the Central Processing Unit (CPU), Random Access Memory (RAM), and disk requirements of the workflow, which can vary depending on the size and complexity of our input data, and the specific work being performed. These are critical resources that determine the efficiency and scalability of our workflows. Consider the following analogy for how CPUs, RAM, and disk space work together to process data. 

![](../figs/2.3_CPUnigella.png)

Imagine Nigella Lawson preparing a Christmas dinner in her kitchen. Like Nigella in the kitchen, the **CPU is the main processing unit** in a computer that performs the various tasks in your compute environment. 

Like Nigella's countertop that acts as her working space in the kitchen, **RAM is the temporary working space** used to store and manipulate data during computation. The amount of RAM required by a task depends on the size of the input data, as well as the complexity of the task being performed. Insufficient RAM can cause the workflow to fail or significantly slow down due to excessive disk I/O. 

Like Nigella's fridge and pantry that hold all her ingredients, **disk space is required to store all the input/output data and intermediate files** generated by a task. In bioinformatics, well organised and large amounts of disk space is required because biological data sets can be large, complex, and varied in format. 
:::

### **Default nf-core configuration**

Remember that when a `main.nf` file is run for any Nextflow workflow, Nextflow looks for [configuration files in multiple locations](https://www.nextflow.io/docs/latest/config.html#configuration-file) to determine how to execute the workflow and its processes. One of the files Nextflow will always look for is `nextflow.config`. Currently, all nf-core workflows use a `nextflow.config` file and a `conf/base.config` file to define the default execution settings and parameters of a workflow.  

Let's take a look at the nf-core/rnaseq `nextflow.config` file:

```default
cat nf-core-rnaseq-3.11.1/workflow/nextflow.config
```

::: callout-tip
### **Challenge**{.unlisted}

1. What is the default aligner parameter being applied? 
2. What default max memory, cpu, and walltime resources have been specified?
3. What config file is loaded by default for all nf-core workflows? 
:::

::: {.callout-caution collapse="true"}
### Solution

1. Inside the Global default `params {}` section, on line 58 of the `nextflow.config` under `// Alignment`:
```default
aligner = 'star_salmon'
```

2. Inside the Global default `params {}` section, on lines 120-124 of the `nextflow.config` under `// Max resource options`:
```default
max_memory = '128.GB'
max_cpus   = 16
max_time   = '240.h'
```

3. Inside Global default `params {}` section, on line 128 of the `nextflow.config` under `// Load base.config by default for all pipelines`:
```default
includeConfig 'conf/base.config'
```
:::

### **When to use a custom config file**

There are a number of situations in which you may want to write a custom configuration file:

1. To override the default resource allocations of the workflow specified in the `nextflow.config` 
2. To override the default resource allocations for a process specified in `conf/base.config`
3. To use a different software installation method than those supported by nf-core 
4. To run a workflow on an HPC and interact with a job scheduler like PBSpro or SLURM 

Creating a custom configuration file is good practice to ensure that your workflow runs efficiently and reproducibly across different environments. It also allows you to easily share your workflow with others, who can use your custom config file to run the workflow in the same way in the same computational environment or on the same infrastructure. 

::: {.callout-note}
### **Why should I be concerned with computational efficiency?** :earth_asia: 

Bioinformatics relies on large-scale computational infrastructures and has a signficant carbon footprint due to the energy required to run computational workflows. We can optimise our worklfows to not only reduce their runtime, but also adopt more sustainable computing practices. 

By using cloud computing services and high-performance computing clusters (like those provided by [Pawsey](https://pawsey.org.au/our-green-credentials/)), we can take advantage of energy-efficient infrastructure. We can also use tools like Nextflow that provide features like intelligent task scheduling, automatic job parallelisation, and task-level resource allocation. If you'd like to learn more about the carbon footprint of some bioinformatics workflows and tools, this [paper](https://academic.oup.com/mbe/article/39/3/msac034/6526403) makes for an interesting read! 
:::

In our case, we are going to write a custom configuration file to override the default configurations of the workflow with configurations that are suitable for our workshop instances. We're going to replace 3 flags in our run command with this file:

1. `-profile singularity`
2.  `--max_memory 6.GB`
3. `--max_cpus 2`

### **Write a custom config**

Open a new file called `workshop.config` and start writing some Nextflow code by adding: 

```default
// Nimbus nf-core workshop profile

profiles {
  workshop {}
}
```
Using the [profiles scope](https://www.nextflow.io/docs/latest/config.html?highlight=scope#config-profiles) in a configuration file groups attributes that belong to the same profile, in our case **workshop**. Inside this **workflow** profile, enable Singularity by adding another scope called **Singularity**:

```default
// Nimbus nf-core workshop profile

profiles {
  workshop {
    singularity {
      enabled     = true
      autoMounts  = true
      cacheDir    = "/home/ubuntu/singularity_cache"
    }}
  }
```

Nextflow has a number of [features for using Singularity](https://www.nextflow.io/docs/latest/config.html?highlight=singularity#scope-singularity) that allow you to control how containers are executed. We are using:

* `enabled` to use Singularity to manage containers automatically 
* `autoMounts` to allow Nextflow to automatically mount host paths when a container is executed
* `cacheDir` to specify the directory Singularity images can be pulled from 

At the same level as the `singularity {}` scope, add some parameters: 

```default
// Nimbus nf-core workshop profile

profiles {
  workshop {
    singularity {
      enabled     = true
      autoMounts  = true
      cacheDir    = "/home/ubuntu/singularity_cache"
    }
    params {
      max_cpus   = 2
      max_memory = '6.GB'      
    }}
  }
```

Test it out, by running the pipeline again:

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
  -profile workshop \
  -c workshop.config \
  -params-file params.yaml \
  --outdir Lesson-3 \
  -resume
```

Take a look at the launch log printed to the screen. You can see your profile, custom config, and parameters have all been applied successfully. However we also get a warning in yellow:

```default
WARN: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Multiple config files detected!
  Please provide pipeline parameters via the CLI or Nextflow '-params-file' option.
  Custom config files including those provided by the '-c' Nextflow option can be
  used to provide any configuration except for parameters.

  Docs: https://nf-co.re/usage/configuration#custom-configuration-files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

The workflow runs to completion! A workaround for this current limitation with specifying parameters inside a configuration file is using the `profiles{}` scope. 

::: {.callout-note}
### **Key points**
- takeaway 1
- takeaway 2
:::