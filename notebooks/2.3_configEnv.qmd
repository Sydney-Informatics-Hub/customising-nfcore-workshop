---
title: "**Configuring a run for your environment**"
output:
  html_document:
    toc: false
    toc_float: false
from: markdown+emoji
---

::: callout-tip
### Objectives{.unlisted}

- Understand formatting requirements of a config file 
- Write a custom config file for your local environment that overwrites default workflow settings 
- Run a workflow using the custom config file and appropriate Nextflow flag 
- Use an alternative container source for a workflow process  
:::

Nextflow's portability is enabled by its ability to separate workflow implementation from the configuration settings required to execute it. In this lesson we will use configuration files to define specifications required to execute an nf-core pipeline on our compute environment. While nf-core workflows are designed to be portable and work out of the box, sometimes you will need to customise the workflow's configuration so that it can run on your environment. The nf-core developer community currently offer a number of ways to [configure nf-core workflows](https://nf-co.re/usage/configuration). 

### **Default nf-core configuration**

Remember that when a `main.nf` file is run for any Nextflow workflow, Nextflow looks for [configuration files in multiple locations](https://www.nextflow.io/docs/latest/config.html#configuration-file) to determine how to execute the workflow and its processes. One of the files Nextflow will always look for is `nextflow.config`. Currently, all nf-core workflows use a `nextflow.config` file and a `conf/base.config` file to define the default execution settings and parameters of a workflow.  

Let's take a look at the nf-core/rnaseq `nextflow.config` file:

```default
cat nf-core-rnaseq-3.11.1/workflow/nextflow.config
```

::: callout-tip
### **Challenge**{.unlisted}

1. What is the default aligner parameter being applied? 
2. What default max memory, cpu, and walltime resources have been specified?
3. What config file is loaded by default for all nf-core workflows? 
:::

::: {.callout-caution collapse="true"}
### Solution

1. Inside the Global default `params {}` section, on line 58 of the `nextflow.config` under `// Alignment`:
```default
aligner = 'star_salmon'
```

2. Inside the Global default `params {}` section, on lines 120-124 of the `nextflow.config` under `// Max resource options`:
```default
max_memory = '128.GB'
max_cpus   = 16
max_time   = '240.h'
```

3. Inside Global default `params {}` section, on line 128 of the `nextflow.config` under `// Load base.config by default for all pipelines`:
```default
includeConfig 'conf/base.config'
```
:::

### **When to use a custom config file**

There are a number of situations in which you may want to write a custom configuration file:

1. To override the default resource allocations of the workflow specified in the `nextflow.config` 
2. To override the default resource allocations for a process specified in `conf/base.config`
3. To use a different software installation method than those supported by nf-core 
4. To run a workflow on an HPC and interact with a job scheduler like PBSpro or SLURM 

Using a custom configuration file is good practice to ensure that your pipeline runs efficiently and reproducibly on your compute environment. It also allows you to easily share the pipeline with others who can use your custom config file to run it in the same computational environment. 

In this lesson, we are writing a custom configuration file to override the default configurations of the workflow with configurations that are suitable for our workshop instances. We're going to replace 3 flags in our run command with this file:

1. `-profile singularity`
2.  `--max_memory 6.GB`
3. `--max_cpus 2`

::: {.callout-note}
### **Why should I be concerned with computational efficiency?** :earth_asia: 

Bioinformatics relies on large-scale computational infrastructures and has a signficant carbon footprint due to the energy required to run computational workflows. We can optimise our worklfows to not only reduce their runtime, but also adopt more sustainable computing practices. This [paper](https://academic.oup.com/mbe/article/39/3/msac034/6526403) makes for an interesting read about the carbon footprint of bioinformatics workflows and tools!
:::

### **Customise resource configuration**

Open a new file called `custom-nimbus.config` and start writing some Nextflow code by adding: 

```default
// Nimbus nf-core workshop configuration profile

profiles {
  workshop {}
}
```
Using the [profiles scope](https://www.nextflow.io/docs/latest/config.html?highlight=scope#config-profiles) in a configuration file groups attributes that belong to the same profile, in our case **workshop**. Inside this **workflow** profile, let's remove the need for the `-profile singularity` flag from our run command by enabling Singularity by adding another scope called **Singularity**:

```default
// Nimbus nf-core workshop configuration profile

profiles {
  workshop {
    singularity {
      enabled     = true
      autoMounts  = true
      cacheDir    = "/home/ubuntu/singularity_cache"
    }}
  }
```

Nextflow has a number of [options for using Singularity](https://www.nextflow.io/docs/latest/config.html?highlight=singularity#scope-singularity) that allow you to control how containers are executed. We are using:

* `enabled` to use Singularity to manage containers automatically 
* `autoMounts` to allow Nextflow to automatically mount host paths when a container is executed
* `cacheDir` to specify the directory Singularity images can be pulled from 

Now let's address those two resource parameters `--max_memory 6.GB` and `--max_cpus 2`. At the same level as the `singularity {}` scope, add a parameters scope and specify each parameter underneath: 

```default
// Nimbus nf-core workshop configuration profile

profiles {
  workshop {
    singularity {
      enabled     = true
      autoMounts  = true
      cacheDir    = "/home/ubuntu/singularity_cache"
    }
    params {
      max_cpus   = 2
      max_memory = '6.GB'      
    }}
  }
```

::: {.callout-tip}

### Take note!
In Nextflow, scope organisation and heirarchy is indicated by curly bracket (`{}`) notation, not by text indentation!
:::

### **Customised process tracing**

Let's add just one more feature to our custom config file that will help us capture the true resource efficiency of the workflow at the task level. Remember we can use the `Nextflow log` command to show information about previous pipeline executions. We can customise which fields to print using the [`-fields` flag](https://www.nextflow.io/docs/latest/tracing.html#customizing-fields). This flag accepts options used by the [trace report](https://www.nextflow.io/docs/latest/tracing.html#trace-fields). 

::: callout-tip
### **Challenge**{.unlisted}

Using the [trace report fields](https://www.nextflow.io/docs/latest/tracing.html#trace-fields), write a nextflow log command to query the following for a previous workflow run:

* The name of the task
* The exit status of the task 
* The number of CPUs requested for task execution 
* The disk space requested for the task execution 
* The memory requested for the task execution 
:::

::: {.callout-caution collapse="true"}
### Solution

```default
nextflow log <runName> -f name,exit,cpus,disk,memory
```
:::

Let's adjust our pipeline to automatically generate a custom trace report to track how much of the CPU, memory, and disk we requested were actually used for each process. Below the `profiles {}` scope, add the following section to your `workshop.config`:

```default
// Define timestamp, to avoid overwriting existing trace 
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')

// Generate custom resource trace file 
trace {
  enabled = true 
  file = "workshop-resource-trace-${trace_timestamp}.txt"
  fields = 'name,status,realtime,cpus,pcpu,memory,pmem,rss'
}
```

::: {.callout-warning}
### :skull_and_crossbones: **Don't confuse double and single quotes!** :skull_and_crossbones:

**Double quotes (`""`) allow for variable interpolation**, which means that variables can be evaluated and their values are substituted within the string. 

**Single quotes (`''`) denote a string literally**, which means that the string is treated as-is without any variable interpolation.

Try swapping the double quoted file value in your custom config above for a single-quoted value, rerun the workflow and see how the file is output:
```default
file = 'workshop-resource-trace-${trace_timestamp}.txt'
```
:::

Rerun the pipeline:

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
  -profile workshop \
  -c custom-nimbus.config \
  -params-file workshop-params.yaml \
  --outdir Lesson-3 \
  -resume
```

Take a look at the launch log printed to the screen. You can see your profile, custom config, and parameters have all been applied successfully! Once the workflow has run, take a look at the `workshop-resource-trace-${trace_timestamp}.txt` file:

  ```default
  name    status  realtime        cpus    %cpu    memory  %mem    rss
  NFCORE_RNASEQ:RNASEQ:INPUT_CHECK:SAMPLESHEET_CHECK (samplesheet.csv)    CACHED  1s      1       28.0%   6 GB    0.2%    16.1 MB
  NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:GTF2BED (mm10_chr18.gtf)    CACHED  1s      2       51.3%   6 GB    0.3%    23.8 MB
  NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:CUSTOM_GETCHROMSIZES (mm10_chr18.fa)        CACHED  1s      1       34.1%   6 GB    0.0%    4.7 MB
  NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:GTF_GENE_FILTER (mm10_chr18.fa)     CACHED  1s      1       34.7%   6 GB    0.1%    13.9 MB
  NFCORE_RNASEQ:RNASEQ:FASTQ_SUBSAMPLE_FQ_SALMON:FQ_SUBSAMPLE (SRR3473984)        CACHED  2s      1       43.7%   6 GB    0.0%    6.5 MB
  NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:MAKE_TRANSCRIPTS_FASTA (rsem/mm10_chr18.fa) CACHED  4s      2       42.0%   6 GB    1.2%    94.4 MB
  NFCORE_RNASEQ:RNASEQ:FASTQ_SUBSAMPLE_FQ_SALMON:FQ_SUBSAMPLE (SRR3473985)        CACHED  2s      1       44.1%   6 GB    0.0%    6.3 MB
```

::: {.callout-tip collapse="true"}
### **Bonus exercise: applying an institutional config**


:::

::: {.callout-note}
### **Key points**
- takeaway 1
- takeaway 2
:::