---
title: "**Configuring a run for your environment**"
output:
  html_document:
    toc: false
    toc_float: false
from: markdown+emoji
---

::: callout-tip
### Objectives{.unlisted}

- Understand formatting requirements of a config file 
- Write a custom config file for your local environment that overwrites default workflow settings 
- Run a workflow using the custom config file and appropriate Nextflow flag 
- Use an alternative container source for a workflow process  
:::

**This section assumes content [here](https://nf-co.re/usage/configuration) about what is a config file, config heirarchy has been addressed in session 1 and will be edited to refer to session 1 content**. 

Nextflow's portability is enabled by its ability to separate workflow implementation from the configuration settings required to execute it. In the previous lesson we used a parameter file to define some workflow implementation settings, in this lesson we will be using configuration files to define the specifications required for task execution on our compute environment. While nf-core workflows are designed to be portable and work out of the box, sometimes it will be necessary for you to customise the workflow's configuration so that it can run on your environment. The nf-core developer community currently offer a number of ways to [configure nf-core workflows](https://nf-co.re/usage/configuration). 

::: {.callout-caution collapse="true"}
### **What 'compute resources' are we talking about?**

Compute resources refer to the Central Processing Unit (CPU), Random Access Memory (RAM), and disk requirements of the workflow, which can vary depending on the size and complexity of our input data, and the specific work being performed. These are critical resources that determine the efficiency and scalability of our workflows. Consider the following analogy for how CPUs, RAM, and disk space work together to process data. 

![](../figs/2.3_CPUnigella.png)

Imagine Nigella Lawson preparing a Christmas dinner in her kitchen. Like Nigella in the kitchen, the **CPU is the main processing unit** in a computer that performs the various tasks in your compute environment. 

Like Nigella's countertop that acts as her working space in the kitchen, **RAM is the temporary working space** used to store and manipulate data during computation. The amount of RAM required by a task depends on the size of the input data, as well as the complexity of the task being performed. Insufficient RAM can cause the workflow to fail or significantly slow down due to excessive disk I/O. 

Like Nigella's fridge and pantry that hold all her ingredients, **disk space is required to store all the input/output data and intermediate files** generated by a task. In bioinformatics, well organised and large amounts of disk space is required because biological data sets can be large, complex, and varied in format. 
:::

### **Default nf-core configuration**

Remember that when a `main.nf` file is run for any Nextflow workflow, Nextflow looks for [configuration files in multiple locations](https://www.nextflow.io/docs/latest/config.html#configuration-file) to determine how to execute the workflow and its processes. One of the files Nextflow will always look for is `nextflow.config`. Currently, all nf-core workflows use a `nextflow.config` file and a `conf/base.config` file to define the default execution settings and parameters of a workflow.  

Let's take a look at the nf-core/rnaseq `nextflow.config` file, either on the terminal or using your VScode file browser:

```default
cat rnaseq/nextflow.config
```

::: callout-tip
### **Challenge**{.unlisted}

1. What is the default aligner parameter being applied? 
2. What default max memory, cpu, and walltime resources have been specified?
3. What config file is loaded by default for all nf-core workflows? 
:::

::: {.callout-caution collapse="true"}
### Solution

1. Inside the Global default `params {}` section, on line 58 of the `nextflow.config` under `// Alignment`:
```default
aligner = 'star_salmon'
```

2. Inside the Global default `params {}` section, on lines 120-124 of the `nextflow.config` under `// Max resource options`:
```default
max_memory = '128.GB'
max_cpus   = 16
max_time   = '240.h'
```

3. Inside Global default `params {}` section, on line 128 of the `nextflow.config` under `// Load base.config by default for all pipelines`:
```default
includeConfig 'conf/base.config'
```
:::

In Nextflow workflows, additional configuration files can be included using the keyword `includeConfig`. In the nf-core/rnaseq workflow's `nextflow.config` this keyword is used to load the `conf/base.config` file, which defines a set of process-specific and workflow-level parameters that define resource requirements. This config file should be appropriate for general use on most high performane compute environments. Take a look at this file: 

```default
cat rnaseq/conf/base.config
```

The `conf/base.config` makes use of a number of Nextflow keywords. It has a `process` section and a series of `withLabel` and `withName` subsections: 

* The [Process](https://www.nextflow.io/docs/latest/process.html) scope defines default resource requirements for all processes in the workflow
* Process selectors [withLabel](https://www.nextflow.io/docs/latest/config.html?highlight=withlabel#process-selectors) and [withName](https://www.nextflow.io/docs/latest/config.html?highlight=withlabel#process-selectors) define process-specific configurations that can be applied selectively depending on their resource requirements. 

Let's look at how processes have been labelled to reflect these resource configuration in the nf-core/rnaseq workflow: 

```default
grep "label" rnaseq/modules/*/*/main.nf
```

```default
rnaseq/modules/nf-core/fastp/main.nf:       label 'process_medium'
rnaseq/modules/nf-core/fastqc/main.nf:      label 'process_medium'
rnaseq/modules/nf-core/gffread/main.nf:     label 'process_low'
rnaseq/modules/nf-core/gunzip/main.nf:      label 'process_single'
rnaseq/modules/nf-core/sortmerna/main.nf:   label "process_high"
rnaseq/modules/nf-core/trimgalore/main.nf:  label 'process_high'
rnaseq/modules/nf-core/untar/main.nf:       label 'process_single'
```

Only some of the processes have been labelled, for example the [FastQC](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/) process that performs quality checks on fastq files, has been labelled as a medium process. The `conf/base.config` file allocates processes labelled a medium a maxiumum of 6 CPUs, 36 Gb and 8 hours of walltime. 

```default
withLabel:process_medium {
  cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
  memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
  time   = { check_max( 8.h   * task.attempt, 'time'    ) }
}
```

The `check_max()` function applies the thresholds set by `--max_cpus`, `--max_memory` and `--max_time` parameters. The * task.attempt means that these values are doubled if a process is automatically retried after failing with an exit code that corresponds to a lack of resources.

::: callout-tip
### **Challenge**{.unlisted}

:::

::: {.callout-caution collapse="true"}
### Solution

:::

Resource configurations present in the `conf/base.config` file are not appropriate for our compute environment, given we are working with only 2 CPUs, 8 Gb of RAM, and 40 Gb of disk space. Additionally, from previous experience running FastQC we know this resource allocation goes above requirements for RNAseq data. The [`conf/base.config` files are deliberately generous](https://nf-co.re/usage/configuration#tuning-workflow-resources) due to the variety of possible workflow applications. There are opportunities for us to configure resources for this workflow to make better use of the computational environment we're working with. 

### **When to use a custom config file**

In the past two lessons, we've successfully overridden these maximum resource allocations specified in the `nextflow.config` and `conf/base.config` using flags in our run command. There are a number of situations in which you may want to write a custom configuration file:

1. To override the default resource allocations of the workflow specified in the `nextflow.config` 
2. To override the default resource allocations for a process specified in `conf/base.config`
3. To use a different software installation method than those supported by nf-core 
4. To run a workflow on an HPC and interact with a job scheduler like PBSpro or SLURM 

Creating a custom configuration file is good practice to ensure that your workflow runs efficiently and reproducibly across different environments. It also allows you to easily share your workflow with others, who can use your custom config file to run the workflow in the same way in the same computational environment or on the same infrastructure. 

### **Write a custom config**

Let's create a custom configuration file to override the default configurations specified by `nextflow.config` and `conf/base.config` that match the compute resources available to us on our instances. Open a new file called `custom.config` and add the following lines: 

```default
// Custom config for 2c.8r Nimbus instance

params {
  max_cpus = 2
  max_memory = '8.GB'
}
```

Now rerun the workflow with your custom config,again using the resume function and our `params.yaml` file but this time without using the --max_cpu and --max_mem flags: 

```default
nextflow run rnaseq/main.nf \
  -c custom.config \
  -profile singularity \
  -resume \
  -params-file params.yaml \
  --outdir Exercise3  
```

Note that we recieve a warning about specifying parameters in a config file and our workflow fails to run as we've not adequately specified maximum resources for CPUs and RAM:

```default
WARN: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Multiple config files detected!
  Please provide pipeline parameters via the CLI or Nextflow '-params-file' option.
  Custom config files including those provided by the '-c' Nextflow option can be
  used to provide any configuration except for parameters.

  Docs: https://nf-co.re/usage/configuration#custom-configuration-files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

### **How to use a config file**

You can apply a custom configuration file to your workflow by passing it as an argument in the nextflow run command using the `-c` flag. The syntax for specifying a custom configuration file is: 

```default
nextflow run <pipeline>/main.nf -c <name>.config
```

nf-core also offers a centralised collection of Nextflow configurations files that work at an infrastructure or institutional level, called [nf-core/configs](https://github.com/nf-core/configs). These configuration files may be:

* **Global profiles** that can be applied to all nf-core pipelines (in theory)
* **Pipeline profiles** for configuring a specific nf-core pipeline at an institutional infrastructure.

These can be applied to your workflow by including the [`-profile`](https://www.nextflow.io/docs/latest/config.html#config-profiles) flag in your run command.  The syntax for specifying an institutional configuration file is: 

```default
nextflow run <pipeline>/main.nf -profile <name>.config
```

::: {.callout-note}
### **Why should I be concerned with computational efficiency?** :earth_asia: 

Bioinformatics relies on large-scale computational infrastructures and has a signficant carbon footprint due to the energy required to run computational workflows. We can optimise our worklfows to not only reduce their runtime, but also adopt more sustainable computing practices. 

By using cloud computing services and high-performance computing clusters (like those provided by [Pawsey](https://pawsey.org.au/our-green-credentials/)), we can take advantage of energy-efficient infrastructure. We can also use tools like Nextflow that provide features like intelligent task scheduling, automatic job parallelisation, and task-level resource allocation. If you'd like to learn more about the carbon footprint of some bioinformatics workflows and tools, this [paper](https://academic.oup.com/mbe/article/39/3/msac034/6526403) makes for an interesting read! 
:::

::: {.callout-note}
### **Key points**
- takeaway 1
- takeaway 2
:::