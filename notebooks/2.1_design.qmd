---
title: "**2.1. Design a run command**"
website:
  page-navigation: true
output:
  html_document:
    toc: false
    toc_float: false
from: markdown+emoji
---

::: callout-tip
### Objectives{.unlisted}

- Use the nf-core documentation to select appropriate parameters for a run command 
- Write and run a nf-core rnaseq command on the command line 
- Explore pipeline deployment and set up 
:::

In this lesson, we will design a customised run command for the nf-core/rnaseq pipeline. We will be using the typical (default) run command as a base, additing some optional parameters. While some parameters are standard across nf-core pipelines, such as `--input` and `--genome`, most parameters are 

### **2.1.1. Download the pipeline code**

Start by creating a new directory for all of today's activities and move into it: 

```default
mkdir ~/session2 && cd $_
```

We recommend that you keep a local copy of a pipeline's code for the sake of reproducibility and record keeping. There are a number of ways to download a nf-core pipeline to your machine. We recommend using either the [nf-core tools](https://nf-co.re/tools/) utility to [download a pipeline for offline use](https://nf-co.re/tools/#downloading-pipelines-for-offline-use) or git. 

Take a look at the download options available to us:

```default
nf-core download --help
```

![](../figs/2.1_nfcore-download.png)

Run the following command:
```default
nf-core download rnaseq \
  --revision 3.11.1 \
  --outdir ~/session2/nf-core-rnaseq-3.11.1 \
  --container singularity \
  --compress none \
  --singularity-cache-only
```

You will be prompted to define a Singularity cache directory to store container images (`$NXF_SINGULARITY_CACHEDIR`). Specify the path we used in Session 1:

```default
export NXF_SINGULARITY_CACHEDIR=/home/training/singularity_cache
```

::: {.callout-tip}
### Nextflow has environmental variables!

Environmental variables are used to store information that can be accessed by different programs and scripts running on the system. Nextflow has a number of [environmental variables](https://www.nextflow.io/docs/latest/config.html#environment-variables) that can be used to override default Nextflow and pipeline behaviours. You can set them on the command line or by using [env scopes](https://www.nextflow.io/docs/latest/config.html#scope-env) when writing Nextflow.
:::

The nf-core tools utility will download the pipeline files and centralised configs but not the containers, given they already exist in our specified cache. 

::: {.callout-caution collapse="true"}
### **Alternate installation method**{.unlisted}
In situations where you might not wish to use the nf-core tools utility, download the nf-core/rnaseq source code from it's [GitHub repository](https://github.com/nf-core/rnaseq) with git. 

Clone the nf-core/rnaseq repository:
```default
git clone https://github.com/nf-core/rnaseq.git
```
> :no_entry: **BEWARE** :no_entry: this method will download a copy of the pipeline with a different directory name and slightly different structure. If you choose to use this method, you will need to adjust some paths specified in the upcoming lessons accordingly. 
::: 

Inside your `nf-core-rnaseq-3.11.1` workflow directory, you should see 2 subdirectories: 

```default
ls -l nf-core-rnaseq-3.11.1
```

```default
total 8
drwxrwxr-x  7 ubuntu ubuntu 4096 Apr 21 02:08 configs
drwxrwxr-x 12 ubuntu ubuntu 4096 Apr 21 02:08 workflow
```

Remember, as we ran the download command, a number of `INFO` logs were printed to the screen. The **workflow files from GitHub** were downloaded to the `workflow` directory and the **centralised configs from GitHub** were downloaded to the `configs` directory: 

![](../figs/2.1_nfcore-info.png)

For this session we will be working with the `workflow` directory:

```default
ls -l nf-core-rnaseq-3.11.1/workflow
```

```default
total 216
-rwxrwxr-x 1 ubuntu ubuntu 58889 Apr 21 02:08 CHANGELOG.md
-rwxrwxr-x 1 ubuntu ubuntu  9681 Apr 21 02:08 CITATIONS.md
-rwxrwxr-x 1 ubuntu ubuntu  9078 Apr 21 02:08 CODE_OF_CONDUCT.md
-rwxrwxr-x 1 ubuntu ubuntu  1096 Apr 21 02:08 LICENSE
-rwxrwxr-x 1 ubuntu ubuntu 10002 Apr 21 02:08 README.md
drwxrwxr-x 3 ubuntu ubuntu  4096 Apr 21 02:08 assets
drwxrwxr-x 2 ubuntu ubuntu  4096 Apr 21 02:08 bin
drwxrwxr-x 2 ubuntu ubuntu  4096 Apr 21 02:08 conf
drwxrwxr-x 3 ubuntu ubuntu  4096 Apr 21 02:08 docs
drwxrwxr-x 2 ubuntu ubuntu  4096 Apr 21 02:08 lib
-rwxrwxr-x 1 ubuntu ubuntu  2736 Apr 21 02:08 main.nf
drwxrwxr-x 4 ubuntu ubuntu  4096 Apr 21 02:08 modules
-rwxrwxr-x 1 ubuntu ubuntu 13970 Apr 21 02:08 modules.json
-rwxrwxr-x 1 ubuntu ubuntu 10847 Apr 21 02:08 nextflow.config
-rwxrwxr-x 1 ubuntu ubuntu 42576 Apr 21 02:08 nextflow_schema.json
-rwxrwxr-x 1 ubuntu ubuntu   359 Apr 21 02:08 pyproject.toml
drwxrwxr-x 4 ubuntu ubuntu  4096 Apr 21 02:08 subworkflows
-rwxrwxr-x 1 ubuntu ubuntu  1684 Apr 21 02:08 tower.yml
drwxrwxr-x 2 ubuntu ubuntu  4096 Apr 21 02:08 workflows
```

We explored the standard nf-core workflow directory structure in Session 1. The most important files and directories for this session are:

|Feature                |Importance                                                         |
|-----------------------|-------------------------------------------------------------------|
|`conf/`                |Contains standard configuration files for various profiles that build on global settings set by `nextflow.config`|
|`main.nf`              |The executable Nextflow script that defines the structure and flow of the workflow. It calls `workflows/rnaseq.nf`|
|`modules/`             |Contains Nextflow processes used by the workflow. They are called by the `main.nf` file|
|`workflows/rnaseq.nf`  |All the modules, subworkflows, channels, workflow structure for running the rnaseq pipeline |

### **2.1.2. Build your run command**

All nf-core pipelines are provided with sensible default settings that have broad applicability and comprehensive documentation that explains [pipeline usage](https://nf-co.re/rnaseq/3.11.1/usage) and [available parameters](https://nf-co.re/rnaseq/3.11.1/parameters). Before we can decide which parameters to apply, we need to identify the default settings of the pipeline and where we can customise for our own needs, if desired. 

Pipeline structure and possible customisation options will vary between nf-core pipelines. Generally, pipelines can be customised at a few different levels:

* The workflow structure: selecting which path to follow (i.e. the vaious method options below)
* The process: choosing one tool over another to perform a process (i.e. TrimGalore! vs FastP below)  
* Tool settings: applying specific thresholds or optional flags for a tool  
* Compute resources: specifying CPU and memory thresholds or execution and software methods based on the infrastructure you're working on.    

![](../figs/2.1_pipeline-choice.png)

Looking at the nf-core/rnaseq pipeline structure above, we can see that the developers have organised the workflow into **5 stages** and given users **1 location where we can make workflow-level customisations** and **2 locations where we can make process-level customisations**. The default nf-core/rnaseq method uses STAR to perform read alignment and Salmon to perform quantification. To understand tool and resource customisations, we'll need to take a look at the parameter documentation. We will explore these in depth in the following lessons. 

For now, take a look at all the options available for the pipeline by running:

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf --help 
```

Notice the top of the print out, there is a 'typical' run command provided. In the diagram below, we can compare the typical run command with the run command we will be executing. Our command applies the default method of STAR and Salmons for alignment and quantification but we've also diverged from the typical command where we have:

* Provided our own reference files via file specific parameters instead of using the iGenomes repository 
* Added some optional flags to customise some processes 
* Added some optional resource specifications suitable for our environment. 

![](../figs/2.1_default-command.png)

Underneath the typical run command suggestion, there are lots parameters, grouped under headings. 

:::{.callout-important}
### Overwhelmed by all the parameters?

For larger nf-core pipelines it can be challenging to pick which parameters are applied at which of the levels mentioned above. nf-core pipeline parameters are grouped under specific headings that identify which level of customisation, stage of the pipeline, or tool they apply to. 
::: 

Notice at the bottom of the print out, there is:

```default
!! Hiding 24 params, use --show_hidden_params to show them !!
```

Three additional parameter sections are hidden from view. This is because they are less commonly used. To view all the pipeline run options on the command line, run:

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf --help --show_hidden_params
```

::: {.callout-warning}
### **Hyphens matter!**
Hyphens matter when it comes to parameter flags in nf-core pipelines! Nextflow command-line parameters use one (`-`), whereas pipeline-specific parameters use two (`--`). For example: `-profile` is a **Nextflow** parameter, while `--input` is an **nf-core** parameter.
:::

All the data (including fastqs, reference fasta, gtf, Salmon and STAR indexes) are already available on an external file system called CernVM-FS that we can access from our Nimbus instances. Take a look at the files: 

```default
ls -l /cvmfs/data.biocommons.aarnet.edu.au/training_materials/SIH_training/UnlockNfcore_0523/

#Workaround for testing (data not yet on cvmfs)
wget -O nfcore_materials.tar.gz https://cloudstor.aarnet.edu.au/plus/s/gIBdDhKEwfq2j58/download
tar -zxvf nfcore_materials.tar.gz
ls -l ~/session2/materials
```

```default
drwxrwxr-x 2 ubuntu ubuntu 4096 Feb 14 05:36 fastqs
drwxrwxr-x 3 ubuntu ubuntu 4096 Feb 14 05:46 mm10_reference
-rw-rw-r-- 1 ubuntu ubuntu  641 Feb 16 05:57 samplesheet.csv
```

A [sample sheet](https://nf-co.re/rnaseq/3.11.1/usage#samplesheet-input) is a standard input requirement for nf-core pipelines. This sheet specifies:

* The sample name
* Relevant input files for each sample 
* Other metadata for each sample

Copy and save the text below as `samplesheet.csv`:

```default
sample,fastq_1,fastq_2,strandedness
SRR3473989,/home/ubuntu/session2/materials/fastqs/SRR3473989_selected.fastq.gz,,forward
SRR3473988,/home/ubuntu/session2/materials/fastqs/SRR3473988_selected.fastq.gz,,forward
SRR3473987,/home/ubuntu/session2/materials/fastqs/SRR3473987_selected.fastq.gz,,forward
SRR3473985,/home/ubuntu/session2/materials/fastqs/SRR3473985_selected.fastq.gz,,forward
SRR3473986,/home/ubuntu/session2/materials/fastqs/SRR3473986_selected.fastq.gz,,forward
SRR3473984,/home/ubuntu/session2/materials/fastqs/SRR3473984_selected.fastq.gz,,forward
```

This file has a header and one row for each sample, as directed by the nf-core samplesheet specifications. Note we only have one single-end read file for each sample, as such we have left the 3rd column empty.

### **2.1.3. Run the pipeline**

We need to store the path to our input and reference data in a variable for our run command:

```default
materials=/home/ubuntu/session2/materials #for cloudstor
materials=/cvmfs/data.biocommons.aarnet.edu.au/training_materials/SIH_training/UnlockNfcore_0523 #for cvmfs
```

Now run the pipeline, with the necessary flags and the `samplesheet.csv` file you just created: 

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
    --input samplesheet.csv \
    -profile singularity \
    --skip_markduplicates \
    --fasta $materials/mm10_reference/mm10_chr18.fa \
    --gtf $materials/mm10_reference/mm10_chr18.gtf \
    --star_index $materials/mm10_reference/STAR \
    --salmon_index $materials/mm10_reference/salmon-index \
    --save_trimmed true \
    --save_unaligned true \
    --extra_salmon_quant_args '--numBootstraps 10' \
    --max_memory '6.GB' \
    --max_cpus 2 \
    --outdir Lesson-2.1
```

::: {.callout-important}
## :shrug: Zoom check-in! :shrug:

Is everyone ok? 

Yes, move on :clap: `:clap:`   
No, help! :cry: `:cry:` 
:::

Take a look at the stdout printed to the screen. Your workflow configuration and parameter customisations are all documented here. You can use this to confirm if your parameters have been correctly passed to the run command: 

![](../figs/2.1_nf-core-stdout.png)

As the workflow starts, you will also see a number of processes spawn out underneath this. Recall from session 1 that processes are executed independently and can run in parallel. Nextflow manages the data dependencies between processes, ensuring that each process is executed only when its input data is available and all of its dependencies have been satisfied. Take a look at the image below which explains a workflow's process status output provided by Nextflow using the data dependencies for the STAR_ALIGN process as an example. 

![](../figs/2.1_nf-core-process.png)

### **2.1.4. Examine the outputs**

Once your pipeline has completed, you should see this message printed to your terminal:

```default
-[nf-core/rnaseq] Pipeline completed successfully with skipped sampl(es)-
-[nf-core/rnaseq] Please check MultiQC report: 6/6 samples failed strandedness check.-
Completed at: 21-Apr-2023 03:58:56
Duration    : 14m 18s
CPU hours   : 0.4
Succeeded   : 170
```

The pipeline ran successfully, however note the warning about all samples having failed the strandedness check. We'll explore that in the next lesson. In the meantime, list (`ls -la`) the contents of your directory, you'll see a few new directories (and a hidden directory and log file) have been created:

```default
total 416
drwxrwxr-x   7 ubuntu ubuntu 4.0K Apr 21 03:44 .
drwxr-x---  15 ubuntu ubuntu 4.0K Apr 21 01:56 ..
drwxrwxr-x   4 ubuntu ubuntu 4.0K Apr 21 03:58 .nextflow
-rw-rw-r--   1 ubuntu ubuntu 371K Apr 21 03:58 .nextflow.log
-rw-rw-r--   1 ubuntu ubuntu  17K Apr 21 03:50 .nextflow.log.1
drwxrwxr-x   7 ubuntu ubuntu 4.0K Apr 21 03:58 Lesson-2.1
drwxrwxr-x   4 ubuntu ubuntu 4.0K Apr 21 02:08 nf-core-rnaseq-3.11.1
-rw-rw-r--   1 ubuntu ubuntu  563 Apr 21 03:14 samplesheet.csv
drwxrwxr-x 143 ubuntu ubuntu 4.0K Apr 21 03:58 work
```

Nextflow has created 2 new output directories, **work** and **Lesson-2.1** in the current directory. 

#### The `work` directory

As each job is run, a unique sub-directory is created in the `work` directory. These directories house temporary files and various command logs created by a process. We can find all information regarding this process that we need to troubleshoot a failed process. 

#### The `Lesson-2.1` directory

All final outputs will be presented in a directory specified by the `--outdir` flag. 

#### The `.nextflow` directory

This directory contains a `cache` subdirectory to store cached data such as downloaded files and can be used to speed up subsequent pipeline runs. It also contains a `history` file which contains a record of pipeline executions including run time, the unique run name, and command line arguments used. 

#### The `.nextflow.log` file

This file is created by Nextflow during the execution of a pipeline and contains information about all processes and any warnings or errors that occurred during execution. 

::: {.callout-note}
### **Key points**
- nf-core pipelines are provided with sensible defaults. You can adjust some settings as required by applying flags to your run command.
- nf-core pipelines are all built from a template that means they have a standard structure to their code bases  
:::

