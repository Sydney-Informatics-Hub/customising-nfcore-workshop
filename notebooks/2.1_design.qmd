---
title: "**Designing your run command**"
output:
  html_document:
    toc: false
    toc_float: false
from: markdown+emoji
---

::: callout-tip
### Objectives{.unlisted}

- Use the nf-core documentation to select appropriate parameters for a run command 
- Write and run a nf-core rnaseq command on the command line 
- Explore pipeline deployment and set up 
:::

### **Introducing the case study**

We are working with a subset dataset from a knockout mouse model study by [Corley et al. (2016)](https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-016-2801-4). The authors used the mouse model to simulate the role of a specific gene (*Gtf2ird1*) in Williams-Beuren Syndrome (WBS), a rare genetic disease in people. Today, we are performing the pre-processing steps to generate a set of files that can be analysed downstream. In deciding whether or not the nf-core/rnaseq pipeline was suitable for reproducing the results presented in this study, we considered a number of factors, including: 

|**Consideration**      |**Questions to ask of our experiment**                             |**Why**                                                                       |
|-----------------------|-------------------------------------------------------------------|------------------------------------------------------------------------------|
|**Size of dataset**        |Number of samples and data volume                                  |Scale of data impacts computational efficiency of the pipeline                |
|**Input data**             |Type of RNA sequenced, availability of reference files             |Determines if we meet input requirements of pipeline                          |
|**Research questions**     |Suitability of pipeline outputs                                    |Need the right processed data for downstream analysis                         |
|**Computational resources**|CPU, memory, RAM available and minimum requirements of the pipeline|Determines if we have enough resources to run the pipeline                     |
|**Tool preferences**       |Suitability of each tool, required inputs and outputs              |pipeline offers multiple tools for some steps, determines which choices we make|

We consulted the [nf-core/rnaseq documentation](https://nf-co.re/rnaseq) to confirm that nf-core/rnaseq is a suitable pipeline for our application. We have sketched out our experimental design, those considerations, and our choices below. 

![](../figs/2.1_RNAseq_experiment.png)

### **Download the pipeline code**

Start by creating a new directory for all of today's activities and move into it: 

```bash
mkdir ~/session2 && cd $_
```

We recommend that you keep a local copy of a pipeline's code for the sake of reproducibility and record keeping. There are a number of ways to download a nf-core pipeline to your machine. We recommend using either the [nf-core tools](https://nf-co.re/tools/) utility to [download a pipeline for offline use](https://nf-co.re/tools/#downloading-pipelines-for-offline-use) or git. Today, we will download most recent version (3.11.1) of the pipeline using the nf-core tools utility, like we did in Session 1. 

Take a look at the download options available to us: 

```default
nf-core download --help
```

![](../figs/2.1_nfcore-download.png)

By default the most recent version of a pipeline will be downloaded. We're going to use the `--revision/-r` flag to specify the pipeline version, the `--outdir/-o` flag to download the pipeline to our current working directory and the `--container/-c` flag to download software containers with Singularity. These containers will only be cached (`--singularity-cache-only`) and not copied to our output directory. We do not need to compress the downloaded data as we won't be transferring it elsewhere, so we've used the `--compress/-x` flag to specify this.

Run:
```default
nf-core download rnaseq \
  --revision 3.11.1 \
  --outdir ~/session2/nf-core_rnaseq-3.11.1 \
  --container singularity \
  --compress none \
  --singularity-cache-only
```

You will be prompted to define a Singularity cache directory to store container images (`$NXF_SINGULARITY_CACHEDIR`). Specify the path we used in Session 1:

```default
/home/training/singularity_cache
```

The nf-core tools utility will download the pipeline files and centralised configs but not the containers, given they already exist in our specified cache. 

::: {.callout-caution collapse="true"}
### **Alternate installation method**{.unlisted}
In situations where you might not wish to use the nf-core tools utility, download the nf-core/rnaseq source code from it's [GitHub repository](https://github.com/nf-core/rnaseq) with git. 

Clone the nf-core/rnaseq repository:
```default
git clone https://github.com/nf-core/rnaseq.git
```
> :no_entry: **BEWARE** :no_entry: this method will download a copy of the pipeline with a different directory name and slightly different structure. If you choose to use this method, you will need to adjust some paths specified in the upcoming lessons accordingly. 
::: 

Inside your `nf-core-rnaseq-3.11.1` workflow directory, you should see a 2 subdirectories: 

```default
ls -l nf-core-rnaseq-3.11.1
```

```default
total 8
drwxrwxr-x  7 ubuntu ubuntu 4096 Apr 21 02:08 configs
drwxrwxr-x 12 ubuntu ubuntu 4096 Apr 21 02:08 workflow
```


Remember, as we ran the download command, a number of `INFO` logs were printed to the screen. The **workflow files from GitHub** were downloaded to the `workflow` directory and the **centralised configs from GitHub** were downloaded to the `configs` directory: 

![](../figs/2.1_nfcore-info.png)

For most of this session we will only be working with the `workflow` directory:

```default
ls -l nf-core-rnaseq-3.11.1/workflow
```

```default
total 216
-rwxrwxr-x 1 ubuntu ubuntu 58889 Apr 21 02:08 CHANGELOG.md
-rwxrwxr-x 1 ubuntu ubuntu  9681 Apr 21 02:08 CITATIONS.md
-rwxrwxr-x 1 ubuntu ubuntu  9078 Apr 21 02:08 CODE_OF_CONDUCT.md
-rwxrwxr-x 1 ubuntu ubuntu  1096 Apr 21 02:08 LICENSE
-rwxrwxr-x 1 ubuntu ubuntu 10002 Apr 21 02:08 README.md
drwxrwxr-x 3 ubuntu ubuntu  4096 Apr 21 02:08 assets
drwxrwxr-x 2 ubuntu ubuntu  4096 Apr 21 02:08 bin
drwxrwxr-x 2 ubuntu ubuntu  4096 Apr 21 02:08 conf
drwxrwxr-x 3 ubuntu ubuntu  4096 Apr 21 02:08 docs
drwxrwxr-x 2 ubuntu ubuntu  4096 Apr 21 02:08 lib
-rwxrwxr-x 1 ubuntu ubuntu  2736 Apr 21 02:08 main.nf
drwxrwxr-x 4 ubuntu ubuntu  4096 Apr 21 02:08 modules
-rwxrwxr-x 1 ubuntu ubuntu 13970 Apr 21 02:08 modules.json
-rwxrwxr-x 1 ubuntu ubuntu 10847 Apr 21 02:08 nextflow.config
-rwxrwxr-x 1 ubuntu ubuntu 42576 Apr 21 02:08 nextflow_schema.json
-rwxrwxr-x 1 ubuntu ubuntu   359 Apr 21 02:08 pyproject.toml
drwxrwxr-x 4 ubuntu ubuntu  4096 Apr 21 02:08 subworkflows
-rwxrwxr-x 1 ubuntu ubuntu  1684 Apr 21 02:08 tower.yml
drwxrwxr-x 2 ubuntu ubuntu  4096 Apr 21 02:08 workflows
```

We explored the standard nf-core workflow directory structure in Session 1. The most important files and directories for this session are:

|Feature                |Importance                                                         |
|-----------------------|-------------------------------------------------------------------|
|`conf/`                |Contains standard configuration files for various profiles that build on global settings set by `nextflow.config`|
|`main.nf`              |The executable Nextflow script that defines the structure and flow of the workflow. It calls `workflows/rnaseq.nf`|
|`modules/`             |Contains Nextflow processes used by the workflow. They are called by the `main.nf` file|
|`workflows/rnaseq.nf`  |All the modules, subworkflows, channels, workflow structure for running the rnaseq pipeline |


### **Build your run command**

All nf-core pipelines are provided with sensible default settings that have broad applicability and [comprensive documentation that explains all available parameters](https://nf-co.re/rnaseq/3.11.1/parameters). On the command line you can view these options by running:

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf --help
```

Notice at the bottom of the print out, there is:

```default
!! Hiding 24 params, use --show_hidden_params to show them !!
```

Three additional parameter sections are hidden from view. This is because they are less commonly used. To view all the pipeline run options on the command line, run:
```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf --help --show_hidden_params
```

::: {.callout-warning}
### **Hyphens matter!**
Hyphens matter when it comes to parameter flags in nf-core pipelines! Nextflow command-line parameters use one (`-`), whereas pipeline-specific parameters use two (`--`). For example: `-profile` is a **Nextflow** parameter, while `--input` is an **nf-core** parameter.
:::

We need to customise the default run command for our purposes, given the following considerations based on our experiment plan, above: 

* We **don't** need to run the pseudo alignment step (Stage 3)
* We have chosen to use **STAR** to align reads 
* We have chosen to use **Salmon** to estimate transcript abundance
* We only have access to **2 CPUs and 8Gb** of RAM today 
* We have **provided the requisite reference data** (fasta, gtf, STAR index) for our training dataset 

::: callout-tip
### **Challenge**{.unlisted}

Can you use the [nf-core/rnaseq parameters documentation](https://nf-co.re/rnaseq/3.11.1/parameters) (or the `--help` flag) and the important considerations above to identify flags we will need to apply to our first workflow run? Don't worry about the files required for these flags just yet. 

:bulb: HINT: You will need to look at the [reference genome](https://nf-co.re/rnaseq/3.11.1/parameters#reference-genome-options), [alignment](https://nf-co.re/rnaseq/3.11.1/parameters#alignment-options), and [max job request](https://nf-co.re/rnaseq/3.11.1/parameters#max-job-request-options) sections. 
:::

::: {.callout-caution collapse="true"}
### Solution

Given we are using STAR and Salmon as our aligner and quantification tool of choice (respectively) and it is the default choice of this pipeline we will not need to provide an `--aligner` flag. However, if you wanted to provide this for the sake of reproducibility in case things change in the future: 
```default
--aligner 'star_salmon'
```

Given we are providing our own subset data for this workshop, we will need to use:
```default
--fasta /path/to/mouse.fa  
--gtf /path/to/mouse.gtf 
--star_index /path/to/STAR
```

Given we have limited computing resources today, we will need to specify a ceiling for both memory and CPUs:
```default
--max_memory '6.GB' 
--max_cpus 2 
```
:::

For the sake of expediency, we are using prepared subset data for this session. All the data (including fastqs, input manifest, reference fasta, gtf, and STAR indexes) are already available on an external file system called CernVM-FS that is mounted on Nimbus. Take a look at the files: 

```default
ls /path/to/aarnet-cvmfs/training/workshopMaterials
```

```default
-rwxr-xr-x 1 ubuntu ubuntu 3566569 Sep 26  2022 mm10_reference/
-rwxr-xr-x 1 ubuntu ubuntu 3566569 Sep 26  2022 SRR3473984_selected.fastq.gz
-rwxr-xr-x 1 ubuntu ubuntu 3208125 Sep 26  2022 SRR3473985_selected.fastq.gz
-rwxr-xr-x 1 ubuntu ubuntu 3170753 Sep 26  2022 SRR3473986_selected.fastq.gz
-rwxr-xr-x 1 ubuntu ubuntu 3488119 Sep 26  2022 SRR3473987_selected.fastq.gz
-rwxr-xr-x 1 ubuntu ubuntu 4370755 Sep 26  2022 SRR3473988_selected.fastq.gz
-rwxr-xr-x 1 ubuntu ubuntu 3094352 Sep 26  2022 SRR3473989_selected.fastq.gz
```

A [sample sheet](https://nf-co.re/rnaseq/3.11.1/usage#samplesheet-input) is a standard input rquirement for nf-core pipelines, including nf-core/rnaseq. This sheet specifies input files, sample name, and sometimes other metadata for each sample being processed. 

::: callout-tip
### **Challenge**{.unlisted}

Now that we have the path to our raw sequence files, create the input sample sheet following the nf-core/rnaseq [documentation](https://nf-co.re/rnaseq/3.11.1/usage#samplesheet-input). Your input file will need to be comma-delimited and have the following columns:

1. sample: custom sample name (use the SRR IDs)
2. fastq1: full path to read 1 fastq.gz file
3. fastq2: full path to read 2 fastq.gz file
4. strandedness: for this lesson, all should be labelled as forward
:::

::: {.callout-caution collapse="true"}
### Solution

Save this file as `samplesheet.csv`:

```default
sample,fastq_1,fastq_2,strandedness
SRR3473989,/home/ubuntu/session2/materials/fastqs/SRR3473989_selected.fastq.gz,,forward
SRR3473988,/home/ubuntu/session2/materials/fastqs/SRR3473988_selected.fastq.gz,,forward
SRR3473987,/home/ubuntu/session2/materials/fastqs/SRR3473987_selected.fastq.gz,,forward
SRR3473985,/home/ubuntu/session2/materials/fastqs/SRR3473985_selected.fastq.gz,,forward
SRR3473986,/home/ubuntu/session2/materials/fastqs/SRR3473986_selected.fastq.gz,,forward
SRR3473984,/home/ubuntu/session2/materials/fastqs/SRR3473984_selected.fastq.gz,,forward
```
::: 

### **Run the pipeline**

We need to store the path to our input and reference data in a variable for our run command:

```default
materials=/home/ubuntu/session2/materials
```

Given we already downloaded the containers, we will point the pipeline to where it can find them so it doesn't waste time trying to download them all over again. We can do this by setting the [`NXF_SINGULARITY_CACHEDIR`](https://www.nextflow.io/docs/latest/singularity.html#singularity-docker-hub) environmental variable: 

```default
export NXF_SINGULARITY_CACHEDIR=/home/ubuntu/singularity_cache/
```
::: {.callout-tip}

### Nextflow has environmental variables!

Environmental variables are used to store information that can be accessed by different programs and scripts running on the system. Nextflow has a number of [environmental variables](https://www.nextflow.io/docs/latest/config.html#environment-variables) that can be used to override default Nextflow and pipeline behaviours. You can set them on the command line or by using [env scopes](https://www.nextflow.io/docs/latest/config.html#scope-env) when writing Nextflow.
:::

Now run the pipeline, with the necessary flags and the `samplesheet.csv` file you just created: 

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
    --input samplesheet.csv \
    -profile singularity \
    --fasta $materials/mm10_reference/mm10_chr18.fa \
    --gtf $materials/mm10_reference/mm10_chr18.gtf \
    --star_index $materials/mm10_reference/STAR \
    --max_memory '6.GB' \
    --max_cpus 2 \
    --outdir Lesson-1
```

::: {.callout-important}
## :shrug: Zoom check-in! :shrug:

Is everyone ok? 

Yes, move on :clap: `:clap:`   
No, help! :cry: `:cry:` 
:::

### **Examine the outputs**

Once your pipeline has completed, you should see this message printed to your terminal:

```default
-[nf-core/rnaseq] Pipeline completed successfully with skipped sampl(es)-
-[nf-core/rnaseq] Please check MultiQC report: 6/6 samples failed strandedness check.-
Completed at: 21-Apr-2023 03:58:56
Duration    : 13m 59s
CPU hours   : 0.4
Succeeded   : 200
```

The pipeline ran successfully, however note the warning about all samples having failed the strandedness check. We'll explore that in the next lesson. In the meantime, list (`ls -la`) the contents of your directory, you'll see a few new directories (and a hidden directory and log file) have been created:
```default
total 416
drwxrwxr-x   7 ubuntu ubuntu 4.0K Apr 21 03:44 .
drwxr-x---  15 ubuntu ubuntu 4.0K Apr 21 01:56 ..
drwxrwxr-x   4 ubuntu ubuntu 4.0K Apr 21 03:58 .nextflow
-rw-rw-r--   1 ubuntu ubuntu 371K Apr 21 03:58 .nextflow.log
drwxrwxr-x   7 ubuntu ubuntu 4.0K Apr 21 03:58 Lesson-1
drwxrwxr-x   4 ubuntu ubuntu 4.0K Apr 21 02:08 nf-core-rnaseq-3.11.1
-rw-rw-r--   1 ubuntu ubuntu  563 Apr 21 03:14 samplesheet.csv
drwxrwxr-x 143 ubuntu ubuntu 4.0K Apr 21 03:58 work
```

Nextflow has created 2 new output directories, **work** and **Lesson-1** in the current directory. 

#### The `work` directory

As each job is run, a unique sub-directory is created in the `work` directory. These directories house temporary files and various command logs created by a process. We can find all information regarding this process that we need to troubleshoot a failed process. 

#### The `Lesson-1` directory

All final outputs will be presented in a directory specified by the `--outdir` flag. 

#### The `.nextflow` directory

This directory contains a `cache` subdirectory to store cached data such as downloaded files and can be used to speed up subsequent pipeline runs. It also contains a `history` file which contains a record of pipeline executions including run time, the unique run name, and command line arguments used. 

#### The `.nextflow.log` file

This file is created by Nextflow during the execution of a pipeline and contains information about all processes and any warnings or errors that occurred during execution. 

::: {.callout-note}
### **Key points**
- nf-core pipelines are provided with sensible defaults. You can adjust some settings as required by applying flags to your run command.
- nf-core pipelines are all built from a template that means they have a standard structure to their code bases  
:::

