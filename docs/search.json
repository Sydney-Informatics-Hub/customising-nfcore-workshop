[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible workflows with nf-core",
    "section": "",
    "text": "This course is currently under development\nThis workshop will set you up with the foundational knowledge required to run and customise nf-core workflows in a reproducible manner. Using the nf-core/rnaseq workflow as an example, we will step through essential features common across all nf-core workflows. We will explore ways to adjust the workflow parameters based on the needs of your dataset and configuration the workflow to run on your computational environment.\n\nTrainers\n\nCali Willet, Sydney Informatics Hub\nChris Hakkaart, Seqera Labs\nGeorgie Samaha, Sydney Informatics Hub\n\n\n\nTarget audience\nThis workshop is suitable for people who are familiar with working at the command line interface and have some experience running Nextflow and nf-core workflows.\n\n\nPrerequisites\n\nExperience navigating the Unix command line\nFamiliarity with Nextflow and nf-core workflows\n\n\n\nSet up requirements\nPlease complete the Setup Instructions before the course.\nIf you have any trouble, please get in contact with us ASAP.\n\n\nCode of Conduct\nIn order to foster a positive and professional learning environment we encourage the following kinds of behaviours at all our events and on our platforms:\n\nUse welcoming and inclusive language\nBe respectful of different viewpoints and experiences\nGracefully accept constructive criticism\nFocus on what is best for the community\nShow courtesy and respect towards other community members\n\nOur full CoC, with incident reporting guidelines, is available here.\n\n\nWorkshop schedule\n\n\n\nLesson\nOverview\n\n\n\n\nSet up your computer\nFollow these instructions to install VSCode and login to your Nimbus instance.\n\n\nDay 1: Introduction to nf-core\n\n\n\nDay 2: Customising nf-core\n\n\n\n\n\n\nCourse survey\nPlease fill out our course survey before you leave. Help us help you! üòÅ\n\n\nCredits and acknowledgements\nThis workshop event and accompanying materials were developed by the Sydney Informatics Hub, University of Sydney in partnership with Seqera Labs, Pawsey Supercomputing Research Centre, and Australia‚Äôs National Research Education Network (AARNet) enabled through the Australian BioCommons (NCRIS via Bioplatforms Australia).\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "tips_tricks.html",
    "href": "tips_tricks.html",
    "title": "Some tips and tricks",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Set up your computer",
    "section": "",
    "text": "Questions\n\nHow do I install a terminal or IDE application on my computer?\nHow do I log in to a Nimbus instance?\n\n\nIn this workshop series, we will be using Pawsey‚Äôs Nimbus cloud. The Pawsey Supercomputing Research Centre is one of two, Tier-1, High Performance Computing facilities in Australia. Their Nimbus cloud platform is an accessible and flexible solution for bioinformatics applications that may not be suitable for large-scale HPC machines including:\n\nDeveloping and refining scalable workflows in prepration for HPC allocation applications.\nWorkflows with long runtimes that excede wall time queue limits on HPC facilities.\nComplex data-bound workflows with variable compute resource profiles that are common in bioinformatics pipelines.\n\nThe main requirements for this workshop are a personal computer with:\n\nA web broswer\nTerminal or IDE application\n\nOn this page you will find instructions on how to set up a terminal application and web browser on your computer and how to connect to Nimbus. Each participant will be provided with their instance‚Äôs IP address at the beginning of the workshop.\nTo connect to your Nimbus instance, you will need either a terminal or integrated development environment (IDE) application installed on your computer. While we recommend you use the Visual Studio Code IDE for this workshop, we have also provided directions for installing and using a terminal applications below.\n\nInstall and set up Visual Studio Code\nVisual Studio Code is a lightweight and powerful source code editor available for Windows, macOS and Linux computers.\n\nDownload Visual Studio Code for your system from here and follow the instructions for:\n\nmacOS\nLinux\nWindows\n\nOpen the VS Code application on your computer\n\n\n\nClick on the extensions button (four blocks) on the left side bar and install the remote SSH extension. Click on the blue install button.\n\n\n\nLogin via Visual Studio Code\n\nConnect to your instance with VS code by adding the host details to your ssh config file.\n\nCtrl+Shift+P to open command palette\nSelect Remote-SSH: Open SSH configuraiton file\nAdd new entry, filling out host name and identity file:\n\nHost nfcoreWorkshop\n  HostName 146.118.XX.XXX  \n  User training     \nConnect to this address\n\nCtrl+Shift+P to open command palette\nSelect Remote-SSH: Connect to Host and select name of your host\nSelect Linux from dropdown menu and then continue\n\n\n\n\n\nInstall and set up a terminal application\nThe terminal applications available to you will depend on your operating system.\n\nLinux terminals\nIf you use Linux, chances are you already know your shell and how to use it. Basically, just open your preferred terminal program and off you go!\n\n\nOS X (Mac)\nMac operating systems come with a terminal program, called Terminal. Just look for it in your Applications folder, or hit Command + Space and type ‚Äòterminal‚Äô. You may find that other, 3rd party terminal programs are more user-friendly and powerful, like Iterm2.\n\n\nWindows\nWe recommend MobaXterm, which offers a rich experience as a full-featured X-server and terminal emulator for ssh connections, the free version is more than adequate.\nTo install and start using MobaXterm:\n\nGo to https://mobaxterm.mobatek.net/download.html\nUnder ‚ÄòHome Edition‚Äô select the Download now button\nSelect the MobaXterm Home Edition (Installer edition)\nOnce the program is downloaded, install it as you would any other windows program\nOnce the program is installed, start the MobaXterm program\nFrom this screen, click on ‚Äòstart local terminal‚Äô (and install Cygwin if prompted)\n\n\n\n\nLogin via Terminal\nTo log in to Nimbus, we will use a Secure Shell (SSH) connection. To connect, you need 3 things: 1. The assigned IP address of your instance (i.e.¬†###.###.##.###). Each participant will be provided with their instance‚Äôs IP address at the beginning of the workshop. 2. Your login name. In our case, this will be training for all participants. 3. Your password. All participants will be provided with a password at the beginning of the workshop.\nTo log in, type the following into your terminal, using your login name and the instance‚Äôs IP address:\nssh training@###.###.###.###\nYou will receive a message saying:\nThe authenticity of host 'XXX.XXX.XX.XXX (XXX.XXX.XX.XXX)' can't be established.\nRemember your host address will be different than the one above. There will then be a message saying:\nAre you sure you want to continue connecting (yes/no)?\nIf you would like to skip this message next time you log in, answer ‚Äòyes‚Äô. It will then give a warning:\nWarning: Permanently added 'XXX.XXX.XX.XXX' (ECDSA) to the list of known hosts.\nEnter the password provided at the beginning of the workshop. Ask one of the demonstrators if you‚Äôve forgotten it.\n\n\n\n\n\n\nPay Attention\n\n\n\nWhen you type a password on the terminal, there will not be any indication the password is being entered. You‚Äôll not see a moving cursor, or even any asterisks, or bullets. That is an intentional security mechanism used by all terminal applications and can trip us up sometimes, so be careful when typing or copying your password in.\n\n\nHaving successfully logged in, your terminal should then display something like that shown in the figure below:\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/1.0_intro.html",
    "href": "notebooks/1.0_intro.html",
    "title": "Welcome to session 1",
    "section": "",
    "text": "In this session we will be‚Ä¶\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/2.6_troubleshoot.html",
    "href": "notebooks/2.6_troubleshoot.html",
    "title": "Troubleshooting issues and errors",
    "section": "",
    "text": "Objectives\n\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/2.1_design.html",
    "href": "notebooks/2.1_design.html",
    "title": "Designing your run command",
    "section": "",
    "text": "Objectives\n\n\n\n\nUse the nf-core documentation to select appropriate parameters for a run command\nWrite and run a nf-core rnaseq command on the command line\nExplore workflow deployment and set up\n\n\n\n\nDownload the workflow code\nIt can be very easy to lose track while working on the command line, especially when we‚Äôre working with large datasets and complex commands as we do with bioinformatics workflows. To make sure we work reproducibly, we will be organising our workspace and using a local copy of the nf-core/rnaseq workflow for all exercises.\nStart by creating a new directory for all of today‚Äôs activities and move into it:\nmkdir ~/nfcore-workshop/session2 && cd $_\nThere are a number of ways to download a nf-core workflow to your machine. We recommend using git or the nf-core tools utility. Today, we will download most recent version of the workflow from it‚Äôs GitHub repository with git.\nClone the nf-core/rnaseq repository:\ngit clone https://github.com/nf-core/rnaseq.git\nCheck the workflow has been downloaded:\nls -l rnaseq\nInside your nf-core-rnaseq workflow directory, you should see a number of files and subdirectories:\ntotal 216\n-rw-rw-r-- 1 ubuntu ubuntu 58889 Apr  4 03:40 CHANGELOG.md\n-rw-rw-r-- 1 ubuntu ubuntu  9681 Apr  4 03:40 CITATIONS.md\n-rw-rw-r-- 1 ubuntu ubuntu  9078 Apr  4 03:40 CODE_OF_CONDUCT.md\n-rw-rw-r-- 1 ubuntu ubuntu  1096 Apr  4 03:40 LICENSE\n-rw-rw-r-- 1 ubuntu ubuntu 10002 Apr  4 03:40 README.md\ndrwxrwxr-x 3 ubuntu ubuntu  4096 Apr  4 03:40 assets\ndrwxrwxr-x 2 ubuntu ubuntu  4096 Apr  4 03:40 bin\ndrwxrwxr-x 2 ubuntu ubuntu  4096 Apr  4 03:40 conf\ndrwxrwxr-x 3 ubuntu ubuntu  4096 Apr  4 03:40 docs\ndrwxrwxr-x 2 ubuntu ubuntu  4096 Apr  4 03:40 lib\n-rwxrwxr-x 1 ubuntu ubuntu  2736 Apr  4 03:40 main.nf\ndrwxrwxr-x 4 ubuntu ubuntu  4096 Apr  4 03:40 modules\n-rw-rw-r-- 1 ubuntu ubuntu 13970 Apr  4 03:40 modules.json\n-rw-rw-r-- 1 ubuntu ubuntu 10903 Apr  4 03:40 nextflow.config\n-rw-rw-r-- 1 ubuntu ubuntu 42576 Apr  4 03:40 nextflow_schema.json\n-rw-rw-r-- 1 ubuntu ubuntu   359 Apr  4 03:40 pyproject.toml\ndrwxrwxr-x 4 ubuntu ubuntu  4096 Apr  4 03:40 subworkflows\n-rw-rw-r-- 1 ubuntu ubuntu  1684 Apr  4 03:40 tower.yml\ndrwxrwxr-x 2 ubuntu ubuntu  4096 Apr  4 03:40 workflows\nThis may look very different to other Nextflow workflows you may have run or written before. The most important files and directories for us to understand, are:\n\n\n\n\n\n\n\nFeature\nImportance\n\n\n\n\nconf/\nContains standard configuration files for various profiles that build on global settings set by nextflow.config\n\n\nmain.nf\nThe executable Nextflow script that defines the structure and flow of the workflow. It calls workflows/rnaseq.nf\n\n\nmodules/\nContains Nextflow processes used by the workflow. They are called by the main.nf file\n\n\nworkflows/rnaseq.nf\nAll the modules, subworkflows, channels, workflow structure for running the rnaseq workflow\n\n\n\n\n\n\n\n\n\nAlternate installation method\n\n\n\n\n\nUsing the nf-core tools utility, search for the rnaseq pipeline:\nnf-core list rnaseq\nThen, download the correct pipeline:\nnf-core download nf-core/rnaseq\nYou will be prompted to select a version. Use your arrow keys to specify 3.10.1 and hit enter.\n\n‚õî BEWARE ‚õî this method will download a copy of the workflow with a different directory name and slightly different structure. If you choose to use this method, you will need to adjust commands in the upcoming lessons accordingly.\n\n\n\n\n\n\nBuild your run command\nAll nf-core workflows are provided with sensible default settings that have broad applicability and comprensive documentation that explains all available parameters. What is ‚Äòsensible‚Äô varies dramatically between different experiments, computing environments, and datasets, so these settings might not suit your needs. Having asked ourselves those questions earlier, consider the most important design choices we have made for this workflow and structuring our run command:\n\nWe don‚Äôt need to run the pseudo alignment step (Stage 3)\nWe have chosen to use STAR to align reads\nWe have chosen to use Salmon to estimate transcript abundance\nWe only have access to 2 CPUs and 8Gb of RAM today\nWe are working with our own subset data today (including reference data)\n\n\nFor the sake of expediency, we are using prepared subset data for this session. All the data (including fastqs, input manifest, reference fasta, gtf, and STAR indexes) are available on an external file system called CernVM-FS. CernVM-FS is a read-only file system that Pawsey have used to store files such as containerised tools (Biocontainers), reference datasets, and other shared resources that are commonly used by many researchers. Take a look here for more information on bioinformatics resources provided by Pawsey on Nimbus.\nTake a quick look at the workshop data we‚Äôre working with today:\nls /path/to/aarnet-cvmfs/training/workshopMaterials\nWe need to store this path in a variable for our run command:\nmaterials=/path/to/aarnet-cvmfs/training/workshopMaterials\n\n\n\n\n\n\nChallenge\n\n\n\nUsing the nf-core/rnaseq documentation and the important considerations above, can you decide which flags you may need to add to this command for this experiment?\nnextflow run rnaseq/main.nf \\\n  --input &lt;samples.tsv&gt; \\\n  -profile singularity \\\n  -with-report execution_report_exercise2_1.html \\\n  -with-trace execution_trace_exercise2_1.txt \\\n  -with-timeline timeline_exercise2_1.html \\\n  -with-dag dag_exercise2_1.png\nüí° You will need to look at the reference genome, alignment, and max job request sections.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nGiven we are using STAR and Salmon as our aligner and quantification tool of choice (respectively) and it is the default choice of this workflow we will not need to provide an --aligner flag. However, if you wanted to provide this for the sake of reproducibility in case things change in the future:\n--aligner 'star_salmon'\nGiven we are providing our own subset data for this workshop, we will need to use:\n--fasta /path/to/mouse.fa  \n--gtf /path/to/mouse.gtf \n--star_index /path/to/STAR\nGiven we have limited computing resources today, we will need to specify a ceiling for both memory and CPUs:\n--max_memory '6.GB' \n--max_cpus 2 \n\n\n\n\n\nRun the workflow\nNow run the workflow:\nnextflow run rnaseq/main.nf \\\n  --input $materials/samples.tsv \\\n  -profile singularity \\\n  --fasta $materials/mm10_chr18.fa \\\n  --gtf $materials/mm10_chr18.gtf \\\n  --star_index $materials/STAR \\\n  --max_memory '6 GB' --max_cpus 2 \\\n  --outdir ex1_results \\\n  -with-report execution_report_exercise2_1.html \\\n  -with-trace execution_trace_exercise2_1.txt \\\n  -with-timeline timeline_exercise2_1.html \\\n  -with-dag dag_exercise2_1.png\n\n\n\n\n\n\nZoom reaction check in!\n\n\n\nIs everyone ok? Is your workflow running?\nüëè (clap) yes, let‚Äôs move on.\nüò¢ (cry) no, please help.\n\n\n\n\nExplore the workflow code\nWhile the workflow runs (~15 mins), let‚Äôs take a closer look at the rnaseq/workflows/rnaseq.nf file to see where our flags are influencing the workflow structure. Open a new terminal window so we don‚Äôt disturb our running workflow, navigate back to ~/nfcore-workshop/session2, then open the rnaseq/workflows/rnaseq.nf file. If you‚Äôre working on the command-line rather than VScode, run:\ncat rnaseq/workflows/rnaseq.nf\nThis file is huge and has a lot going on. TODO tie this in with Session 1 content.\nExtract the headers:\nsed -n '/\\/\\*/,/\\*\\//p' rnaseq/workflows/rnaseq.nf\nWe‚Äôve got 7 main section:\n\nValidate inputs\nConfig files\nImport local modules/subworkflows\nImport nf-core modules/subworkflows\nRun main workflow\nCompletion email and summary\nThe end\n\n\nValidate inputs\nHere, the developers have set some rules around defining valid input parameters and structuring the workflow to accommodate specified parameters before the workflow is run.\n\n\nConfig files\nThis is just some channels for creating the MultiQC reports, nothing important.\n\n\nImport local modules/subworkflows\n\n\nImport nf-core modules/subworkflows\n\n\nRun main workflow\n\n\nCompletion email and summary\n\n\nThe end\n\n\n\nKey points\n\nnf-core workflows are provided with sensible defaults. You can adjust some settings as required by applying flags to your run command.\nnf-core workflows are all built from a template that means they have a standard structure to their code bases\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/1.1_nextflow.html",
    "href": "notebooks/1.1_nextflow.html",
    "title": "Introduction to Nextflow",
    "section": "",
    "text": "Nextflow is a workflow orchestration engine and domain-specific language (DSL) that makes it easy to write data-intensive computational workflows.\nIt is designed around the idea that the Linux platform is the lingua franca of data science. Linux provides many simple but powerful command-line and scripting tools that, when chained together, facilitate complex data manipulations.\nNextflow extends this approach, adding the ability to define complex program interactions and a high-level parallel computational environment, based on the dataflow programming model.\nNextflow‚Äôs core features are:\n\nWorkflow portability and reproducibility\nScalability of parallelization and deployment\nIntegration of existing tools, systems, and industry standards\n\nWhether you are working with genomics data or other large and complex data sets, Nextflow can help you to streamline your workflow and improve your productivity.\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/1.1_nextflow.html#installing-nextflow",
    "href": "notebooks/1.1_nextflow.html#installing-nextflow",
    "title": "Introduction to Nextflow",
    "section": "Installing Nextflow",
    "text": "Installing Nextflow\nNextflow is distributed as a self-installing package and does not require any special installation procedure. If you do not already have Nextflow available, it can be installed using a few easy steps:\n\nDownload the executable package using either wget -qO- https://get.nextflow.io | bash or curl -s https://get.nextflow.io | bash\nMake the binary executable on your system by running chmod +x nextflow.\nMove the nextflow file to a directory accessible by your $PATH variable, e.g, mv nextflow ~/bin/"
  },
  {
    "objectID": "notebooks/1.1_nextflow.html#nextflow-options-and-commands",
    "href": "notebooks/1.1_nextflow.html#nextflow-options-and-commands",
    "title": "Introduction to Nextflow",
    "section": "Nextflow options and commands",
    "text": "Nextflow options and commands\nNextflow provides a robust command line interface for the management and execution pipelines. The top-level interface consists of options and commands.\nA list of options and commands can be viewed using the -h option:\nnextflow -h\nOptions for a specific command can also be viewed by appending the help option to a Nextflow command:\nnextflow &lt;command&gt; -h\n\n\n\n\n\n\nChallenge\n\n\n\nFind out which version of Nextflow you are using using a Nextflow option.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe version of Nextflow you are using can be printed using the -v option:\nnextflow -v"
  },
  {
    "objectID": "notebooks/1.1_nextflow.html#managing-your-environment",
    "href": "notebooks/1.1_nextflow.html#managing-your-environment",
    "title": "Introduction to Nextflow",
    "section": "Managing your environment",
    "text": "Managing your environment\nYou can control the Nextflow runtime and the underlying Java virtual machine using environment variables. These variables can be exported before running a workflow and will be interpreted as environment variable by Nextflow.\nFor most users, Nextflow will work without setting any environment variables. However, for consistency, it is good practice to pin the version of Nextflow you are using when running a workflow using the NXF_VER variable.\nexport NXF_VER=&lt;version number&gt;\nSimilarly, if you are using a shared resource, you may also consider including paths to where software is stored and can be accessed using the NXF_SINGULARITY_CACHEDIR or the NXF_CONDA_CACHEDIR variables:\nexport NXF_CONDA_CACHEDIR=&lt;custom/path/to/conda/cache&gt;\nYou may want to include these in your .bashrc (or alternate) that is loaded when you log in so you don‚Äôt need to export variables every session.\n\n\n\n\n\n\nChallenge\n\n\n\nTry pinning the version of Nextflow to 22.04.5 using the NXF_VER environmental variable and check that it has been applied.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nExport the version using the NXF_VER environmental variable:\nexport NXF_VER=22.04.5\nCheck that the new version has been applied using the -v option:\nnextflow -v\n\n\n\nA complete list of environmental variables can be found here."
  },
  {
    "objectID": "notebooks/1.1_nextflow.html#executing-a-workflow",
    "href": "notebooks/1.1_nextflow.html#executing-a-workflow",
    "title": "Introduction to Nextflow",
    "section": "Executing a workflow",
    "text": "Executing a workflow\nNextflow seamlessly integrates with code repositories such as GitHub. This feature allows you to manage your project code and use public Nextflow workflows quickly, consistently, and transparently.\nThe Nextflow pull command will download a workflow from a hosting platform into your global cache $HOME/.nextflow/assets folder.\nIf you are pulling a project hosted in a remote code repository, you can specify its qualified name or the repository URL. The qualified name is formed by two parts - the owner name and the repository name separated by a / character. For example, if a Nextflow project foo is hosted in a GitHub repository bar at the address http://github.com/foo/bar, it could be pulled using:\nnextflow pull foo/bar\nOr by using the complete URL:\nnextflow pull http://github.com/foo/bar\nAlternatively, the Nextflow clone command can be used to download a workflow into a local directory of your choice:\nnextflow clone foo/bar &lt;your/path&gt;\nThe Nextflow run command is used to initiate the execution of a workflow script.\nnextflow run foo/bar\nWhen you run a workflow, it will look for a local file with the workflow name you‚Äôve specified. If that file does not exist, it will look for a public repository with the same name on GitHub (unless otherwise specified). If it is found, Nextflow will automatically pull the workflow to your global cache and execute it.\n\n\n\n\n\n\nChallenge\n\n\n\nTry running the hello workflow directly from nextflow-io GitHub.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nRun the nextflow-io/hello workflow:\nnextflow run nextflow-io/hello\n\n\n\nA full list of run options can be found here."
  },
  {
    "objectID": "notebooks/1.1_nextflow.html#executing-a-revision",
    "href": "notebooks/1.1_nextflow.html#executing-a-revision",
    "title": "Introduction to Nextflow",
    "section": "Executing a revision",
    "text": "Executing a revision\nWhen a Nextflow workflow is created or updated, a new revision is created. Each revision is identified by a unique number, which can be used to track changes made to the workflow and to ensure that the same version of the workflow is used consistently across different runs.\nThe Nextflow info command can be used to view workflow properties, such as the project name, repository, local path, main script, and revisions. The * indicates which revision of the pipeline you have stickied and will be executed when using the run command.\nnextflow info nextflow-io/hello\nTo use a specific revision, you simply need to add it to the command line with the --revision or -r flag. For example, to run a workflow with revision v1.0, you would use the following command:\nnextflow run &lt;pipeline&gt; -r v1.0\nNextflow provides built-in support for version control using Git, which allows users to easily manage and track changes made to a workflow over time. A revision can be a git branch, tag or commit SHA number.\n\n\n\n\n\n\nChallenge\n\n\n\nTry running hello workflow again using the v1.1 revision tag.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nRun the nextflow-io/hello workflow with the revision flag:\nnextflow run nextflow-io/hello -r v1.1\n\n\n\nIf your local version of a workflow is not the latest you be shown a warning and will be required to use a revision flag when executing the workflow."
  },
  {
    "objectID": "notebooks/1.1_nextflow.html#listing-and-dropping-workflows",
    "href": "notebooks/1.1_nextflow.html#listing-and-dropping-workflows",
    "title": "Introduction to Nextflow",
    "section": "Listing and dropping workflows",
    "text": "Listing and dropping workflows\nOver time you might want to remove or update your stored workflows. Nextflow also has functionality to help you to view and remove workflows that have been pulled locally.\nThe Nextflow list command prints the projects stored in your global cache $HOME/.nextflow/assets. These are the workflows that were pulled when you executed either of the Nextflow pull or run commands:\nnextflow list\nIf you want to remove a workflow from your cache you can remove it using the Nextflow drop command:\nnextflow drop &lt;workflow&gt;\n\n\n\n\n\n\nChallenge\n\n\n\nSee which workflows you have stored and them with the drop command.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nList your workflow assets:\nnextflow list\nDrop the nextflow-io/hello workflow:\nnextflow drop nextflow-io/hello\nCheck it has been removed:\nnextflow list\n\n\n\n\n\n\n\n\n\nKey points\n\n\n\n\nNextflow is a workflow orchestration engine and domain-specific language (DSL) that makes it easy to write data-intensive computational workflows.\nEnvironment variables can be used to control your Nextflow runtime and the underlying Java virtual machine.\nThe pull, run, and clone commands can be used to download and store Nextflow workflows.\nThe list and drop commands can be used to view and remove local workflows."
  },
  {
    "objectID": "notebooks/1.4_users.html",
    "href": "notebooks/1.4_users.html",
    "title": "nf-core for users",
    "section": "",
    "text": "Commands for users\n\nnf-core list\nThe nf-core list command shows all available nf-core pipelines along with their latest version, when that was published and how recently the pipeline code was pulled to your local system.\nAn example of the output from the command is as follows:\n\n\n\n\nnf-core list\n\n\nTo narrow down the list, supply one or more additional keywords to filter the pipelines based on matches in titles, descriptions and topics:\n\n\n\n\n\n\nChallenge\n\n\n\nTry to find out which workflows are available and if you have any locally:\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nRun the list command to see what workflows are available.\nnf-core list\n\n\n\nThe output shows the latest workflow version number and when that was released. It also tells you if and when a workflow was been pulled locally and whether you have the latest version.\nUnless you are actively developing workflow code, you can use Nextflow‚Äôs built-in functionality to fetch nf-core workflows. You can use the Nextflow pull command to download the latest version of a remote workflow from the nf-core GitHub repository:\nnextflow pull nf-core/&lt;workflow&gt;\nNextflow can also fetch the workflow code when you run it without pulling the workflow beforehand:\nnextflow run nf-core/&lt;workflow&gt;\n\nNextflow will fetch the default git branch if a workflow version is not specified. This will be the master branch for workflows with a stable release.\n\nnf-core workflows use GitHub releases to tag stable versions of the code and software. You will always be able to run a previous version of a workflow once it is released.\n\n\n\n\n\n\nChallenge\n\n\n\nTry to pull the latest version of the nf-core/rnaseq workflow directly from GitHub using Nextflow and check what version you have locally.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse nextflow pull to download the rnaseq workflow from the nf-core GitHub repository.\nnextflow pull nf-core/rnaseq\nUse nf-core list to view what version of the workflow you have locally\nnf-core list\n\n\n\n\n\nnf-core launch\nNextflow workflows can have a considerable number of optional command line flags. To help manage these, you can use the nf-core launch command.\nThe command takes one argument - either the name of an nf-core workflow which will be pulled automatically or the path to a directory containing a Nextflow workflow. For example:\nnf-core launch nf-core/&lt;workflow name&gt;\nWhen running this command, you will first be asked about which version of a workflow you would like to run. Next, you will be given the choice between a web-based graphical interface or an interactive command-line wizard tool to enter the workflow parameters for your run. Both interfaces show documentation alongside each parameter and validate your inputs.\nThe tool uses the nextflow_schema.json file from a workflow to give parameter descriptions, defaults, and grouping. If no file for the workflow is found, one will be automatically generated at runtime.\nNextflow parameter variables are saved into a JSON file called nf-params.json and used by Nextflow with the -params-file flag.\nThe wizard will ask if you want to launch the Nextflow run. You will also be given the run command and a copy of the JSON file for you to copy and paste if you wish.\n\n\nnf-core download\nSometimes you may need to run an nf-core workflow on a server or HPC system that has no internet connection. In this case, you will need to fetch the workflow files and manually transfer them to your system.\nTo make this process easier and ensure accurate retrieval of correctly versioned code and software containers, nf-core has a download helper tool.\nThe nf-core download command will download both the workflow code and the institutional nf-core/configs files. It can also optionally download singularity image file.\nnf-core download\nIf run without any arguments, the download tool will interactively prompt you for the required information. Each prompt option has a flag and if all flags are supplied then it will run without a request for any additional user input.\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/2.4_multiConfig.html",
    "href": "notebooks/2.4_multiConfig.html",
    "title": "Using multiple configuration files at once",
    "section": "",
    "text": "Objectives\n\nUnderstand the heirarchy of configuration files specified by Nextflow\nWrite a custom configuration file for MultiQC in the YAML file format\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/2.2_params.html",
    "href": "notebooks/2.2_params.html",
    "title": "Using a params file",
    "section": "",
    "text": "Objectives\n\n\n\n\nUse the nf-core documentation to select appropriate parameters for a run command\nWrite and run a nf-core rnaseq command on the command line\nExplore workflow deployment and set up\n\n\n\nNow that the workflow is\n\n\n\n\n\n\nChallenge\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nZoom reaction check in!\n\n\n\nIs everyone ok?\n:clap: (clap) yes, let‚Äôs move on.\n:cry: (cry) no, please help.\n\n\n\nRun the workflow\nMake a new working directory for this lesson and move into it:\nmkdir ~/nfcore-workshop/session2/exercise1 && cd $_\nFor the sake of expediency, we are using prepared subset data for this session. All the data (including fastqs, input manifest, reference fasta, gtf, and STAR indexes) are available on the CernVM-FS file system. CernVM-FS is a read-only file system that Pawsey have used to store files such as containerised tools (Biocontainers), reference datasets, and other shared resources that are commonly used by many researchers. Take a look here for more information on bioinformatics resources provided by Pawsey on Nimbus.\nTake a quick look at the workshop data we‚Äôre working with today:\nls /path/to/aarnet-cvmfs/training/workshopMaterials\nWe need to store this path in a variable for our run command:\nmaterials=/path/to/aarnet-cvmfs/training/workshopMaterials\nNow run the workflow:\nnextflow run nf-core-rnaseq-3.10.1/workflow/main.nf \\\n  --input $materials/samples.tsv \\\n  -profile singularity \\\n  --fasta $materials/mm10_chr18.fa \\\n  --gtf $materials/mm10_chr18.gtf \\\n  --star_index $materials/STAR \\\n  --max_memory '6 GB' --max_cpus 2 \\\n  --outdir ex1_results \\\n  -with-report execution_report_exercise2_1.html \\\n  -with-trace execution_trace_exercise2_1.txt \\\n  -with-timeline timeline_exercise2_1.html \\\n  -with-dag dag_exercise2_1.png\n\n\nReproducibility is a state of mind\nWe have to wait for the workflow to run (this should take ~17 mins) before we can get on with the other exercises. While we wait, lets discuss how we manage reproducibility in our own practices, and share some useful resources with one another:\n\n\n\nKey points\n\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/2.3_configEnv.html",
    "href": "notebooks/2.3_configEnv.html",
    "title": "Configuring a run for your environment",
    "section": "",
    "text": "Objectives\n\nUnderstand formatting requirements of a config file\nWrite a custom config file for your local environment that overwrites default workflow settings\nRun a workflow using the custom config file and appropriate Nextflow flag\nUse an alternative container source for a workflow process\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/2.5_extArgs.html",
    "href": "notebooks/2.5_extArgs.html",
    "title": "Specifying external arguments to a process",
    "section": "",
    "text": "Objectives\n\nUnderstand how to use the ext.args feature to pass additional command-line arguments to a process\nImplement additional external arguments to a process that are not hardcoded in the process script\nWrite a custom configuration file for MultiQC in the YAML file format\nObserve the behaviour of Nextflow‚Äôs cache functionality\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/2.0_intro.html",
    "href": "notebooks/2.0_intro.html",
    "title": "Welcome to session 2",
    "section": "",
    "text": "In this session we will be writing, running, adjusting, and re-running the nf-core/rnaseq workflow as we step through various customisation scenarios. While all activities in this session will be performed using the nf-core/rnaseq workflow, all customisation scenarios we explore are applicable to (most) other nf-core workflows and do not require an understanding of rnaseq data processing. Before starting this session, there are a few things you should keep in mind as you proceed through the lessons and apply these techniques to your own research.\nAs with all open source bioinformatics resources, nf-core workflows may not suit all applications. It is important that you understand the needs of your dataset and research questions before deciding on a workflow. All nf-core workflows are provided with sensible default settings that have broad applicability and comprensive documentation that explains all available parameters. What is ‚Äòsensible‚Äô varies dramatically between different experiments, computing environments, and datasets, so these settings might not suit your needs.\n\nIntroducing the case study\nFor the purposes of this session, we are working with a (subset) dataset from a knockout mouse model study by Corley et al.¬†(2016). The authors used the mouse model to simulate the role of a specific gene (Gtf2ird1) in Williams-Beuren Syndrome (WBS), a rare genetic disease in people. Today, we are performing the pre-processing steps in a slightly different way from the authors, to generate a set of files that can be analysed downstream. In deciding whether or not the nf-core/rnaseq workflow was suitable for reproducing the results presented in this study, we considered a number of factors, including:\n\n\n\n\n\n\n\n\nConsideration\nQuestions to ask of our experiment\nWhy\n\n\n\n\nSize of dataset\nNumber of samples and data volume\nScale of data impacts computational efficiency of the workflow\n\n\nInput data\nType of RNA sequenced, availability of reference files\nDetermines if we meet input requirements of workflow\n\n\nResearch questions\nSuitability of workflow outputs\nNeed the right processed data for downstream analysis\n\n\nComputational resources\nCPU, memory, RAM available and minimum requirements of the workflow\nDetermines if I have enough resources to run the workflow\n\n\nTool preferences\nSuitability of each tool, required inputs and outputs\nWorkflow offers multiple tools for some steps, determines which choices I make\n\n\n\nWe consulted the nf-core/rnaseq documentation to confirm that nf-core/rnaseq is a suitable workflow for our application. W‚Äôve sketched out our experimental design, those considerations, and our choices below. We will discuss these further, shortly.\n\n\n\nLog back in to your instance\n\nIn Visual Studio Code\nSame as yesterday, connect to your instance using the command palatte:\n\nCtrl+Shift+P to open command palette\nSelect Remote-SSH: Connect to Host and select name of your host\nSelect Linux from dropdown menu and then continue\n\nHaving successfully logged in, you should see a small green box in the bottom left corner of your screen:\n\n\n\nIn a terminal\nWith a terminal application, run the following on the command-line: default  ssh training@###.###.###.### Enter the password provided at the beginning of the workshop. Ask one of the demonstrators if you‚Äôve forgotten it.\nEnter password:\nHaving successfully logged in, your terminal should then display something like that shown in the figure below:\n\n\n\n\n\n\n\nKey points\n\n\n\n\nnf-core workflows are provided with sensible defaults. These may not always suit your needs.\nTo decide whether an nf-core workflow is the right choice for your experiment you need to understand the needs of your dataset and research questions.\nUse the workflow documentation to understand the requirements for running a workflow.\n\n\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/1.3_configure.html",
    "href": "notebooks/1.3_configure.html",
    "title": "Configuring workflows",
    "section": "",
    "text": "nf-core pipelines follow a set of best practices and standardized conventions. The structure of an nf-core pipeline is designed to be modular, easily customizable, and reproducible. Although you won‚Äôt need to edit the code base to run an nf-core pipeline, having a basic understanding of the repository structure will help you understand how to configure its execution.\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/1.3_configure.html#nextflow.config",
    "href": "notebooks/1.3_configure.html#nextflow.config",
    "title": "Configuring workflows",
    "section": "nextflow.config",
    "text": "nextflow.config\nFor nf-core pipelines, the nextflow.config contains parameter defaults.\nInside the nextflow.config there are also several includeConfig statements that are used to specify additional .config files from the conf/ folder. Each additional .config file contains information that may be important when you run the workflow:\n\nbase.config\n\nLoaded by default.\nGenerous resource allocations using labels.\nDoes not specify any method for software management and expects software to be available (or specified elsewhere).\n\nigenomes.config\n\nLoaded by default.\nDefault configuration to access AWS iGenomes.\n\nmodules.config\n\nLoaded by default.\nModule-specific configuration options (both mandatory or optional).\n\ntest.config\n\nOnly included if specified as a profile.\nA configuration profile to test the pipeline with a small test dataset.\n\ntest_full.config\n\nOnly included if specified as a profile.\nA configuration profile to test the pipeline with a full-size test dataset."
  },
  {
    "objectID": "notebooks/1.3_configure.html#config-profiles",
    "href": "notebooks/1.3_configure.html#config-profiles",
    "title": "Configuring workflows",
    "section": "Config profiles",
    "text": "Config profiles\nConfiguration files can also contain the definition of one or more profiles. A profile is a set of configuration attributes that can be activated when launching a pipeline by using the -profile command option.\nnextflow run nf-core&lt;pipeline&gt; -profile &lt;profile&gt;\nConfiguration profiles are defined by using the special scope profiles which group the attributes that belong to that profile. Typical profiles used by nf-core workflows include:\n\nSoftware management profiles\n\nProfiles for the management of software using software management tools. E.g., docker, singularity, and conda.\n\nTest profiles\n\nProfiles to execute the workflow with a standardized set of test data and parameters.\n\n\nMultiple profiles can be specified in a comma-separated list when you execute your command. The order of profiles is important!\nnextflow run nf-core&lt;pipeline&gt; -profile test,docker\nAdditionally, an includeConfig in the nextflow.config is used to access custom institutional profiles that have been submitted to the nf-core config repository on GitHub. At run time, nf-core pipelines fetch configuration profiles from the remote configs repository and make them available."
  },
  {
    "objectID": "notebooks/0.0_template.html",
    "href": "notebooks/0.0_template.html",
    "title": "Lesson title",
    "section": "",
    "text": "Learning objectives\n\n\n\n\nlearning outcome 1\nlearning outcome 2\n\n\n\nSome intro text to what this lesson is about\n\nSub-section heading\nCommands should be written like this:\ncommand \nWhere relevant include expected standard output:\nstdout here\nAny important notes for attendees should be present in information boxes. For example:\n\n\n\n\n\n\nCopying the code from the grey boxes on training materials\n\n\n\nIn this workshop we need to copy code from the grey boxes in the training materials and run it in the terminal. If you hover your mouse over a grey box on the website, a clipboard icon will appear on the right side. Click on the clipboard logo to copy the code. Test it out with:\nssh training@###.###.###.###\n\n\nChallenges/activites should be provided in challenge boxes:\n\n\n\n\n\n\nChallenge\n\n\n\nQuestion or activity\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSolution explanation and code where relevant\n\n\n\n\nFor other types of callout blocks see here. Any figures should be placed in figs directory and embeddeded like this: \n\n\n\n\n\n\nKey points\n\n\n\n\ntakeaway 1\ntakeaway 2\n\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/1.2_nfcore.html",
    "href": "notebooks/1.2_nfcore.html",
    "title": "Introduction to nf-core",
    "section": "",
    "text": "nf-core is a community effort to collect a curated set of analysis workflows built using Nextflow.\nnf-core provides a standardized set of best practices, guidelines, and templates for building and sharing bioinformatics workflows. These workflows are designed to be modular, scalable, and portable, allowing researchers to easily adapt and run them on their own data and compute resources.\nThe nf-core community comprises a diverse group of bioinformaticians, developers, and researchers from around the world who collaborate on developing and maintaining a growing collection of high-quality workflows. These workflows cover a range of applications, including transcriptomics, proteomics, and metagenomics.\nOne of the key benefits of nf-core is that it promotes open development, testing, and peer review, ensuring that the workflows are robust, well-documented, and validated against real-world datasets. This helps to increase the reliability and reproducibility of bioinformatics analyses and ultimately enables researchers to accelerate their scientific discoveries.\nnf-core is published in Nature Biotechnology! Nat Biotechnol 38, 276‚Äì278 (2020). Nature Biotechnology\n\n\nDocumentation\nnf-core workflows have extensive documentation covering installation, usage, and description of output files to ensure that you won‚Äôt be left in the dark.\n\nCI Testing\n\nEvery time a change is made to the workflow code, nf-core workflows use continuous-integration testing to ensure that nothing has broken.\n\nStable Releases\n\nnf-core workflows use GitHub releases to tag stable versions of the code and software, making workflow runs totally reproducible.\n\nPackaged software\n\nPipeline dependencies are automatically downloaded and handled using Docker, Singularity, Conda, or other software management tools. There is no need for any software installations.\n\nPortable and reproducible\n\nnf-core workflows follow best practices to ensure maximum portability and reproducibility. The large community makes the workflows exceptionally well-tested and easy to run.\n\nCloud-ready\n\nnf-core workflows are tested on AWS after every major release. You can even browse results live on the website and use outputs for your own benchmarking.\n\n\nAll nf-core workflows are open-source and community driven.\n\n\n\nnf-core events are community-driven gatherings that provide a platform to discuss the latest developments in Nextflow and nf-core workflows. These events typically include a combination of community seminars, trainings, and hackathons, and are open to anyone who is interested in using and developing nf-core and its applications. Most events are held virtually, making them accessible to a global audience.\nUpcoming events are listed on the nf-core event page and announced on Slack and Twitter.\n\n\n\nThere are several ways you can join the nf-core community. You are welcome to join any or all of these at any time!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestions about Nextflow that are not related to nf-core can be asked on the Nextflow Slack.\n\n\n\n\nThis tutorial will make use of the nf-core/tools, a set of helper tools for use with Nextflow workflows. These tools have been developed to provide a range of additional functionality using, developing and testing workflows.\nThe nf-core tool is written in Python and is available from the Python Package Index (PyPI).\npip install nf-core\nAlternatively, nf-core/tools can also be installed from Bioconda:\nconda install -c bioconda nf-core\n\n\n\n\n\n\nChallenge\n\n\n\nFind out what version of nf-core/tools you have available using the --version option:\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse the --version option to print your version of the nf-core/tools:\nnf-core --version\n\n\n\n\n\n\nTip\n\n\n\nnf-core/tools has commands to help both users and developers. The tooling is for everyone. For users, the helper tools make it easier to run workflows. For developers, the helper tools make it easier to develop your workflows using best practises.\n\n\n\n\nFind out what other nf-core/tools options and commands are available using the --help option:\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nRun the --help option to list the options, tools for users, and tools for developers\nnf-core --help\n\n\n\n\n\n\nThere are currently 80 workflows (March 2023) available as part of nf-core. These workflows are at various stages of development with 49 released, 19 under development, and 12 archived. A full list of workflows, as well as their documentation, can be explored on the nf-core website.\nThe nf-core list command can also be used to print the available nf-core workflows along with local information.\n:::\n\n\nTry to find out which workflows are available using nf-core/tools:\n:::\n\n\n\n\n\n\nSolution\n\n\n\n\n\nRun the list command to see what workflows are available.\nnf-core list\n\n\n\nThe output shows the latest workflow version number and when that was released. You will also be shown if and when a workflow was pulled locally and whether you have the latest version.\nUnless you are actively developing workflow code, you can use Nextflow‚Äôs built-in functionality to fetch nf-core workflows. You can use the Nextflow pull command to download a remote workflow from the nf-core GitHub repository:\nnextflow pull nf-core/&lt;PIPELINE&gt;\nNextflow can also fetch the workflow code when you run it without pulling the workflow beforehand:\nnextflow run nf-core/&lt;PIPELINE&gt;\n\nNextflow will fetch the default git branch if a workflow version is not specified. This will be the master branch for workflows with a stable release.\n\n\n\n\n\n\n\nReminder\n\n\n\nYou can explicitly reference the workflow version number that you wish to use with the -revision or -r flag.\n\n\nnf-core workflows use GitHub releases to tag stable versions of the code and software. You will always be able to run a previous version of a workflow once it is released.\n\n\n\n\n\n\nChallenge\n\n\n\nTry to pull the latest version of the nf-core/rnaseq workflow directly from GitHub using Nextflow and check what version you have locally.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse the Nextlfow pull command to download the rnaseq workflow from the nf-core GitHub repository.\nnextflow pull nf-core/rnaseq\nUse nf-core list to view what version of the workflow you have locally\nnf-core list\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/1.2_nfcore.html#key-features-of-nf-core-workflows",
    "href": "notebooks/1.2_nfcore.html#key-features-of-nf-core-workflows",
    "title": "Introduction to nf-core",
    "section": "",
    "text": "Documentation\nnf-core workflows have extensive documentation covering installation, usage, and description of output files to ensure that you won‚Äôt be left in the dark.\n\nCI Testing\n\nEvery time a change is made to the workflow code, nf-core workflows use continuous-integration testing to ensure that nothing has broken.\n\nStable Releases\n\nnf-core workflows use GitHub releases to tag stable versions of the code and software, making workflow runs totally reproducible.\n\nPackaged software\n\nPipeline dependencies are automatically downloaded and handled using Docker, Singularity, Conda, or other software management tools. There is no need for any software installations.\n\nPortable and reproducible\n\nnf-core workflows follow best practices to ensure maximum portability and reproducibility. The large community makes the workflows exceptionally well-tested and easy to run.\n\nCloud-ready\n\nnf-core workflows are tested on AWS after every major release. You can even browse results live on the website and use outputs for your own benchmarking.\n\n\nAll nf-core workflows are open-source and community driven."
  },
  {
    "objectID": "notebooks/1.2_nfcore.html#events",
    "href": "notebooks/1.2_nfcore.html#events",
    "title": "Introduction to nf-core",
    "section": "",
    "text": "nf-core events are community-driven gatherings that provide a platform to discuss the latest developments in Nextflow and nf-core workflows. These events typically include a combination of community seminars, trainings, and hackathons, and are open to anyone who is interested in using and developing nf-core and its applications. Most events are held virtually, making them accessible to a global audience.\nUpcoming events are listed on the nf-core event page and announced on Slack and Twitter."
  },
  {
    "objectID": "notebooks/1.2_nfcore.html#join-the-community",
    "href": "notebooks/1.2_nfcore.html#join-the-community",
    "title": "Introduction to nf-core",
    "section": "",
    "text": "There are several ways you can join the nf-core community. You are welcome to join any or all of these at any time!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestions about Nextflow that are not related to nf-core can be asked on the Nextflow Slack."
  },
  {
    "objectID": "notebooks/1.2_nfcore.html#nf-core-tooling",
    "href": "notebooks/1.2_nfcore.html#nf-core-tooling",
    "title": "Introduction to nf-core",
    "section": "",
    "text": "This tutorial will make use of the nf-core/tools, a set of helper tools for use with Nextflow workflows. These tools have been developed to provide a range of additional functionality using, developing and testing workflows.\nThe nf-core tool is written in Python and is available from the Python Package Index (PyPI).\npip install nf-core\nAlternatively, nf-core/tools can also be installed from Bioconda:\nconda install -c bioconda nf-core\n\n\n\n\n\n\nChallenge\n\n\n\nFind out what version of nf-core/tools you have available using the --version option:\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse the --version option to print your version of the nf-core/tools:\nnf-core --version\n\n\n\n\n\n\nTip\n\n\n\nnf-core/tools has commands to help both users and developers. The tooling is for everyone. For users, the helper tools make it easier to run workflows. For developers, the helper tools make it easier to develop your workflows using best practises.\n\n\n\n\nFind out what other nf-core/tools options and commands are available using the --help option:\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nRun the --help option to list the options, tools for users, and tools for developers\nnf-core --help"
  },
  {
    "objectID": "notebooks/1.2_nfcore.html#finding-a-nf-core-workflow",
    "href": "notebooks/1.2_nfcore.html#finding-a-nf-core-workflow",
    "title": "Introduction to nf-core",
    "section": "",
    "text": "There are currently 80 workflows (March 2023) available as part of nf-core. These workflows are at various stages of development with 49 released, 19 under development, and 12 archived. A full list of workflows, as well as their documentation, can be explored on the nf-core website.\nThe nf-core list command can also be used to print the available nf-core workflows along with local information.\n:::\n\n\nTry to find out which workflows are available using nf-core/tools:\n:::\n\n\n\n\n\n\nSolution\n\n\n\n\n\nRun the list command to see what workflows are available.\nnf-core list\n\n\n\nThe output shows the latest workflow version number and when that was released. You will also be shown if and when a workflow was pulled locally and whether you have the latest version.\nUnless you are actively developing workflow code, you can use Nextflow‚Äôs built-in functionality to fetch nf-core workflows. You can use the Nextflow pull command to download a remote workflow from the nf-core GitHub repository:\nnextflow pull nf-core/&lt;PIPELINE&gt;\nNextflow can also fetch the workflow code when you run it without pulling the workflow beforehand:\nnextflow run nf-core/&lt;PIPELINE&gt;\n\nNextflow will fetch the default git branch if a workflow version is not specified. This will be the master branch for workflows with a stable release.\n\n\n\n\n\n\n\nReminder\n\n\n\nYou can explicitly reference the workflow version number that you wish to use with the -revision or -r flag.\n\n\nnf-core workflows use GitHub releases to tag stable versions of the code and software. You will always be able to run a previous version of a workflow once it is released.\n\n\n\n\n\n\nChallenge\n\n\n\nTry to pull the latest version of the nf-core/rnaseq workflow directly from GitHub using Nextflow and check what version you have locally.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse the Nextlfow pull command to download the rnaseq workflow from the nf-core GitHub repository.\nnextflow pull nf-core/rnaseq\nUse nf-core list to view what version of the workflow you have locally\nnf-core list"
  }
]