[
  {
    "objectID": "tips_tricks.html",
    "href": "tips_tricks.html",
    "title": "Nextflow tips and tricks",
    "section": "",
    "text": "Query specific pipeline executions\nnextflow log <run_name> -f  \n\n\nRun Nextflow in the background\nThe Nextflow config command is useful for understanding the resolved profiles and parameters that Nextflow will use run a pipeline.\nnextflow run nf-core-rnaseq-3.11.1/workflow/main.nf -bg > workshop_tip.log\n\n\nCapture a Nextflow pipeline‚Äôs configuration\nnextflow config nf-core-rnaseq-3.11.1/workflow\n\n\nClean Nextflow cache and work directories\nExamples of dry run and remove features for clean\n\n\nAccess private GitHub repositories\nTo interact with private repositories on GitHub or when running into GitHub API rate limits for public repositories (i.e.¬†when using Nextflow Tower), you can provide Nextflow with access to GitHub by specifying your GitHub user name and a Personal Access Token in the scm configuration file inside your specified .nextflow/ directory.\nproviders {\n\n  github {\n    user = 'georgiesamaha'\n    password = 'my-personal-access-token'\n  }\n\n}\n\n\nSend processes to a job scheduler on HPC\nWrite a custom configuration file for your HPCs job scheduler: specify for all processes, withName {}, withLabel {}.\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/1.2_nfcore.html",
    "href": "notebooks/1.2_nfcore.html",
    "title": "Introduction to nf-core",
    "section": "",
    "text": "Objectives\n\n\n\n\nLearn about the core features of nf-core.\nLearn how to use nf-core tooling.\nUse Nextflow to pull the nf-core/rnaseq workflow\n\n\n\n\n\n1.2.1. What is nf-core?\n\nnf-core is a community effort to collect a curated set of analysis workflows built using Nextflow.\nnf-core provides a standardized set of best practices, guidelines, and templates for building and sharing bioinformatics workflows. These workflows are designed to be modular, scalable, and portable, allowing researchers to easily adapt and execute them using their own data and compute resources.\nThe community is a diverse group of bioinformaticians, developers, and researchers from around the world who collaborate on developing and maintaining a growing collection of high-quality workflows. These workflows cover a range of applications, including transcriptomics, proteomics, and metagenomics.\nOne of the key benefits of nf-core is that it promotes open development, testing, and peer review, ensuring that the workflows are robust, well-documented, and validated against real-world datasets. This helps to increase the reliability and reproducibility of bioinformatics analyses and ultimately enables researchers to accelerate their scientific discoveries.\nnf-core is published in Nature Biotechnology: Nat Biotechnol 38, 276‚Äì278 (2020). Nature Biotechnology\nKey Features of nf-core workflows\n\nDocumentation\n\nnf-core workflows have extensive documentation covering installation, usage, and description of output files to ensure that you won‚Äôt be left in the dark.\n\nCI Testing\n\nEvery time a change is made to the workflow code, nf-core workflows use continuous-integration testing to ensure that nothing has broken.\n\nStable Releases\n\nnf-core workflows use GitHub releases to tag stable versions of the code and software, making workflow runs totally reproducible.\n\nPackaged software\n\nPipeline dependencies are automatically downloaded and handled using Docker, Singularity, Conda, or other software management tools. There is no need for any software installations.\n\nPortable and reproducible\n\nnf-core workflows follow best practices to ensure maximum portability and reproducibility. The large community makes the workflows exceptionally well-tested and easy to execute.\n\nCloud-ready\n\nnf-core workflows are tested on AWS after every major release. You can even browse results live on the website and use outputs for your own benchmarking.\n\n\nIt is important to remember all nf-core workflows are open-source and community driven. Most pipelines are under active community development and are regularly updated with fixes and other improvements. Even though the pipelines and tools undergo repeated community review and testing - it is important to check your results*.\n\n\n\n1.2.2. Events\nnf-core events are community-driven gatherings that provide a platform to discuss the latest developments in Nextflow and nf-core workflows. These events include community seminars, trainings, and hackathons, and are open to anyone who is interested in using and developing nf-core and its applications. Most events are held virtually, making them accessible to a global audience.\nUpcoming events are listed on the nf-core event page and announced on Slack and Twitter.\n\n\n\n1.2.3. Join the community!\nThere are several ways you can join the nf-core community. You are welcome to join any or all of these at any time!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe nf-core Slack is one of the primary resources for nf-core users. There are dedicated channels for all workflows as well as channels for common topics. If you are unsure of where to ask you questions - the #help and #nostupidquestions channels are a great place to start.\n\n\n\n\n\n\nQuestions about Nextflow\n\n\n\nIf you have questions about Nextflow and deployments that are not related to nf-core you can ask them on the Nextflow Slack. It‚Äôs worthwhile joining both Slack groups and browsing the channels to get an idea of what types of questions are being asked on each channel. Searching channels can also be a great source of information as your question may have been asked before.\n\n\nJoining multiple nf-core and Nextflow channels is important to keep up to date with the latest community developments and updates. In particular, following the nf-core and Nextflow Twitter accounts will keep you up-to-date with community announcements. If you are looking for more information about a workflow, the nf-core YouTube channel regularly shares ByteSize seminars about best practises, workflows, and community developments.\n\n\n\n\n\n\nChallenge\n\n\n\nJoin the nf-core Slack and fill in your profile information. If you‚Äôre joining the nf-core Slack for the first time make sure you drop a message in #say-hello to introduce yourself! üëã\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nFollow this link to join the nf-core Slack. Follow the instructions to enter your credentials and update your profile. Even if you are already a member of the nf-core Slack, it‚Äôs a great time to check your profile is up-to-date.\n\n\n\n\n\n\n1.2.4. nf-core tools\nThis workshop will make use of nf-core tools, a set of helper tools for use with Nextflow workflows. These tools have been developed to provide a range of additional functionality for using, developing, and testing workflows.\n\n\n\n\n\n\nHow to download nf-core tools\n\n\n\nnf-core tools is written in Python and is available from the Python Package Index (PyPI):\npip install nf-core\nAlternatively, nf-core tools can be installed from Bioconda:\nconda install -c bioconda nf-core\n\n\nThe nf-core --version option can be used to print your version of nf-core tools:\nnf-core --version\n\n\n\n\n\n\nChallenge\n\n\n\nFind out what version of nf-core tools you have available using the nf-core --version option. If nf-core tools is not installed then install it using the commands above:\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse the nf-core --version option to print your nf-core tools version:\nnf-core --version\nIf you get the message ‚Äúnf-core: command not found‚Äù - install nf-core it using the commands above:\npip install nf-core\nAdd the path to the installed scripts and tools to your PATH:\nexport PATH=$PATH:/home/ubuntu/.local/bin\nUse the nf-core --version option to print your nf-core tools version:\nnf-core --version\n\n\n\nnf-core tools are for everyone and has commands to help both users and developers. For users, the tools make it easier to execute workflows. For developers, the tools make it easier to develop and test your workflows using best practices. You can read about the nf-core commands on the tools page of the nf-core website or using the command line.\n\n\n\n\n\n\nChallenge\n\n\n\nFind out what nf-core tools commands and options are available using the --help option:\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nExecute the --help option to list the options, commands for users, and commands for developers:\nnf-core --help\n\n\n\n\nnf-core tools is updated with new features and fixes regularly so it‚Äôs best to keep your version of nf-core tools up-to-date.\n\n\n\n1.2.5. Executing an nf-core workflow\nThere are currently 80 workflows (April 2023) available as part of nf-core. These workflows are at various stages of development with 49 released, 19 under development, and 12 archived.\nThe nf-core website has a full list of workflows, as well as their documentation, which can be explored.\nEach workflow has a dedicated page that includes expansive documentation that is split into 7 sections:\n\nIntroduction\n\nAn introduction and overview of the workflow\n\nResults\n\nExample output files generated from the full test dataset\n\nUsage docs\n\nDescriptions of how to execute the workflow\n\nParameters\n\nGrouped workflow parameters with descriptions\n\nOutput docs\n\nDescriptions and examples of the expected output files\n\nReleases & Statistics\n\nWorkflow version history and statistics\n\n\nUnless you are actively developing workflow code, you don‚Äôt need to clone the workflow code from GitHub and can use Nextflow‚Äôs built-in functionality to pull and a workflow. As shown in the introduction to Nextflow, the Nextflow pull command can download and cache workflows from GitHub repositories:\nnextflow pull nf-core/<pipeline>\nNextflow run will also automatically pull the workflow if it was not already available locally:\nnextflow run nf-core/<pipeline>\nNextflow will pull the default git branch if a workflow version is not specified. This will be the master branch for nf-core workflows with a stable release. nf-core workflows use GitHub releases to tag stable versions of the code and software. You will always be able to execute a previous version of a workflow once it is released using the -revision or -r flag.\n\n\n\n\n\n\nChallenge\n\n\n\nUse Nextflow to pull the latest version of the nf-core/rnaseq workflow directly from GitHub:\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse Nextlfow to pull the rnaseq workflow from the nf-core GitHub repository:\nnextflow pull nf-core/rnaseq\n\n\n\n\n\n\n\n\n\n\nKey points\n\n\n\n\nnf-core is a community effort to collect a curated set of analysis workflows built using Nextflow.\nYou can join/follow nf-core on multiple different social channels (Slack, YouTube, Twitter‚Ä¶)\nnf-core has its own tooling that can be used by users and developers.\nNextflow can be used to pull nf-core workflows.\n\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/1.4_users.html",
    "href": "notebooks/1.4_users.html",
    "title": "nf-core for users",
    "section": "",
    "text": "Objectives\n\n\n\n\nLearn more about nf-core tooling for users.\nUse nf-core list to view information about nf-core workflows.\nUse nf-core download to download a workflow and it‚Äôs singularity images.\nUse nf-core launch to create a parameters file.\n\n\n\n\n\n1.4.1 nf-core tools for users\nnf-core tools has additional commands to help users execute workflows. Although you do not need to use these commands to execute the nf-core workflows, they can greatly assist and improve and simplify your experience.\nThere are also nf-core tools for developers. However, these will not be covered as a part of this workshop. If you are curious to learn more about these tools you can find more information on the nf-core websites tools page. There are also lots of excellent ByteSize talks on the nf-core YouTube channel.\n\n\n1.4.2 nf-core list\nThe nf-core list command can be used to print a list of remote nf-core workflows along with your local workflow information.\nnf-core list\n\nThe output shows the latest workflow version number and when it was released. You will also be shown if and when a workflow was pulled locally and whether you have the latest version.\nKeywords can also be supplied to help filter the workflows based on matches in titles, descriptions, or topics:\nnf-core list dna\n\nOptions can also be used to sort the workflows by latest release (-s release, default), when you last pulled a workflow locally (-s pulled), alphabetically (-s name), or number by the number of GitHub stars (-s stars).\n\n\n\n\n\n\nChallenge\n\n\n\nFilter the list of nf-core workflows for those that are for rna and sort them by stars. Which rna workflow has the most stars?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nExecute the list command, filter it for rna, and sort by stars:\nnf-core list rna -s stars\n\n\n\n\n\n\n1.4.2 nf-core launch\nA workflow can have a large number of optional parameters. To help with this, the nf-core launch command is designed to help you write parameter files for when you launch your workflow.\nThe nf-core launch command takes one argument - either the name of an nf-core workflow which will be pulled automatically or the path to a directory containing a Nextflow workflow:\nnf-core launch nf-core/<workflow>\nWhen running this command, you will first be asked about which version of the workflow you would like to execute. Next, you will be given the choice between a web-based graphical interface or an interactive command-line wizard tool to enter the workflow parameters. Both interfaces show documentation alongside each parameter, will generate a run ID, and will validate your inputs.\n\nThe nf-core launch tool uses the nextflow_schema.json file from a workflow to give parameter descriptions, defaults, and grouping. If no file for the workflow is found, one will be automatically generated at runtime.\nThe launch tool will save your parameter variables as a .json file called nf-params.json. It will also suggest an execution command that includes the -params-file flag and your new nf-params.json file. The command line wizard will finish by asking if you want to launch the workflow. Any profiles or options that were set using the wizard will be included in your run command.\n\n\n\n\n\n\nChallenge\n\n\n\nGenerate a schema and run command for revision 3.11.1 of the nf-core/rnaseq workflow using the nf-core launch command. Use the test and singularity profiles and name your output folder my_test_output.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse the nf-core launch command for the nf-core/rnaseq workflow and follow the prompts:\nYour nf-params.json file should look like this:\n{\n    \"outdir\": \"my_test_output\"\n}\nYour final run command should look like this:\nnextflow run nf-core/rnaseq -r 3.11.1 -profile test,singularity -params-file nf-params.json\nLaunch the workflow from your command line with the run command. You will see the run command will download the required singularity images for you automatically.\n\n\n\nYou can also use the launch command directly from the nf-core launch website. In this case, you can configure your workflow using the wizard and then copy the outputs to your terminal or use the run id generated by the wizard. You will need to be connected to the internet to use the run id.\nnf-core launch --id <run_id>\n\n\n\n1.4.3 nf-core download\nSometimes you may need to execute an nf-core workflow on a server or HPC system that has no internet connection. In this case, you will need to fetch the workflow files and manually transfer them to your offline system. To make this process easier and ensure accurate retrieval of correctly versioned code and software containers, nf-core has the download command.\nThe nf-core download command will download both the workflow code and the institutional nf-core/configs files. It can also optionally download singularity image file.\nnf-core download\nIf run without any arguments, the download tool will interactively prompt you for the required information. Each prompt option has a flag and if all flags are supplied then it will run without a request for any additional user input:\n\nPipeline name\n\nName of workflow you would like to download.\n\nPipeline revision\n\nThe revision you would like to download.\n\nPull containers\n\nIf you would like to download Singularity images.\nThe path to a folder where you would like to store these images if you have not set your NXF_SINGULARITY_CACHEDIR.\n\nChoose compression type\n\nThe compression type for Singularity images.\n\n\nAlternatively, you could build your own execution command with the command line options.\n\n\n\n\n\n\n\nChallenge\n\n\n\nUse the nf-core download command to download revision 3.11.1 of the nf-core/rnaseq workflow with it‚Äôs uncompressed Singularity images. You can use either the command line options or prompts.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse the nf-core download command for the nf-core/rnaseq workflow and follow the prompts.\nIf you were to write your own command and options it would look like this:\nnf-core download nf-core/rnaseq --revision 3.11.1 --container singularity --compress none\n\n\n\n\n\n\n\n\n\n\nKey points\n\n\n\n\nThe nf-core list command can be used to view local and remote information about nf-core workflows.\nThe nf-core download command is a powerful way to download a workflow and its Singularity images.\nThe nf-core launch command can be a useful tool for writing parameter files.\n\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/2.0_intro.html",
    "href": "notebooks/2.0_intro.html",
    "title": "2.0. Introduction to session 2",
    "section": "",
    "text": "This session builds on fundamental concepts learned in Session 1 and provides you with hands-on experience in nf-core workflow customisation. Throughout the session we will be working with data from a published RNAseq study and the nf-core/rnaseq pipeline.\nWe will explore the pipeline source code and apply various customisations using a parameter file and custom configuration files. You will:\n\nCreate these files for our case study\nUse the nf-core tools utility\nRun Nextflow commands to query work directories and configuration files\nWrite some custom Bash code to efficiently extract information from the source code\n\nEach lesson in this session will build on the previous lessons, so you can gain a deeper understanding of the customisation techniques and the impact they have on the workflow and your results ü§ì\n\n\n\n\n\n\nApplying what you learn here to other nf-core workflows\n\n\n\nWhile all activities in this session will be performed using the nf-core/rnaseq workflow, all customisation scenarios we explore are applicable to other nf-core workflows and do not require an understanding of RNAseq data processing.\n\n\n\n2.0.1. Log back in to your instance\nFollow set up instructions to log back into your instance.\n\n\n2.0.2. Create a new work directory\nCreate a new directory for all session 2 activities and move into it:\nmkdir ~/session2 && cd $_\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/0.0_welcome.html",
    "href": "notebooks/0.0_welcome.html",
    "title": "Welcome to the workshop!",
    "section": "",
    "text": "In this workshop, we explore Nextflow and nf-core as powerful tools for bioinformatics data processing pipelines. Our goal for this workshop is to provide you with foundational knowledge required to understand the code base of any nf-core pipeline and responsibly apply and customise an nf-core pipelines to your own research.\nThese sessions will be a challenging but rewarding experience that will provide you with an opportunity to develop your skills and get exposure to key concepts in Nextflow. Even if you are already familiar with Nextflow and have some experience with nf-core pipelines, it will take you time and practice beyond this workshop to fully understand the concepts and terminology laid out here.\n\nLesson plan\n\n\n\n\n\n\n\n\nSession\nLesson\nOutcomes\n\n\n\n\n1.\n1. Introduction to Nextflow\nUnderstand core features of Nextflow and learn fundamental Nextflow options and features.\n\n\n\n2. Introduction to nf-core\nUnderstand core features of nf-core and learn how to use nf-core tools utility.\n\n\n\n3. Configuring nf-core workflows\nUnderstand the structure of an nf-core pipeline and the use of customisation options.\n\n\n\n4. Commands for users\nApply the nf-core tools utility‚Äôs list, download, and launch commands.\n\n\n\n\n\n\n\n2.\n1. Design a run command\nBuild a run command for the nf-core/rnaseq pipeline using required and optional parameters.\n\n\n\n2. Reproducible parameters\nTroubleshoot a pipeline warning message and apply a params file to track our parameters.\n\n\n\n3. Configure compute resources\nConfigure compute resources for the workflow using a custom configuration file.\n\n\n\n4. Apply multiple configurations\nApply multiple configuration files to customise various pipeline settings for the same run.\n\n\n\n5. Apply additional arguments\nSupply external arguments to a process that are not preset as pipeline parameters.\n\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/2.4_multiConfig.html",
    "href": "notebooks/2.4_multiConfig.html",
    "title": "2.4. Using multiple configuration files at once",
    "section": "",
    "text": "Objectives\n\n\n\n\nCreate and apply custom configuration files for:\n\nSpecifying a non-default tool container\nCustomised resource tracing\nBespoke MultiQC report formatting\nAdding tool arguments that are not available as nf-core parameters\n\nApply multiple custom configuration files in a single workflow execution with -c <conf-1,conf2,...>\n\n\n\nUsing multiple configuration files allows you to customise nf-core pipelines to your specific needs. They can be applied in a modular fashion, where custom configs are added to a pipeline execution only as required.\nThis flexibility ensures that we preserve the portability and reproducibility of nf-core pipelines by not editing the core workflow code to make bespoke customisations.\nIn this lesson we will create four custom configuration files for different customisation scenarios, and apply them to the one run command. \n\n2.4.1. Configure your run to use a non-default container\n\n\n\n\n\n\n\n\n\n\nNote that for deploying nf-core workflows, it is not recommended to replace the tools within the workflow, as this will decrease portability and reproducibilty! This exercise is to demonstrate how you can specify containers, as this may aid you in developing and testing your own Nextflow workflows or testing new tool versions\n\n\nFor this example, we are going to test out the latest version of Trim Galore. We have been using the default version of Trim Galore that is executed with nf-core/rnaseq revision 3.11.1.\nWe can easily view the versions of all tools used from the software_versions.yml file created by default in the <outdir>/pipeline_info directory by nf-core workflows OR by viewing the same information from the ‚Äònf-core/rnaseq Software Versions‚Äô section of the MultiQC html report.\n\n‚û§ Identify the version of Trim Galore that has been used in our runs so far from the software_versions.yml file:\n\nYou might view the file by opening it from the VS Code explorer pane, using more command, or grep for the tool name\nThe module names in software_versions.yml are listed in alphabetical order, with the tools and versions used in the script section of the process listed below each module\n\nmore Lesson-2.3.4/pipeline_info/software_versions.yml\n\n##\n#TRIMGALORE:\n#  cutadapt: '3.4'\n#  trimgalore: 0.6.7\n#\n\n\n\n\n\n\nIf you have not yet run this version of the pipeline\n\n\n\n‚Ä¶and thus do not have a software_versions.yaml or MultiQC report to check, one way to discover the default tool version is to look in the process main.nf file:\ngrep container nf-core-rnaseq-3.11.1/workflow/modules/nf-core/trimgalore/main.nf \n\n##\n#    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n#        'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' }\"\n##\nThis should not often be the case, as nf-core pipelines should first be run with a test dataset before executing your full run and delving into custom configuration.\nnf-core pipelines ship with test datasets, that can easily be tested with eg -profile singularity,test to the nextflow run command.\n\n\n\nThere is a newer version of Trim Galore available: v.0.6.10.\nRecall that we have been accessing our training materials from CernVM-FS:\n\nCernVM-FS is a read-only filesystem which provides shared access to common bioinformatics reference datasets as well as Singularity containers of everything stored in Biocontainers\nCernVM-FS comes pre-mounted on Pawsey Nimbus VMs using the Pawsey Bio - Ubuntu 22.04 - 2023-03 image image\nWe can access the Trim Galore biocontainer by specifying the path to this remote image within the process scope of a custom config, using the withName process selector\n\nAlternatively, we could specify an alternate remote source, such as quay.io, or point to a local image.\n\n\n\n\n\n\n\nPoll question!\n\n\n\n‚ùì For maintaining portability and reproducibility, what is the best way to specify our custom Trim Glaore container when we execute the nf-core/rnaseq pipeline?\n\nWithin the custom-nimbus.config institutional config file. It‚Äôs already working well on our platform, so we can build on it for further customisations without issue.\nWithin a separate custom config file named custom-tools.config. We would then apply it at -c along with our institutional config.\nWithin the Trim Galore main.nf file. This way, we don‚Äôt need to worry about adding another custom config when we execute the run command.\n\n\n\n\n\n\n\n\n\nDiscussion\n\n\n\n\n\nIn the event that we are testing a different tool version, this should not be placed within the institutional config that is shareable with others using nf-core pipelines on the same infrastructure. Doing so would prevent our institutional config from being portable to other analyses.\nIn general, editing the process main.nf file is not recommended, as this impedes reproducibility. Swapping out tool versions is a bespoke adaptation of the nf-core workflow that would harm reproducibility if it was inadvertently executed, which is likely to happen if it is hidden within the source code.\nBy placing it within a clearly named custom config file, there is less chance of unwittingly executing a workflow that does not match the expected utilisation of tools. Whenever we run an nf-core pipeline, the custom configs we applied are listed under Core Nextflow options in the run log, so there is a record that the particular configuration file was applied. Take care to save any custom configuration files applied to a run along with the project outputs, and to use an informative config name.\n\n\n\n\n‚û§ First, identify the container for the 0.6.10 version of Trim Galore:\n\n\n\n\n\n\nContainer paths at cvmfs\n\n\n\nContainers are mounted at the path /cvmfs/singularity.galaxyproject.org, with sub-directories based on the first 2 letters of the tool name, eg /cvmfs/singularity.galaxyproject.org/t/r/ for Trim Galore containers.\n\n\nls /cvmfs/singularity.galaxyproject.org/t/r/trim*\n\n##\n#  /cvmfs/singularity.galaxyproject.org/t/r/trim-galore:0.6.10--hdfd78af_0\n##\n\n‚û§ Next, identify the execution path for the TRIMGALORE module:\ngrep -i galore nf-core-rnaseq-3.11.1/workflow/conf/modules.config \n\n##\n#    if (params.trimmer == 'trimgalore') {\n#            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {\n#    if (params.trimmer == 'trimgalore') {\n#            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {\n#                        params.extra_trimgalore_args ? params.extra_trimgalore_args.split(\"\\\\s(?=--)\") : ''\n##\n\n‚û§ Open a file for editing named custom-tools.config, and start building your config with the process scope and withName selector that we covered in Lesson 2.3.5:\nprocess {\n  withName: {\n\n  }\n}\n\n‚û§ Then copy the Trim Galore module execution path from your terminal inside the withName block:\n\nMake sure to copy the module for TRIMGALORE and not FASTQC which are both within the same SUBWORKFLOW\n\nprocess {\n  withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {\n\n  }\n}\n\n‚û§ Finally, copy the container details from your terminal inside the withName block:\nprocess {\n  withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {\n    container = '/cvmfs/singularity.galaxyproject.org/t/r/trim-galore:0.6.10--hdfd78af_0' \n  }\n}\n\n‚û§ Save custom-tools.config then resume the previous run, supplying our two configuration files at -c:\n\n\n\n\n\n\nSpecify multiple configs\n\n\n\nWhen adding multiple custom configs, we supply them to -c in a comma-delimited list\n\n\n\nFirst, delete or comment out the withName: '.*:RNASEQ:ALIGN_STAR:STAR_ALIGN' block we applied in the custom-nimbus.config file\n\nIn Nextflow, use // for single line comments or /* .. */ to comment a block on multiple lines\n\nSpecify output directory Lesson-2.4.1\n\n nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \\\n  -profile workshop \\\n  -c custom-nimbus.config,custom-tools.config \\\n  -params-file workshop-params.yaml \\\n  --outdir Lesson-2.4.1 \\\n  -resume \n\n\n\n\n\n\n‚åõ\n\n\n\nBecause we have altered a pre-processing step, read trimming and all downstream steps will need to be re-computed. Our run will take ~ 10 minutes to complete.\nFor now we will skip forward to the next lesson and check on the results of Lesson-2.4.1 a little later.\n‚û§ Leave the run command running in your terminal, and open a new terminal (if you are in VS Code, do this by clicking the + icon in the top right corner of your terminal)\n\nRun the nextflow log command with no arguments. Observe that this command is applicable to the working directory, not the session.\n\n\n\n\n‚û§ After your run has completed, check that the updated version of Trim Galore has been used:\ngrep -i galore Lesson-2.4.1/pipeline_info/software_versions.yml\n\n##\n#TRIMGALORE:\n#  trimgalore: 0.6.10\n##\n\ngrep -i galore Lesson-2.3.4/pipeline_info/software_versions.yml \n\n##\n#TRIMGALORE:\n#  trimgalore: 0.6.7\n##\n\n\n\n2.4.2. Customised resource tracing\nRunning Nextflow workflows with the option -with-trace writes a trace report named trace.txt in the working directory.\nnf-core pipelines by default create an execution_trace file within <outdir>/pipeline_info. A trace report can be customised to include any combination of available fields using the Nextflow -fields flag.\nIf there is a specific combination of fields you would like to regularly capture for your pipeline runs, perhaps for resource benchmarking, it would be useful to have a custom configuration file that can be optionally applied to any run, to save having to extract this information manually after a run.\nIn this exercise, we will create a custom configuration file that writes a detailed resource tracing file with our custom fields. \n‚û§ To begin, we will extract these custom fields from a previous run using the nextflow log command.\n\n\n\n\n\n\nChallenge\n\n\n\nUsing the trace report fields, write a nextflow log command to query the following for a previous workflow run:\n\nTask name\nTask status\nTask exit status\nTask execution time (realtime)\nNumber of cpus requested for the task\nPercentage of CPU used by the process (use pcpu rather than %cpu)\nAmount of memory requested for the task\nPercentage of memory used by the process (use pmem rather than %mem)\nResident set size of the process (rss)\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nFirst, run nextflow log with no arguments to obtain the name of your last run (unless you can remember it!)\nnextflow log | tail -1\nThen, supply that run name to the command below:\nnextflow log <run_name> -f name,status,exit,realtime,cpus,pcpu,memory,pmem,rss\n\n\n\n\n‚åõ Reminder to check the Lesson-2.4.1 run! \nLet‚Äôs make a portable configuration file for resource tracing. Because this config is not infrastructure or pipeline specific, we can share it with collaborators and use it across multiple pipelines ü§ù\n‚û§ Open a file for editing called custom-trace.config and add the following content:\n\n\n\n\n\n\nSyntax pointers\n\n\n\n\ntrace_timestamp variable is used to avoid output filename clashes\nenabled = true is equivalent to adding the Nextflow command line option -with-trace\noutput file is saved in directory specified by nf-core parameter outdir\nNote that we need to use %cpu and %mem, as per the Nextflow documentation, and not pcpu and pmem as we applied on the command line due to this issue\n\n\n\n// Define timestamp, to avoid overwriting existing trace \ndef trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')\n\n// Generate custom resource trace file \ntrace {\n  enabled = true \n  file = \"${params.outdir}/custom-resource-trace-${trace_timestamp}.txt\"\n  fields = 'name,status,exit,realtime,cpus,%cpu,memory,%mem,rss'\n}\n\n‚û§ Save the config and resume your previous run, adding custom-trace.config and setting outdir to Lesson-2.4.2:\nnextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \\\n  -profile workshop \\\n  -c custom-nimbus.config,custom-tools.config,custom-trace.config \\\n  -params-file workshop-params.yaml \\\n  --outdir Lesson-2.4.2 \\\n  -resume \n\nüëÄ Notice that your multiple custom configurations are listed under Core Nextflow options on the launch log printed to the screen:   \n‚û§ Once the workflow has run, take a look at the Lesson-2.4.2/custom-resource-trace-${trace_timestamp}.txt file:\n\nüëÄ Notice that while the status is CACHED, the resources reported are from the actual compute required to execute the process, and not the time this execution took to restore the data from cache\n\n \n\n\n2.4.3. Configure MultiQC reports\nMany nf-core pipelines use MultiQC to generate a summary report at the end of a workflow. MultiQC is a reporting tool that can aggregate results and statistics output by various bioinformatics tools, helping to summarise experiments containing multiple samples and multiple analysis steps.\nMultiQC allows users the flexibility of customising the output reports.\nnf-core has enabled users to take full advantage of this functionality through the inclusion of the --multiqc_config parameter.\n\n\n\n\n\n\nHidden nf-core parameters\n\n\n\nThe --multiqc_config parameter is a ‚Äòhidden param‚Äô! To see this parameter, you need to apply --show_hidden_params on the command line help, or select ‚ÄòShow hidden params‚Äô on the nf-core parameters webpage\n\n\n\nWe are going to create a custom MultiQC config to:\n\nOverlay a theoretical GC content track specific for our mm10 reference genome\nAdd a custom report header \n\n‚û§ Open a file for editing named custom-multiqc-config.yaml and add the following content:\n\n\n\n\n\n\nTip\n\n\n\nYou can add any fields under the report_header_info section, as long as you follow the required formatting\n\n\n# Project level information:\nreport_header_info:\n  - Contact E-mail: \"cali.willet@sydney.edu.au\"\n  - Workshop host: \"Australian BioCommons\"\n  - Workshop title: \"Unlocking nf-core - customising workflows for your research\"\n  - Workshop URL: https://sydney-informatics-hub.github.io/customising-nfcore-workshop/\n  - Sample data: Mouse RNAseq from https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-016-2801-4 \n\n# Theoretical GC Content:\nfastqc_config:  \n  fastqc_theoretical_gc: \"mm10_txome\" \n\n‚û§ To the workshop-params.yaml file, add:\nmultiqc_config: \"custom-multiqc-config.yaml\" \n\n‚û§ Make sure both YAML files are saved, then re-run the workflow:\n\n\n\n\n\n\nChallenge\n\n\n\nCan you construct the run command without viewing the solution below?\nüí° Think about nf-core parameters versus Nextflow configuration files\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWe do not need to add our MultiQC config at the Nextflow option -c because we have provided it as a value to the nf-core parameter multiqc_config within workshop-params.yaml\nnextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \\\n  -profile workshop \\\n  -c custom-nimbus.config,custom-tools.config,custom-trace.config \\\n  -params-file workshop-params.yaml \\\n  --outdir Lesson-2.4.3 \\\n  -resume\n\n\n\n\n‚û§ View the html file Lesson-2.4.3/multiqc/star_salmon/multiqc_report.html and compare it to the report generated by a previous run:\n\n\n\n\n\n\nViewing HTML\n\n\n\n\nIf you are using VS Code with the ‚ÄòLive Server‚Äô extension installed, right click the html file in the Explorer pane and select ‚ÄòOpen with Live Server‚Äô\nIf you are using a terminal without a browser GUI enabled, use eg scp command to take a copy to your local computer and open in your preferred browser\n\n\n\nNavigate to the section titled FastQC: Per Sequence GC Content. Compare the two plots to observe the custom track has been successfully added.\n \nüëÄ This track has shown that our sample transcriptomes follow a normal distribution consistent with the mm10 reference. \n\n\n\n\n\n\nChallenge\n\n\n\nIf we did detect GC bias, how could we customise our run to correct for this?\nüèãÔ∏è This is a tricky one, particularly if you are unfamiliar with RNAseq analysis!\nüí° So here is a freebie to get you started: correcting for GC bias in this analysis requires operation at the transcript quantification step, which is performed by the SALMON_QUANT module\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nCheck the tool documentation for salmon: we need to apply the --gcBias flag\nCheck the available nf-core parameters for the rnaseq pipeline: we find that there is no nf-core parameter addressing GC bias!\nHowever, the astute observer would discover a parameter --extra_salmon_quant_args with description ‚ÄòExtra arguments to pass to Salmon quant command in addition to defaults defined by the pipeline‚Äô. Sounds perfect, yes?!\nWe can then provide the required salmon flag (and any others we needed) as an argument to the nf-core --extra_salmon_quant_args parameter, wrapped in quotes, supplying the parameter to the run as we would any other nf-core parameter (either on the command line or within a parameters file):\n\n# Within parameters YAML file:\nextra_salmon_quant_args : '--gcBias'\n\n# On the command line - note the intentional inclusion of whitespace inside the quotes:\n--extra_salmon_quant_args '--gcBias '\n\n\n\n\nüò± What would we do if the above solution was not available within our chosen nf-core pipeline?\nWe will cover this in the next lesson! üòé\n\n\n\n2.4.4. Apply external arguments\nAll nf-core modules are currently required to include the mandatory arguments that a tool needs to run within the main.nf file of the process running that tool.\nOptional arguments for a tool that are commonly changed are usually included as nf-core workflow parameters, so they can be easily customised on the command line or supplied within a parameters file.\nAs we are all aware, bioinformatics tools can have a lot of optional arguments. It is not feasible for nf-core to paramaterise all of these arguments‚Ä¶\n\n\nIn this lesson, we will learn how to apply any argument for a tool that is not explicitly covered by an nf-core workflow parameter using Nextflow‚Äôs ext directive. \n‚û§ Consider the diagram below:\n\nOn the left of the diagram is an example of the standard main.nf format of a process named example stored in the modules directory\n\nAbove the script block, the $args variable is defined\nThe task.ext.args ?: '' expression checks if the ext.args parameter has already been defined\nIf it isn‚Äôt defined it will assign an empty string\nInside the script block, the $args variable is applied to the tool command\n\nIn the middle of the diagram is a custom configuration file targeting the ‚ÄòEXAMPLE‚Äô process\n\nThis configuration file gives the tool-specific argument --flag1 to ext.args using withName\n\nOn the right of the diagram we see how the tool command is executed if -c example-custom.config was applied to the run\n\nThe $args variable is interpolated to --flag1 when modules/example/main.nf is executed \n\n\n \nüëÄ You can observe the empty $args variable at play within .command.sh scripts for a run:\nnextflow log | tail -1\nnextflow log <run_name> -f script\n\nWe will now pass an optional flag to the Trim Galore process using ext.args in a custom configuration file.\n\n\n\n\n\n\nDisclaimer ü§≠\n\n\n\nThis workshop was developed before the release of nf-core/rnaseq -r 3.11.0, where the parameter --extra_trimgalore_args was first introduced.\nWe have retained this exercise as it is equally applicable to other tools which do not have an --extra_<tool>_args nf-core parameter.\nThis is a good reminder that:\n\nnf-core pipelines are under active development\ncarefully check the parameter and usage docs with each new release\nsubmit feature requests to the nf-core/github pipeline repo to have --extra_<tool>_args added where you think it‚Äôs warranted\n\n\n\n\nFor the sake of the lesson, let‚Äôs assume we want to apply a very stringent minimum Phred score of 40.\n‚ùó This is overly stringent! Bear with us‚Ä¶ üòä \n‚û§ Follow the decision tree to work out how to apply this workflow customisation. Some useful links are below the flowchart:\n \nüß∞ Trim Galore docs\nüß∞ nf-core/rnaseq trimming params v.3.11.1 vs v.3.10.1\nüß∞ Trim Galore main.nf \n\n\n\n\n\n\nInclusion of ext.args\n\n\n\nRecall from Lesson 2.1.2 that the inclusion of ext.args is currently standard practice for all DSL2 nf-core modules where additional parameters may be required to run a process, however this may not be implemented for all processes\n\n\n\nFrom the above investigation, we have learnt that:\n\nThe Trim Galore argument --quality 40 is required to over-ride the Trim Galore default of 20\nThis parameter is absent from the nf-core/rnaseq parameters list (for v.3.10.1 that is!) üòä\nOnly --cores and --gzip tool args are hard-coded in trimgalore/main.nf\next.args is defined in trimgalore/main.nf\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nWrite a custom configuration file named custom-args.config that adds --quality 40 to the script block of the TRIMGALORE module\nüß† Try to write the config without showing the solution!\nüí° Hint: you may find it helpful to take a copy of the custom-tools.config file from the previous exercise\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n// A custom configuration file for specifying external tool arguments\n\nprocess {\n    withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {   \n        ext.args = '--quality 40'\n    }\n}\n\n\n\n\n‚û§ Save custom-args.config then resume the run, specifying our latest custom config file at -c and set outdir param to Lesson-2.4.4:\nnextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \\\n  -profile workshop \\\n  -c custom-nimbus.config,custom-tools.config,custom-trace.config,custom-args.config \\\n  -params-file workshop-params.yaml \\\n  --outdir Lesson-2.4.4 \\\n  -resume\n\nüò≤ Pipeline completed successfully but  2/2 samples failed!\n \n‚û§ Investigate the source of the failure:\n\nFollowing the advice of the warning message, check the MultiQC report by opening the file Lesson-2.4.4/multiqc/star_salmon/multiqc_report.html (with Live Server VS Code extension or taking a local copy)\nClick on the ‚ÄòWARNING: Fail Trimming Check‚Äô on the navigation headings on the left\nBoth of our samples ‚Äòfailed the minimum trimmed reads threshold specified via the --min_trimmed_reads parameter, and hence were ignored for the downstream processing steps‚Äô\nLooking at the nf-core/rnaseq parameter documentation, we see --min_trimmed_reads param with default value 10,000. Our samples both had < 5,000 reads\nComparing the outputs in Lesson-2.4.4 to a previous run, notice there is no star_salmon directory, which is where the output of STAR alignment and Salmon quantification modules are saved \n\n\n\n\n\n\n\nStay vigilant!\n\n\n\nThis lesson highlights the need to thoroughly check your output to ensure that the intended anlysis has been run and the results are what you require.\nThe message Pipeline completed successfully printed to your terminal every time a run completes (and also exit status of zero for individual tasks or cluster jobs if you are running on a cluster) indicates that there were no errors running the pipeline, not that your samples have produced the desired output!\n\n\n\n‚û§ Confirm that the external argument was actually applied:\n‚ùó In this example, it is clear that our ext.args customisation was successfully applied because of the catastrophic failure it produced. In less dramatic cases, how can we confirm that the external argument was actually applied? ü§î \n\nWithin your MultiQC report, navigate to the section ‚Äònf-core/rnaseq Workflow Summary‚Äô\n\nUnlike our custom options, profiles, and configs, the custom quality parameter is not documented!\nü§î seems worthy of a feature request‚Ä¶\n\nSome tools write a handy log, in which case you might view the applied parameters from that file, eg:\n\nhead Lesson-2.4.4/trimgalore/SRR3473988.fastq.gz_trimming_report.txt \n \n\nIn the absence of an informative tool log, you can always rely on nextflow log ü•∞\n\nnextflow log <run_name> -f script | grep -A 10 trim_galore\n\n##\n#        trim_galore \\\n#            --quality 40 \\\n#            --cores 1 \\\n#            --gzip \\\n#            SRR3473989.fastq.gz\n##\n\n‚û§ Optional final run for the purists at heart üëº\n\nIf you would like to conclude today‚Äôs compute with a successful run, try changing the Trim Galore --quality threshold to 30 \n\n\n\n\n\n\n\nKey points\n\n\n\n\nYou can customise container use, resource tracing and mutliqc reports through custom configuration files\next is a very handy Nextflow directive that has been enabled by nf-core to provide full tool functionality for end users through ext.args in custom configs\nYou can specify multiple custom configuration files at the Nextflow option -c in a comma-delimited list\nThere is no substitute for reading the tool docs when customising your runs! üìñ\n\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/0.0_template.html",
    "href": "notebooks/0.0_template.html",
    "title": "Lesson title",
    "section": "",
    "text": "Learning objectives\n\n\n\n\nlearning outcome 1\nlearning outcome 2\n\n\n\nSome intro text to what this lesson is about\n\nSub-section heading\nCommands should be written like this:\ncommand \nWhere relevant include expected standard output:\nstdout here\nAny important notes for attendees should be present in information boxes. For example:\n\n\n\n\n\n\nCopying the code from the grey boxes on training materials\n\n\n\nIn this workshop we need to copy code from the grey boxes in the training materials and run it in the terminal. If you hover your mouse over a grey box on the website, a clipboard icon will appear on the right side. Click on the clipboard logo to copy the code. Test it out with:\nssh training@###.###.###.###\n\n\nChallenges/activites should be provided in challenge boxes:\n\n\n\n\n\n\nChallenge\n\n\n\nQuestion or activity\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSolution explanation and code where relevant\n\n\n\n\nFor other types of callout blocks see here. Any figures should be placed in figs directory and embeddeded like this: \n\n\n\n\n\n\n:shrug: Zoom check-in! :shrug:\n\n\n\nIs everyone ok?\nYes, move on :clap: :clap:\nNo, help! :cry: :cry:\n\n\n\n\n\n\n\n\nKey points\n\n\n\n\ntakeaway 1\ntakeaway 2\n\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/1.1_nextflow.html",
    "href": "notebooks/1.1_nextflow.html",
    "title": "Introduction to Nextflow",
    "section": "",
    "text": "Objectives\n\n\n\n\nLearn about the core features of Nextflow.\nLearn Nextflow terminology.\nLearn fundamental commands and options for executing workflows.\n\n\n\n\n\n1.1.1. What is Nextflow?\n\nNextflow is a workflow orchestration engine and domain-specific language (DSL) that makes it easy to write data-intensive computational workflows.\nIt is designed around the idea that the Linux platform is the lingua franca of data science. Linux provides many simple but powerful command-line and scripting tools that, when chained together, facilitate complex data manipulations.\nNextflow extends this approach, adding the ability to define complex program interactions and a high-level parallel computational environment based on the dataflow programming model.\nNextflow‚Äôs core features are:\n\nWorkflow portability and reproducibility\nScalability of parallelization and deployment\nIntegration of existing tools, systems, and industry standards\n\nWhether you are working with genomics data or other large and complex data sets, Nextflow can help you to streamline your workflow and improve your productivity.\n\n\n\n1.1.2. Processes and Channels\nIn Nextflow, processes and channels are the fundamental building blocks of a workflow.\n\nA process is a unit of execution that represents a single computational step in a workflow. It is defined as a block of code that typically performs a one specific task and specifies its input and outputs, as well as any directives and conditional statements required for its execution. Processes can be written in any language that can be executed from the command line, such as Bash, Python, or R.\nProcesses in are executed independently (i.e., they do not share a common writable state) as tasks and can run in parallel, allowing for efficient utilization of computing resources. Nextflow automatically manages the data dependencies between processes, ensuring that each process is executed only when its input data is available and all of its dependencies have been satisfied.\nA channel is an asynchronous first-in, first-out (FIFO) queue that is used to join processes together. Channels allow data to passed between processes and can be used to manage data, parallelize tasks, and structure workflows. Any process can define one or more channels as an input and output. Ultimately the workflow execution flow itself, is implicitly defined by these declarations.\nImportantly, processes can be parameterized to allow for flexibility in their behavior and to enable their reuse in and between workflows.\n\n\n\n1.1.3. Execution abstraction\nWhile a process defines what command or script is executed, the executor determines how and where the script is executed.\nNextflow provides an abstraction between the workflow‚Äôs functional logic and the underlying execution system. This abstraction allows users to define a workflow once and execute it on different computing platforms without having to modify the workflow definition. Nextflow provides a variety of built-in execution options, such as local execution, HPC cluster execution, and cloud-based execution, and allows users to easily switch between these options using command-line arguments.\n\nIf not specified, processes are executed on your local computer. The local executor is useful for workflow development and testing purposes. However, for real-world computational workflows, a high-performance computing (HPC) or cloud platform is often required.\nYou can find a full list of supported executors as well as how to configure them here.\n\n\n\n1.1.4. Nextflow CLI\nNextflow implements a declarative domain-specific language (DSL) that simplifies the writing of complex data analysis workflows as an extension of a general-purpose programming language. As a concise DSL, Nextflow handles recurrent use cases while having the flexibility and power to handle corner cases.\nNextflow is an extension of the Groovy programming language which, in turn, is a super-set of the Java programming language. Groovy can be thought of as ‚ÄúPython for Java‚Äù and simplifies the code.\nNextflow provides a robust command line interface for the management and execution of workflows. Nextflow can be used on any POSIX compatible system (Linux, OS X, etc). It requires Bash 3.2 (or later) and Java 11 (or later, up to 18) to be installed.\nNextflow is distributed as a self-installing package and does not require any special installation procedure.\n\n\n\n\n\n\nHow to install Nextflow\n\n\n\nNextflow can be installed using a few easy steps:\n\nDownload the executable package using either wget -qO- https://get.nextflow.io | bash or curl -s https://get.nextflow.io | bash\nMake the binary executable on your system by running chmod +x nextflow.\nMove the nextflow file to a directory accessible by your $PATH variable, e.g, mv nextflow ~/bin/\n\n\n\n\n\n\n1.1.5.Nextflow options and commands\nNextflow provides a robust command line interface for the management and execution of workflows. The top-level interface consists of options and commands.\nYou can list Nextflow options and commands with the -h option:\nnextflow -h\n\nOptions for a commands can also be viewed by appending the -help option to a Nextflow command.\nFor example, options for the the run command can be viewed:\nnextflow run -help\n\n\n\n\n\n\n\nChallenge\n\n\n\nFind out which version of Nextflow you are using with the version option.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe version of Nextflow you are using can be printed using the -v option:\nnextflow -version\nOr:\nnextflow -v\n\n\n\n\n\n\n\n1.1.6. Managing your environment\nYou can use environment variables to control the Nextflow runtime and the underlying Java virtual machine. These variables can be exported before running a workflow and will be interpreted by Nextflow. For most users, Nextflow will work without setting any environment variables. However, to improve reproducibility and to optimise your resources, you will benefit from establishing environmental variables.\nFor example, for consistency, it is good practice to pin the version of Nextflow you are using with the NXF_VER variable:\nexport NXF_VER=<version number>\n\n\n\n\n\n\nChallenge\n\n\n\nPin the version of Nextflow to 22.04.5 using the NXF_VER environmental variable and check that it has been applied.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nExport the version using the NXF_VER environmental variable:\nexport NXF_VER=22.04.5\nCheck that the new version has been applied using the -v option:\nnextflow -v\n\n\n\n\nSimilarly, if you are using a shared resource, you may also consider including paths to where software is stored and can be accessed using the NXF_SINGULARITY_CACHEDIR or the NXF_CONDA_CACHEDIR variables:\nexport NXF_CONDA_CACHEDIR=<custom/path/to/conda/cache>\n\n\n\n\n\n\nChallenge\n\n\n\nCreate a new folder with the path /home/ubuntu/singularity_cache to store your singularity images and export its location using the NXF_SINGULARITY_CACHEDIR environmental variable:\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nMake a new folder for your singularity images:\nmkdir /home/ubuntu/singularity_cache\nExport your new folder as your cache directory for singularity images using the NXF_SINGULARITY_CACHEDIR environmental variable:\nexport NXF_SINGULARITY_CACHEDIR=/home/ubuntu/singularity_cache\nSingularity images downloaded by workflow executions will now be stored in this directory.\n\n\n\nYou may want to include these, or other environmental variables, in your .bashrc file (or alternate) that is loaded when you log in so you don‚Äôt need to export variables every session.\nA complete list of environmental variables can be found here.\n\n\n\n1.1.7. Executing a workflow\nNextflow seamlessly integrates with code repositories such as GitHub. This feature allows you to manage your project code and use public Nextflow workflows quickly, consistently, and transparently.\nThe Nextflow pull command will download a workflow from a hosting platform into your global cache $HOME/.nextflow/assets folder.\nIf you are pulling a project hosted in a remote code repository, you can specify its qualified name or the repository URL. The qualified name is formed by two parts - the owner name and the repository name separated by a / character. For example, if a Nextflow project bar is hosted in a GitHub repository foo at the address http://github.com/foo/bar, it could be pulled using:\nnextflow pull foo/bar\nOr by using the complete URL:\nnextflow pull http://github.com/foo/bar\nAlternatively, the Nextflow clone command can be used to download a workflow into a local directory of your choice:\nnextflow clone foo/bar <your/path>\nThe Nextflow run command is used to initiate the execution of a workflow:\nnextflow run foo/bar\nIf you run a workflow, it will look for a local file with the workflow name you‚Äôve specified. If that file does not exist, it will look for a public repository with the same name on GitHub (unless otherwise specified). If it is found, Nextflow will automatically pull the workflow to your global cache and execute it.\nBe aware of what is already in your current working directory where you launch your workflow, if there are other workflows (or configuration files) you may encounter unexpected results.\n\n\n\n\n\n\nChallenge\n\n\n\nExecute the hello workflow directly from nextflow-io GitHub repository.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse the run command to execute the nextflow-io/hello workflow:\nnextflow run nextflow-io/hello\n\n\n\n\nMore information about the Nextflow run command can be found here.\n\n\n\n1.1.8. Executing a revision\nWhen a Nextflow workflow is created or updated using GitHub (or another code repository), a new revision is created. Each revision is identified by a unique number, which can be used to track changes made to the workflow and to ensure that the same version of the workflow is used consistently across different runs.\nThe Nextflow info command can be used to view workflow properties, such as the project name, repository, local path, main script, and revisions. The * indicates which revision of the workflow you have stickied and will be executed when using the run command.\nnextflow info <workflow>\nIt is recommended that you use the revision flag every time you execute a workflow to ensure that the version is correct. To use a specific revision, you simply need to add it to the command line with the --revision or -r flag. For example, to run a workflow with the v1.0 revision, you would use the following command:\nnextflow run <workflow> -r v1.0\nNextflow automatically provides built-in support for version control using Git. With this, users can easily manage and track changes made to a workflow over time. A revision can be a git branch, tag or commit SHA number, and can be used interchangeably.\n\n\n\n\n\n\nChallenge\n\n\n\nExecute the hello workflow directly from the nextflow-io GitHub using the v1.1 revision tag.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nExecute the nextflow-io/hello workflow with the revision -r option:\nnextflow run nextflow-io/hello -r v1.1\n\nThe warning shown above is expected as the v1.1 workflow revision was written using an older version of Nextflow that uses the depreciated echo method. As both Nextflow and workflows are updated independently over time, workflows and Nextflow functions can get out of sync. While most nf-core workflows are now dsl2 (the current way of writing workflows), some are still written in dsl1 and may require older version of Nextflow to run.\n\n\n\nIf your local version of a workflow is not the latest you be shown a warning and will be required to use a revision flag when executing the workflow. You can update a workflow with the Nextflow pull command with a revision flag.\n\n\n\n1.1.9. Nextflow log\nIt is important to keep a record of the commands you have run to generate your results. Nextflow helps with this by creating and storing metadata and logs about the run in hidden files and folders in your current directory (unless otherwise specified). This data can be used by Nextflow to generate reports. It can also be queried using the Nextflow log command:\nnextflow log\nThe log command has multiple options to facilitate the queries and is especially useful while debugging a workflow and inspecting execution metadata. You can view all of the possible log options with -h flag:\nnextflow log -h\nTo query a specific execution you can use the RUN NAME or a SESSION ID:\nnextflow log <run name>\nTo get more information, you can use the -f option with named fields. For example:\nnextflow log <run name> -f process,hash,duration\nThere are many other fields you can query. You can view a full list of fields with the -l option:\nnextflow log -l\n\n\n\n\n\n\nChallenge\n\n\n\nUse the log command to view with process, hash, and script fields for your tasks from your most recent Nextflow execution.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse the log command to get a list of you recent executions:\nnextflow log\n\nQuery the process, hash, and script using the -f option for the most recent run:\nnextflow log crazy_faggin -f process,hash,script\n\n\n\n\n\n\n\n1.1.10. Execution cache and resume\nTask execution caching is an essential feature of modern workflow managers. As such, Nextflow provides an automated caching mechanism for every execution. When using the Nextflow -resume option, successfully completed tasks from previous executions are skipped and the previously cached results are used in downstream tasks.\nNextflow caching mechanism works by assigning a unique ID to each task. The task unique ID is generated as a 128-bit hash value composing the the complete file path, file size, and last modified timestamp. These ID‚Äôs are used to create a separate execution directory where the tasks are executed and the outputs are stored. Nextflow will take care of the inputs and outputs in these folders for you.\nA multi-step workflow is required to demonstrate cache and resume. The Sydney-Informatics-Hub/nf-core-demo workflow was created with the nf-core create command and has the same structure as nf-core workflows. It is a toy example with 3 processes:\n\nSAMPLESHEET_CHECK\n\nExecutes a custom python script to check the input sample sheet is valid.\n\nFASTQC\n\nExecutes FastQC using the .fastq.gz files from the sample sheet as inputs.\n\nMULTIQC\n\nExecutes MultiQC using the FastQC reports generated by the FASTQC process.\n\n\nThe Sydney-Informatics-Hub/nf-core-demo is a very small nf-core workflow. It uses real data and bioinformatics software and requires additional configuration to run successfully. To run this example you will need to include two profiles in your execution command. Profiles are sets of configuration options that can be accessed by Nextflow. Profiles will be explained in greater detail during the Configuring nf-core workflows section of the workshop.\nTo run this workflow, both the test profile and a software management profile (such as singularity) are required:\nnextflow run Sydney-Informatics-Hub/nf-core-demo -profile test,singularity\nThe command line output will print something like this:\n\nExecuting this workflow will create a work directory and a my_results directory with selected results files.\nIn the schematic above, the hexadecimal numbers, such as ff/21abfa, identify the unique task execution. These numbers are also the prefix of the work directories where each task is executed.\nYou can inspect the files produced by a task by looking inside the work directory and using these numbers to find the task-specific execution path:\nls -la work/ff/21abfa87cc7cdec037ce4f36807d32/\nThe files that have been selected for publication in the my_results folder can also be explored:\nls my_results\nIf you look inside the work directory of a FASTQC task, you will find the files that were staged and created when this task was executed:\n\nThe FASTQC process runs four times, executing in a different work directories for each set of inputs. Therefore, in the previous example, the work directory [1a/3c54ed] represents just one of the four sets of input data that was processed.\nTo print all the relevant paths to the screen, use the -ansi-log option can be used when executing your workflow:\nnextflow run Sydney-Informatics-Hub/nf-core-demo -profile test,singularity -ansi-log false\nIt‚Äôs very likely you will execute a workflow multiple times as you find the parameters that best suit your data. You can save a lot of spaces (and time) by resuming a workflow from the last step that was completed successfully and/or unmodified.\nBy adding the -resume option to your run command you can use the cache rather than re-running successful tasks:\nnextflow run Sydney-Informatics-Hub/nf-core-demo -profile test,singularity -resume\nIf you run the Sydney-Informatics-Hub/nf-core-demo workflow again without making any changes you will see that the cache is used:\n\nIn practical terms, the workflow is executed from the beginning. However, before launching the execution of a process, Nextflow uses the task unique ID to check if the work directory already exists and that it contains a valid command exit state with the expected output files. If this condition is satisfied, the task execution is skipped and previously computed results are used as the process results.\nNotably, the -resume functionality is very sensitive. Even touching a file in the work directory can invalidate the cache.\n\n\n\n\n\n\nChallenge\n\n\n\nInvalidate the cache by touching a .fastq.gz file in a FASTQC task work directory (you can use the touch command). Execute the workflow again with the -resume option to show that the cache has been invalidated.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nExecute the workflow for the first time (if you have not already).\nnextflow run Sydney-Informatics-Hub/nf-core-demo -profile test,singularity\nUse the task ID shown for the FASTQC process and use it to find and touch a the sample1_R1.fastq.gz file:\ntouch work/ff/21abfa87cc7cdec037ce4f36807d32/sample1_R1.fastq.gz\nExecute the workflow again with the -resume command option:\nnextflow run Sydney-Informatics-Hub/nf-core-demo -profile test,singularity -resume\nYou should that 2 of 4 tasks for FASTQC and the MULTIQC task were invalid and were executed again.\nWhy did this happen?\nIn this example, the cache of two FASTQC tasks were invalid. The sample1_R1.fastq.gz file is used by in the samplesheet twice. Thus, touching the symlink for this file and changing the date of last modification disrupted two task executions.\n\n\n\nYour work directory can get very big very quickly (especially if you are using full sized datasets). It is good practise to clean your work directory regularly. Rather than removing the work folder with all of it‚Äôs contents, the Nextflow clean function allows you to selectively remove data associated with specific runs.\nnextflow clean -help\n\nThe -after, -before, and -but options are all very useful to select specific runs to clean. The -dry-run option is also very useful to see which files will be removed if you were to -force the clean command.\n\n\n\n\n\n\nChallenge\n\n\n\nYou Nextflow to clean your work work directory of staged files but keep your execution logs.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse the Nextflow clean command with the -k and -f options:\nnextflow clean -k -f\n\n\n\n\n\n\n1.1.11. Listing and dropping cached workflows\nOver time, you might want to remove a stored workflows. Nextflow also has functionality to help you to view and remove workflows that have been pulled locally.\nThe Nextflow list command prints the projects stored in your global cache folder ($HOME/.nextflow/assets). These are the workflows that were pulled when you executed either of the Nextflow pull or run commands:\nnextflow list\nIf you want to remove a workflow from your cache you can remove it using the Nextflow drop command:\nnextflow drop <workflow>\n\n\n\n\n\n\nChallenge\n\n\n\nView your cached workflows with the Nextflow list command and remove the nextflow-io/hello workflow with the drop command.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nList your workflow assets:\nnextflow list\nDrop the nextflow-io/hello workflow:\nnextflow drop nextflow-io/hello\nCheck it has been removed:\nnextflow list\n\n\n\n\n\n\n\n\n\n\nKey points\n\n\n\n\nNextflow is a workflow orchestration engine and domain-specific language (DSL) that makes it easy to write data-intensive computational workflows.\nEnvironment variables can be used to control your Nextflow runtime and the underlying Java virtual machine.\nNextflow supports version control and has automatic integrations with online code repositories.\nNextflow will cache your runs and they can be resumed with the -resume option.\nYou can manage workflows with Nextflow commands (e.g., pull, clone, list, and drop).\n\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/2.5_extArgs.html",
    "href": "notebooks/2.5_extArgs.html",
    "title": "2.5. Passing external arguments to a process",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/1.3_configure.html",
    "href": "notebooks/1.3_configure.html",
    "title": "Configuring nf-core workflows",
    "section": "",
    "text": "Objectives\n\n\n\n\nLearn about the structure of an nf-core workflow.\nLearn how to customize the execution of an nf-core workflow.\nCustomize a toy example of an nf-core workflow.\n\n\n\n\n\n1.3.1. Workflow structure\nnf-core workflows follow a set of best practices and standardized conventions. nf-core workflows start from a common template and follow the same structure. Although you won‚Äôt need to edit code in the workflow project directory, having a basic understanding of the project structure and some core terminology will help you understand how to configure its execution.\n\nNextflow DSL2 workflows are built up of subworkflows and modules that are stored as separate .nf files.\n\nMost nf-core workflows consist of a single workflow file (there are a few exceptions). This is the main <workflow>.nf file that is used to bring everything else together. Instead of having one large monolithic script, it is broken up into a combination of subworkflows and modules.\nA subworkflow is a groups of modules that are used in combination with each other and have a common purpose. For example, the SAMTOOLS_STATS, SAMTOOLS_IDXSTATS, and SAMTOOLS_FLAGSTAT modules are all included in the BAM_STATS_SAMTOOLS subworkflow. Subworkflows improve workflow readability and help with the reuse of modules within a workflow. Within a nf-core workflow, a subworkflow can be an nf-core subworkflow or as a local subworkflow. Like an nf-core workflow, an nf-core subworkflow is developed by the community is shared in the nf-core subworkflows GitHub repository. Local subworkflows are workflow specific that are not shared in the nf-core subworkflows repository.\nA module is a wrapper for a process, the basic processing primitive to execute a user script. It can specify directives, inputs, outputs, when statements, and a script block. Most modules will execute a single tool in the script block and will make use of the directives, inputs, outputs, and when statements dynamically. Like subworkflows, modules can also be developed and shared in the nf-core modules GitHub repository or stored as a local module. All modules from the nf-core repository are version controlled and tested to ensure reproducibility. Local modules are workflow specific that are not shared in the nf-core modules repository.\n\n\n\n1.3.2. Configuration\nEach nf-core workflow has its own configuration and parameter defaults. The default parameters are required for testing as the workflow is being developed and when it is pushed to GitHub. While the workflow configuration defaults are a great place to start, you will almost certainly want to modify these to fit your own purposes and system requirements.\nWhen a workflow is launched, Nextflow will look for configuration files in several locations. As each configuration file can contain conflicting settings, the sources are ranked to decide which settings to apply. Configuration sources are reported below and listed in order of priority:\n\nParameters specified on the command line (--parameter)\nParameters that are provided using the -params-file option\nConfig file that are provided using the -c option\nThe config file named nextflow.config in the current directory\nThe config file named nextflow.config in the workflow project directory\nThe config file $HOME/.nextflow/config\nValues defined within the workflow script itself (e.g., main.nf)\n\n\n\n\n\n\n\nWarning\n\n\n\nIMPORTANT: nf-core workflow parameters must be passed via the command line (--<parameter>) or Nextflow -params-file option. Custom config files, including those provided by the -c option, can be used to provide any configuration except for parameters.\n\n\nNotably, while some of these files are already included in the nf-core workflow repository (e.g., the nextflow.config file in the nf-core workflow repository), others are automatically identified on your local system (e.g., the nextflow.config in the launch directory), and others are only included if they are specified using run options (e.g., -params-file, and -c). Understanding how and when these files are interpreted by Nextflow is critical for the accurate configuration of a workflows execution.\n\n\n\n1.3.3. Viewing parameters\nEvery nf-core workflow has a full list of parameters on the nf-core website. When viewing these parameters online, you will also be shown a description and the type of the parameter. Some parameters will have additional text to help you understand when and how a parameter should be used.\n\n\n\n\n\nParameters and their descriptions can also be viewed in the command line using the run command with the --help parameter:\nnextflow run nf-core/<workflow> --help\n\n\n\n\n\n\nChallenge\n\n\n\nView the parameters for the Sydney-Informatics-Hub/nf-core-demo workflow using the command line:\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe Sydney-Informatics-Hub/nf-core-demo workflow parameters can be printed using the run command and the --help option:\nnextflow run Sydney-Informatics-Hub/nf-core-demo --help\n\n\n\n\n\n\n1.3.4. Parameters in the command line\nAt the highest level, parameters can be customized using the command line. Any parameter can be configured on the command line by prefixing the parameter name with a double dash (--):\nnextflow nf-core/<workflow> --<parameter>\n\n\n\n\n\n\nTip\n\n\n\nNextflow options are prefixed with a single dash (-) and workflow parameters are prefixed with a double dash (--).\n\n\nDepending on the parameter type, you may be required to add additional information after your parameter flag. For example, for a string parameter, you would add the string after the parameter flag:\nnextflow nf-core/<workflow> --<parameter> string\n\n\n\n\n\n\nChallenge\n\n\n\nGive the MultiQC report for the Sydney-Informatics-Hub/nf-core-demo workflow the name of your favorite animal using the multiqc_title parameter using a command line flag:\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nAdd the --multiqc_title flag to your command and execute it. Use the -resume option to save time:\nnextflow run Sydney-Informatics-Hub/nf-core-demo --multiqc_title koala -resume\nIn this example, you can check your parameter has been applied by listing the files created in the results folder (my_results):\nls my_results/multiqc/\n--multiqc_title is a parameter that directly impacts a result file. For parameters that are not as obvious, you may need to check your log to ensure your changes have been applied. You can not rely on the changes to parameters printed to the command line when you execute your run:\nnextflow log\nnextflow log <run name> -f \"process,script\"\n\n\n\n\n\n\n1.3.5. Default configuration files\nAll parameters will have a default setting that is defined using the nextflow.config file in the workflow project directory. By default, most parameters are set to null or false and are only activated by a profile or configuration file.\nThere are also several includeConfig statements in the nextflow.config file that are used to include additional .config files from the conf/ folder. Each additional .config file contains categorized configuration information for your workflow execution, some of which can be optionally included:\n\nbase.config\n\nIncluded by the workflow by default.\nGenerous resource allocations using labels.\nDoes not specify any method for software management and expects software to be available (or specified elsewhere).\n\nigenomes.config\n\nIncluded by the workflow by default.\nDefault configuration to access reference files stored on AWS iGenomes.\n\nmodules.config\n\nIncluded by the workflow by default.\nModule-specific configuration options (both mandatory and optional).\n\ntest.config\n\nOnly included if specified as a profile.\nA configuration profile to test the workflow with a small test dataset.\n\ntest_full.config\n\nOnly included if specified as a profile.\nA configuration profile to test the workflow with a full-size test dataset.\n\n\nNotably, configuration files can also contain the definition of one or more profiles. A profile is a set of configuration attributes that can be activated when launching a workflow by using the -profile command option:\nnextflow run nf-core/<workflow> -profile <profile>\nProfiles used by nf-core workflows include:\n\nSoftware management profiles\n\nProfiles for the management of software using software management tools, e.g., docker, singularity, and conda.\n\nTest profiles\n\nProfiles to execute the workflow with a standardized set of test data and parameters, e.g., test and test_full.\n\n\nMultiple profiles can be specified in a comma-separated (,) list when you execute your command. The order of profiles is important as they will be read from left to right:\nnextflow run nf-core/<workflow> -profile test,singularity\nnf-core workflows are required to define software containers and conda environments that can be activated using profiles. Although it is possible to run the workflows with software installed by other methods (e.g., environment modules or manual installation), using Docker or Singularity is more convenient and more reproducible.\n\n\n\n\n\n\nTip\n\n\n\nIf you‚Äôre computer has internet access and one of Conda, Singularity, or Docker installed, you should be able to run any nf-core workflow with the test profile and the respective software management profile ‚Äòout of the box‚Äô. The test data profile will pull small test files directly from the nf-core/test-data GitHub repository and run it on your local system. The test profile is an important control to check the workflow is working as expected and is a great way to trial a workflow. Some workflows have multiple test profiles for you to test.\n\n\n\n\n\n1.3.6. Shared configuration files\nAn includeConfig statement in the nextflow.config file is also used to include custom institutional profiles that have been submitted to the nf-core config repository. At run time, nf-core workflows will fetch these configuration profiles from the nf-core config repository and make them available.\nFor shared resources such as an HPC cluster, you may consider developing a shared institutional profile. You can follow this tutorial for more help.\n\n\n\n\n\n\nTip\n\n\n\nPawsey has a shared profile that can be used to run workflows.\n\n\n\n\n\n1.3.7. Custom configuration files\nNextflow will also look for custom configuration files that are external to the workflow project directory. These files include:\n\nThe config file $HOME/.nextflow/config\nA config file named nextflow.config in your current directory\nCustom files specified using the command line\n\nA parameter file that is provided using the -params-file option\nA config file that are provided using the -c option\n\n\nYou don‚Äôt need to use all of these files to execute your workflow.\nParameter files\nParameter files are .json files that can contain an unlimited number of parameters:\n{\n   \"<parameter1_name>\": 1,\n   \"<parameter2_name>\": \"<string>\",\n   \"<parameter3_name>\": true\n}\nYou can override default parameters by creating a custom .json file and passing it as a command-line argument using the -param-file option.\nnextflow run nf-core/<workflow> -profile test,docker -param-file <path/to/params.json>\n\n\n\n\n\n\nChallenge\n\n\n\nGive the MultiQC report for the Sydney-Informatics-Hub/nf-core-demo workflow the name of your favorite food using the multiqc_title parameter in a parameters file:\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nCreate a custom .json file that contains your favourite food, e.g., cheese:\n{\n   \"multiqc_title\": \"cheese\"\n}\nInclude the custom .json file in your execution command with the -params-file option:\nnextflow run Sydney-Informatics-Hub/nf-core-demo -resume -params-file my_custom_params.json\nCheck that it has been applied:\nls my_results/multiqc/\n\n\n\nConfiguration files\nConfiguration files are .config files that can contain various workflow properties. Custom paths passed in the command-line using the -c option:\nnextflow run nf-core/<workflow> -profile test,docker -c <path/to/custom.config>\nMultiple custom .config files can be included at execution by separating them with a comma (,).\nCustom configuration files follow the same structure as the configuration file included in the workflow directory. Configuration properties are organized into scopes by dot prefixing the property names with a scope identifier or grouping the properties in the same scope using the curly brackets notation. For example:\nalpha.x  = 1\nalpha.y  = 'string value..'\nIs equivalent to:\nalpha {\n     x = 1\n     y = 'string value..'\n}\nScopes allow you to quickly configure settings required to deploy a workflow on different infrastructure using different software management. For example, the executor scope can be used to provide settings for the deployment of a workflow on a HPC cluster. Similarly, the singularity scope controls how Singularity containers are executed by Nextflow. Multiple scopes can be included in the same .config file using a mix of dot prefixes and curly brackets. A full list of scopes is described in detail here.\n\n\n\n\n\n\nChallenge\n\n\n\nGive the MultiQC report for the Sydney-Informatics-Hub/nf-core-demo workflow the name of your favorite color using the multiqc_title parameter in a custom .config file:\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nCreate a custom .config file that contains your favourite colour, e.g., blue:\nparams.multiqc_title = \"blue\"\nInclude the custom .config file in your execution command with the -c option:\nnextflow run Sydney-Informatics-Hub/nf-core-demo -resume -c my_custom_config.config\nCheck that it has been applied:\nls my_results/multiqc/\nWhy did this fail?\nYou can not use the params scope in custom configuration files. Parameters can only be configured using the -params-file option and the command line. While it parameter is listed as a parameter on the STDOUT, it was not applied to the executed command:\nnextflow log\nnextflow log <run name> -f \"process,script\"\n\n\n\nThe process scope allows you to configure workflow processes and is used extensively to define resources and additional arguments for modules.\nBy default, process resources are allocated in the conf/base.config file using the withLabel selector:\nprocess {\n    withLabel: BIG_JOB {\n        cpus = 16\n        memory = 64.GB\n    }\n}\nSimilarly, the withName selector enables the configuration of a process by name. By default, module parameters are defined in the conf/modules.config file:\nprocess {\n    withName: MYPROCESS {\n        cpus = 4\n        memory = 8.GB\n    }\n}\nWhile some tool arguments are included as a part of a module. To make modules sharable across workflows, most tool arguments are defined in the conf/modules.conf file in the workflow code under the ext.args entry.\nFor example, if you were trying to add arguments in the MULTIQC process in the Sydney-Informatics-Hub/nf-core-demo workflow, you could use the process scope:\nprocess {\n    withName : \".*:MULTIQC\" {\n        ext.args   = { \"<your custom parameter>\" }\n\n    }\nHowever, if a process is used multiple times in the same workflow, an extended execution path of the module may be required to make it more specific:\nprocess {\n    withName: \"NFCORE_DEMO:DEMO:MULTIQC\" {\n        ext.args = \"<your custom parameter>\"\n    }\n}\nThe extended execution path is built from the workflows, subworkflows, and modules used to execute the process.\nIn the example above, the nf-core MULTIQC module, was called by the DEMO workflow, which was called by the NFCORE_DEMO workflow in the main.nf file.\n\n\n\n\n\n\nTip\n\n\n\nIt can be tricky to evaluate the path used to execute a module. If you are unsure of how to build the path you can copy it from the conf/modules.conf file. How arguments are added to a process can also vary. Be vigilant when you are modifying parameters.\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nCreate a new .config file that uses the process scope to overwrite the args for the MULTIQC process. Change the args to your favourite month of the year, e.g, \"--title \\\"october\\\"\".\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nMake a custom config file that uses the process scope to replace the args for the MULTIQC process:\nprocess {\n    withName: \"NFCORE_DEMO:DEMO:MULTIQC\" {\n        ext.args = \"--title \\\"october\\\"\"\n    }\n}\nExecute your run command again with the custom configuration file:\nnextflow run Sydney-Informatics-Hub/nf-core-demo -c my_custom_config.config -resume\nCheck that it has been applied:\nls my_results/multiqc/\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nDemonstrate the configuration hierarchy using the Sydney-Informatics-Hub/nf-core-demo workflow by adding a params file (-params-file), and a command line flag (--multiqc_title) to your execution. You can use the files you have already created.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse the .json file you created previously:\n{\n   \"multiqc_title\": \"cheese\"\n}\nExecute your command with your params file (-params-file) and a command line flag (--multiqc_title):\nnextflow run Sydney-Informatics-Hub/nf-core-demo -resume -params-file my_custom_params.json --multiqc_title \"koala\"\nIn this example, as the command line is at the top of the hierarchy, the multiqc_title will be ‚Äúkoala‚Äù.\n\n\n\n\n\n\n\n\n\n\nKey points\n\n\n\n\nnf-core workflows follow a similar structure.\nnf-core workflows are configured using multiple configuration sources.\nConfiguration sources are ranked to decide which settings to apply.\nWorkflow parameters must be passed via the command line (--<parameter>) or Nextflow -params-file option.\n\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/0.0_welcome.html",
    "href": "notebooks/0.0_welcome.html",
    "title": "Welcome to the workshop!",
    "section": "",
    "text": "In this workshop, we explore Nextflow and nf-core as powerful tools for bioinformatics data processing pipelines. Our goal for this workshop is to provide you with foundational knowledge required to understand the code base of any nf-core pipeline and responsibly apply and customise an nf-core pipelines to your own research.\nThese sessions will be a challenging but rewarding experience that will provide you with an opportunity to develop your skills and get exposure to key concepts in Nextflow. Even if you are already familiar with Nextflow and have some experience with nf-core pipelines, it will take you time and practice beyond this workshop to fully understand the concepts and terminology laid out here.\n\nLesson plan\n\n\n\n\n\n\n\n\nSession\nLesson\nOutcomes\n\n\n\n\n1.\n1. Introduction to Nextflow\nUnderstand core features of Nextflow and learn fundamental Nextflow options and features.\n\n\n\n2. Introduction to nf-core\nUnderstand core features of nf-core and learn how to use nf-core tools utility.\n\n\n\n3. Configuring nf-core workflows\nUnderstand the structure of an nf-core pipeline and the use of customisation options.\n\n\n\n4. Commands for users\nApply the nf-core tools utility‚Äôs list, download, and launch commands.\n\n\n\n\n\n\n\n2.\n1. Design a run command\nBuild a run command for the nf-core/rnaseq pipeline using required and optional parameters.\n\n\n\n2. Reproducible parameters\nTroubleshoot a pipeline warning message and apply a params file to track our parameters.\n\n\n\n3. Configure compute resources\nConfigure compute resources for the workflow using a custom configuration file.\n\n\n\n4. Apply multiple configurations\nApply multiple configuration files to customise various pipeline settings for the same run.\n\n\n\n5. Apply additional arguments\nSupply external arguments to a process that are not preset as pipeline parameters.\n\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/2.4_multiConfig.html",
    "href": "notebooks/2.4_multiConfig.html",
    "title": "2.4. Using multiple configuration files at once",
    "section": "",
    "text": "Objectives\n\n\n\n\nCreate and apply custom configuration files for:\n\nCustomised resource tracing\nBespoke MultiQC report formatting\nOver-riding the default container for a tool\nAdding tool arguments that are not available as nf-core parameters\n\nApply multiple custom configuration files in a single workflow execution with -c <conf-1,conf2,...>\n\n\n\nUsing multiple configuration files allows you to customise nf-core pipelines to your specific needs. They can be applied in a modular fashion, where custom configs can be added to or dropped from a pipeline execution only as required.\nThis flexibility ensures that we preserve the portability and reproducibility of nf-core pipelines by not editing the core workflow code to make bespoke customisations.\nIn this lesson we will create four custom configuration files for different customisation scenarios, and apply them to the one run command. \n\n2.4.1. Customised resource tracing\nRunning Nextflow workflows with the option -with-trace writes a trace report named trace.txt in the working directory.\nnf-core pipelines by default create an execution_trace file within <outdir>/pipeline_info. A trace report can be customised to include any combination of available fields using the Nextflow -fields flag.\nIf there is a specific combination of fields you would like to regularly capture for your pipeline runs, perhaps for resource benchmarking, it would be useful to have a custom configuration file that can be optionally applied to any run, to save having to extract this information later.\nIn this exercise, we will create a custom configuration file that writes a detailed resource tracing file with our custom fields.\nUnlike our institutional config custom-nimbus.config, which is required for our run in order to access tools through Singularity and restrict resource use to what we have on our VM, this config will be optional and portable:\n\nWe can apply it only as needed\nWe can apply it to any nf-core pipeline\nWe can apply it to nf-core runs on any machine\n\n\n‚û§ To practise, extract some custom fields from a previous run using the nextflow log command.\n\n\n\n\n\n\nChallenge\n\n\n\nUsing the trace report fields, write a nextflow log command to query the following for a previous workflow run:\n\nTask name\nTask status\nTask exit status\nTask execution time (realtime)\nNumber of cpus requested for the task\nPercentage of CPU used by the process (use pcpu rather than %cpu)\nAmount of memory requested for the task\nPercentage of memory used by the process (use pmem rather than %mem)\nResident set size of the process (rss)\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nFirst, run nextflow log with no arguments to obtain the name of your last run (unless you can remember it!)\nnextflow log | tail -1\nThen, supply that run name to the command below:\nnextflow log <run_name> -f name,status,exit,realtime,cpus,pcpu,memory,pmem,rss\n\n\n\n\nLet‚Äôs make a portable configuration file for resource tracing that we can share with collaborators and use across multiple pipelines ü§ù\n‚û§ Open a file for editing called custom-trace.config and add the following content:\n\n\n\n\n\n\nSyntax pointers\n\n\n\n\ntrace_timestamp variable is used to avoid output filename clashes\nenabled = true is equivalent to adding the Nextflow command line option -with-trace\noutput file is saved in directory specified by nf-core parameter outdir\nNote that we need to use %cpu and %mem, as per the Nextflow documentation, and not pcpu and pmem as we applied on the command line due to this issue\n\n\n\n// Define timestamp, to avoid overwriting existing trace \ndef trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')\n\n// Generate custom resource trace file \ntrace {\n  enabled = true \n  file = \"${params.outdir}/custom-resource-trace-${trace_timestamp}.txt\"\n  fields = 'name,status,exit,realtime,cpus,%cpu,memory,%mem,rss'\n}\n\n‚û§ Before submitting your run, delete or comment out the withName: '.*:RNASEQ:ALIGN_STAR:STAR_ALIGN' block we applied in the custom-nimbus.config file\n\nIn Nextflow, use // for single line comments or /* .. */ to comment a block on multiple lines \n\n‚û§ Save both configs and resume your previous run, adding our second custom config custom-trace.config at -c and setting outdir to Lesson-2.4.1:\n\n\n\n\n\n\nSpecify multiple configs\n\n\n\nWhen adding multiple custom configs, we supply them to -c in a comma-delimited list\n\n\nnextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \\\n  -profile workshop \\\n  -c custom-nimbus.config,custom-trace.config \\\n  -params-file workshop-params.yaml \\\n  --outdir Lesson-2.4.1 \\\n  -resume \nüëÄ Notice that your multiple custom configurations are listed under Core Nextflow options on the launch log printed to the screen:   \n‚û§ Once the workflow has run, take a look at the Lesson-2.4.1/custom-resource-trace-${trace_timestamp}.txt file:\nüëÄ Notice that while the status is CACHED, the resources reported are from the actual compute required to execute the process, and not the time this execution took to restore the data from cache\n \n\n\n2.4.2. Configure MultiQC reports\nMany nf-core pipelines use MultiQC to generate a summary report at the end of a workflow. MultiQC is a reporting tool that can aggregate results and statistics output by various bioinformatics tools, helping to summarise experiments containing multiple samples and multiple analysis steps.\nMultiQC allows users the flexibility of customising the output reports.\nnf-core has enabled users to take full advantage of this functionality through the inclusion of the --multiqc_config parameter.\n\n\n\n\n\n\nHidden nf-core parameters\n\n\n\nThe --multiqc_config parameter is a ‚Äòhidden param‚Äô! To see this parameter, you need to apply --show_hidden_params on the command line help, or select ‚ÄòShow hidden params‚Äô on the nf-core parameters webpage\n\n\n\nWe are going to create a custom MultiQC config to:\n\nOverlay a theoretical GC content track specific for our mm10 reference genome\nAdd a custom report header \n\n‚û§ Open a file for editing named custom-multiqc-config.yaml and add the following content:\n\n\n\n\n\n\nTip\n\n\n\nYou can add any fields under the report_header_info section, as long as you follow the required formatting\n\n\n# Project level information:\nreport_header_info:\n  - Contact E-mail: \"cali.willet@sydney.edu.au\"\n  - Workshop host: \"Australian BioCommons\"\n  - Workshop title: \"Unlocking nf-core - customising workflows for your research\"\n  - Workshop URL: https://sydney-informatics-hub.github.io/customising-nfcore-workshop/\n  - Sample data: Mouse RNAseq from https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-016-2801-4 \n\n# Theoretical GC Content:\nfastqc_config:  \n  fastqc_theoretical_gc: \"mm10_txome\" \n\n‚û§ To the workshop-params.yaml file, add:\nmultiqc_config: \"custom-multiqc-config.yaml\" \n\n‚û§ Make sure both YAML files are saved, then re-run the workflow:\n\n\n\n\n\n\nChallenge\n\n\n\nCan you construct the run command without viewing the solution below?\nüí° Think about nf-core parameters versus Nextflow configuration files\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWe do not need to add our MultiQC YAML config at the Nextflow option -c because we have provided it as a value to the nf-core parameter multiqc_config within workshop-params.yaml\nnextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \\\n  -profile workshop \\\n  -c custom-nimbus.config,custom-trace.config \\\n  -params-file workshop-params.yaml \\\n  --outdir Lesson-2.4.2 \\\n  -resume\n\n\n\n\n‚û§ View the html file Lesson-2.4.2/multiqc/star_salmon/multiqc_report.html and compare it to the report generated by a previous run:\n\n\n\n\n\n\nReminder: Viewing the MultiQC HTML\n\n\n\n\nIf you are using VS Code with the ‚ÄòLive Server‚Äô extension installed, right click the html file in the Explorer pane and select ‚ÄòOpen with Live Server‚Äô\nIf you are using a terminal without a browser GUI enabled, use eg scp command to take a copy to your local computer and open in your preferred browser\n\n\n\nNavigate to the section titled FastQC: Per Sequence GC Content. Compare the two plots to observe the custom track has been successfully added.\n \nüëÄ This track has shown that our sample transcriptomes follow a normal distribution consistent with the mm10 reference. \n\n\n\n\n\n\nChallenge\n\n\n\nIf we did detect GC bias, how could we customise our run to correct for this?\nüèãÔ∏è This is a tricky one, particularly if you are unfamiliar with RNAseq analysis!\nüí° So here is a freebie to get you started: correcting for GC bias in this analysis requires operation at the transcript quantification step, which is performed by the SALMON_QUANT module\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nCheck the tool documentation for salmon: we need to apply the --gcBias flag\nCheck the available nf-core parameters for the rnaseq pipeline: we find that there is no nf-core parameter addressing GC bias!\nHowever, the astute observer would discover a parameter --extra_salmon_quant_args with description ‚ÄòExtra arguments to pass to Salmon quant command in addition to defaults defined by the pipeline‚Äô. Sounds perfect, yes?!\nWe can then provide the required salmon flag (and any others we needed) as an argument to the nf-core --extra_salmon_quant_args parameter, wrapped in quotes, supplying the parameter to the run as we would any other nf-core parameter (either on the command line or within a parameters file):\n\n# Within parameters YAML file:\nextra_salmon_quant_args : '--gcBias'\n\n# On the command line - note the intentional inclusion of whitespace inside the quotes:\n--extra_salmon_quant_args '--gcBias '\n\n\n\n\nüò± What would we do if the above solution was not available within our chosen nf-core pipeline?\nWe will cover this in Lesson 2.4.4 Apply external arguments! üòé\n\n\n\n2.4.3. Configure your run to use a non-default container\n\n\n\n\n\n\nCaveat\n\n\n\nNote that for deploying nf-core workflows, it is not recommended to replace the tools within the workflow, as this will decrease portability and reproducibilty! This exercise is to demonstrate how you can specify containers, as this may aid you in developing and testing your own Nextflow workflows or testing new tool versions\n\n\nFor this example, let‚Äôs assume we want to test out the latest version of Trim Galore, which is newer than the default version of Trim Galore used by version 3.11.1 of nf-core/rnaseq.\nAs can often be the case in programming, TIMTOWTDI!\nGiven what you have learnt about custom configuration files so far, take a moment to think about the optimal method to use for this customisation.\n\n\n\n\n\n\nThoughts? üí≠\n\n\n\nFor maintaining portability and reproducibility, what is the best way to specify our custom Trim Galore container when we execute the nf-core/rnaseq pipeline?\na) Within the custom-nimbus.config institutional config file. It‚Äôs already working well on our platform, so we can build on it for further customisations without issue.\nb) Within a separate custom config file named custom-trimgalore-version.config. We would then apply it at -c along with our institutional config whenever it was required.\nc) Within the Trim Galore main.nf file. This way, we don‚Äôt need to worry about adding another custom config when we execute the run command.\n\n\n\n\nüõë\n\nIn the event that we are testing a different tool version, this should not be placed within the institutional config that is shareable with others using nf-core pipelines on the same infrastructure. Doing so would prevent our institutional config from being portable to other analyses.\nIn general, editing the process main.nf file is not recommended, as this impedes reproducibility. Swapping out tool versions is a bespoke adaptation of the nf-core workflow that would harm reproducibility if it was inadvertently executed, which is likely to happen if it is hidden within the source code.\nBy placing it within a clearly named custom config file, there is less chance of unwittingly executing a workflow that does not match the expected utilisation of tools. Whenever we run an nf-core pipeline, the custom configs we applied are listed under Core Nextflow options in the run log, so there is a record that the particular configuration file was applied. Take care to save any custom configuration files applied to a run along with the project outputs, and to use an informative config name.\n\n\n‚û§ Identify the default version of Trim Galore that has been used in our runs so far from the software_versions.yml file:\n\nVersions of all tools used in nf-core pipelines are reported in the default output file <outdir>/pipeline_info/software_versions.yml\nThis information is also shown in the ‚Äònf-core/rnaseq Software Versions‚Äô section of the MultiQC html report\n\nYou might view the software_versions.yml file by opening it from the VS Code explorer pane, using more command, or grep for the tool name\nThe module names are listed in alphabetical order, with the tools and versions used by the process listed below each module\n\nmore Lesson-2.4.2/pipeline_info/software_versions.yml\n\n##\n#TRIMGALORE:\n#  cutadapt: '3.4'\n#  trimgalore: 0.6.7\n#\n\n\n\n\n\n\nIf you have not yet run this version of the pipeline\n\n\n\n‚Ä¶and thus do not have a software_versions.yaml or MultiQC report to check, one way to discover the default tool version is to look in the process main.nf file:\ngrep container nf-core-rnaseq-3.11.1/workflow/modules/nf-core/trimgalore/main.nf \n\n##\n#    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n#        'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' }\"\n##\nThis should not often be the case, as nf-core pipelines should first be run with a test dataset before executing your full run and delving into custom configuration.\nnf-core pipelines ship with test datasets to enable easy testing on your infrastructure with eg nextflow run <workflow> -profile singularity,test\n\n\n\n‚û§ Identify the container path for Trim Galore v. 0.6.10 hosted at CernVM-FS:\n\n\n\n\n\n\nBiocontainers at cvmfs\n\n\n\n\nRecall that we have been accessing our training materials from CernVM-FS\nCernVM-FS is a read-only filesystem providing access to common bioinformatics reference datasets and Singularity Biocontainers\nCernVM-FS comes pre-mounted on Pawsey Nimbus VMs using the Pawsey Bio - Ubuntu 22.04 - 2023-03 image\nContainers are mounted at the path /cvmfs/singularity.galaxyproject.org, with sub-directories based on the first 2 letters of the tool name, eg /cvmfs/singularity.galaxyproject.org/t/r/ for Trim Galore containers\n\n\n\nls /cvmfs/singularity.galaxyproject.org/t/r/trim*\n\n##\n#  /cvmfs/singularity.galaxyproject.org/t/r/trim-galore:0.6.10--hdfd78af_0\n##\n\n‚û§ Next, identify the execution path for the TRIMGALORE module:\ngrep -i galore nf-core-rnaseq-3.11.1/workflow/conf/modules.config \n\n##\n#    if (params.trimmer == 'trimgalore') {\n#            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {\n#    if (params.trimmer == 'trimgalore') {\n#            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {\n#                        params.extra_trimgalore_args ? params.extra_trimgalore_args.split(\"\\\\s(?=--)\") : ''\n##\n\n‚û§ Open a file for editing named custom-trimgalore-version.config, and start building your config with the process scope and withName selector that we covered in Lesson 2.3.5:\nprocess {\n  withName: {\n\n  }\n}\n\n‚û§ Then copy the TRIMGALORE module execution path from your terminal inside the withName block:\n\nMake sure to copy the module for TRIMGALORE and not FASTQC which are both within the same SUBWORKFLOW\n\nprocess {\n  withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {\n\n  }\n}\n\n‚û§ Finally, copy the full container path inside the withName block:\n\n\n\n\n\n\n\n\n\n\nOther remote container sources can be used, such as quay.io, or point to a local image if your machine does not have internet access\n\n\nprocess {\n  withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {\n    container = '/cvmfs/singularity.galaxyproject.org/t/r/trim-galore:0.6.10--hdfd78af_0' \n  }\n}\n\n‚û§ Save custom-trimgalore-version.config then resume the previous run, supplying our three configuration files at -c and specifying --outdir Lesson-2.4.3:\n nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \\\n  -profile workshop \\\n  -c custom-nimbus.config,custom-trace.config,custom-trimgalore-version.config \\\n  -params-file workshop-params.yaml \\\n  --outdir Lesson-2.4.3 \\\n  -resume \n\n\n\n\n\n\n‚åõ\n\n\n\nBecause we have altered a pre-processing step, read trimming and all downstream steps will need to be re-computed. Our run will take ~ 10 minutes to complete.\nFor now we will skip forward to the next lesson and check on the results of this lesson a little later.\n‚û§ Leave the run command running in your terminal, and open a new terminal (if you are in VS Code, do this by clicking the + icon in the top right corner of your terminal)\n\nRun the nextflow log command with no arguments. Observe that this command is applicable to the working directory, not the session.\n\n\n\n\n‚û§ After your run has completed, check that the updated version of Trim Galore has been used:\ngrep -i galore Lesson-2.4.3/pipeline_info/software_versions.yml\n\n##\n#TRIMGALORE:\n#  trimgalore: 0.6.10\n##\n\ngrep -i galore Lesson-2.4.2/pipeline_info/software_versions.yml \n\n##\n#TRIMGALORE:\n#  trimgalore: 0.6.7\n##\n\n\n\n2.4.4. Apply external arguments\nMandatory minimum arguments that a tool needs to run are hard-coded within the main.nf file of the nf-core module.\nOptional arguments for a tool that are commonly changed are usually included as nf-core workflow parameters, so they can be easily customised on the command line or supplied within a parameters file.\nAs we are all aware, bioinformatics tools can have a lot of optional arguments. It is not feasible for nf-core to paramaterise all of these arguments‚Ä¶\n\n\nIn this lesson, we will learn how to apply any argument for a tool that is not explicitly covered by an nf-core workflow parameter using Nextflow‚Äôs ext directive. \n‚û§ Consider the diagram below:\n\nOn the left of the diagram is an example of the standard main.nf format of a process named example stored in the modules directory\n\nAbove the script block, the $args variable is defined\nThe task.ext.args ?: '' expression checks if the ext.args parameter has already been defined\nIf it isn‚Äôt defined it will assign an empty string\nInside the script block, the $args variable is applied to the tool command\n\nIn the middle of the diagram is a custom configuration file targeting the ‚ÄòEXAMPLE‚Äô process\n\nThis configuration file gives the tool-specific argument --flag1 to ext.args using withName\n\nOn the right of the diagram we see how the tool command is executed if -c example-custom.config was applied to the run\n\nThe $args variable is interpolated to --flag1 when modules/example/main.nf is executed \n\n\n \nüëÄ You can observe the empty $args variable at play within .command.sh scripts for a run:\nnextflow log | tail -1\nnextflow log <run_name> -f script\n\n\n‚åõ Before we continue, time for a quick check back on the Lesson-2.4.3 run!\n\n\nWe will now pass an optional flag to the Trim Galore process using ext.args in a custom configuration file.\n\n\n\n\n\n\nDisclaimer ü§≠\n\n\n\nThis workshop was developed before the release of nf-core/rnaseq revision 3.11.0, where the parameter --extra_trimgalore_args was first introduced.\nWe have retained this exercise as it is equally applicable to other tools which do not have an --extra_<tool>_args nf-core parameter.\nThis is a good reminder that:\n\nnf-core pipelines are under active development\ncarefully check the parameter and usage docs with each new release\nsubmit feature requests to the nf-core/github pipeline repo to have --extra_<tool>_args added where you think it‚Äôs warranted\n\n\n\n\nFor the sake of the lesson, let‚Äôs assume we want to apply a very stringent minimum Phred score of 40.\n‚ùó This is overly stringent! Bear with us‚Ä¶ üòä \n‚û§ Follow the decision tree to work out how to apply this workflow customisation. Some useful links are below the flowchart:\n \nüß∞ Trim Galore docs\nüß∞ nf-core/rnaseq trimming params v.3.11.1 vs v.3.10.1\nüß∞ Trim Galore main.nf \n\n\n\n\n\n\nInclusion of ext.args\n\n\n\nRecall from Lesson 2.1.2 that the inclusion of ext.args is currently standard practice for all DSL2 nf-core modules where additional parameters may be required to run a process, however this may not be implemented for all processes\n\n\n\nFrom the above investigation, we have learnt that:\n\nThe Trim Galore argument --quality 40 is required to over-ride the Trim Galore default of 20\nThis parameter is absent from the nf-core/rnaseq parameters list (for v.3.10.1 that is!) üòä\nOnly --cores, --gzip and input file are hard-coded in trimgalore/main.nf\next.args is defined in trimgalore/main.nf\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nWrite a custom configuration file named custom-trimgalore-args.config that adds --quality 40 to the script block of the TRIMGALORE module\nüèãÔ∏è Try to write the config without showing the solution!\nüí° Hint: you may find it helpful to take a copy of the custom-trimgalore-version.config file from the previous exercise\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n// A custom configuration file for specifying external tool arguments to Trim Galore\n\nprocess {\n    withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {   \n        ext.args = '--quality 40'\n    }\n}\n\n\n\n\n‚û§ Save custom-trimgalore-args.config then resume your run, adding our latest custom config file to the growing list at -c and set outdir param to Lesson-2.4.4:\nnextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \\\n  -profile workshop \\\n  -c custom-nimbus.config,custom-trace.config,custom-trimgalore-version.config,custom-trimgalore-args.config \\\n  -params-file workshop-params.yaml \\\n  --outdir Lesson-2.4.4 \\\n  -resume\n\nüò≤ Pipeline completed successfully but  2/2 samples failed!\n \n‚û§ Investigate the source of the failure:\n\nFollowing the advice of the warning message, check the MultiQC report by opening the file Lesson-2.4.4/multiqc/star_salmon/multiqc_report.html (with Live Server VS Code extension or taking a local copy)\nClick on the ‚ÄòWARNING: Fail Trimming Check‚Äô on the navigation headings on the left\nBoth of our samples ‚Äòfailed the minimum trimmed reads threshold specified via the --min_trimmed_reads parameter, and hence were ignored for the downstream processing steps‚Äô\nLooking at the nf-core/rnaseq parameter documentation, we see --min_trimmed_reads param with default value 10,000. Our samples both had < 5,000 reads\nComparing the outputs in Lesson-2.4.4 to a previous run, notice there is no star_salmon directory, which is where the output of STAR alignment and Salmon quantification modules are saved \n\n\n\n\n\n\n\nStay vigilant!\n\n\n\nThis lesson highlights the need to thoroughly check your output to ensure that the intended anlysis has been run and the results are what you require.\nThe message Pipeline completed successfully printed to your terminal every time a run completes (and also exit status of zero for individual tasks or cluster jobs if you are running on a cluster) indicates that there were no errors running the pipeline, not that your samples have produced the desired output!\n\n\n\n‚û§ Confirm that the external argument was actually applied:\n‚ùó In this example, it is clear that our ext.args customisation was successfully applied because of the catastrophic failure it produced. In less dramatic cases, how can we confirm that the external argument was actually applied? ü§î \n\nWithin your MultiQC report, navigate to the section ‚Äònf-core/rnaseq Workflow Summary‚Äô\n\nUnlike our custom options, profiles, and configs, the custom quality parameter is not documented!\nü§î seems worthy of a feature request‚Ä¶\n\nSome tools write a handy log, in which case you might view the applied parameters from that file, eg:\n\nhead Lesson-2.4.4/trimgalore/SRR3473988.fastq.gz_trimming_report.txt \n \n\nIn the absence of an informative tool log, you can always rely on nextflow log ü•∞\n\nnextflow log <run_name> -f script | grep -A 10 trim_galore\n\n##\n#        trim_galore \\\n#            --quality 40 \\\n#            --cores 1 \\\n#            --gzip \\\n#            SRR3473989.fastq.gz\n##\n\n‚û§ Optional final run for the purists at heart üëº\n\nIf you would like to conclude today‚Äôs compute with a successful run, try changing the Trim Galore --quality threshold to 30 \n\n\n\n\n\n\n\nKey points\n\n\n\n\nYou can customise resource tracing, mutliqc report format and container use through custom configuration files\next is a very handy Nextflow directive that has been enabled by nf-core to provide full tool functionality for end users through ext.args in custom configs\nYou can specify multiple custom configuration files at the Nextflow option -c in a comma-delimited list\nAppropriate custom config use provides modularity, portability and reproducibility to nf-core workflows\nThere is no substitute for reading the tool docs when customising your runs! üìñ\n\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible workflows with nf-core",
    "section": "",
    "text": "This course is currently under development\nThis workshop will set you up with the foundational knowledge required to run and customise nf-core workflows in a reproducible manner. Using the nf-core/rnaseq workflow as an example, we will step through essential features common across all nf-core workflows. We will explore ways to adjust the workflow parameters based on the needs of your dataset and configuration the workflow to run on your computational environment.\n\nTrainers\n\nGeorgie Samaha, Sydney Informatics Hub, University of Sydney\nCali Willet, Sydney Informatics Hub, University of Sydney\nChris Hakkaart, Seqera Labs\n\n\n\nTarget audience\nThis workshop is suitable for people who are familiar with working at the command line interface and have some experience running Nextflow and nf-core workflows.\n\n\nPrerequisites\n\nExperience navigating the Unix command line\nFamiliarity with Nextflow and nf-core workflows\n\n\n\nSet up requirements\nPlease complete the Setup Instructions before the course.\nIf you have any trouble, please get in contact with us ASAP.\n\n\nCode of Conduct\nIn order to foster a positive and professional learning environment we encourage the following kinds of behaviours at all our events and on our platforms:\n\nUse welcoming and inclusive language\nBe respectful of different viewpoints and experiences\nGracefully accept constructive criticism\nFocus on what is best for the community\nShow courtesy and respect towards other community members\n\nOur full code of conduct, with incident reporting guidelines, is available here.\n\n\nWorkshop schedule\n\n\n\nLesson\nOverview\n\n\n\n\nSet up your computer\nFollow these instructions to install VSCode and login to your Nimbus instance.\n\n\nDay 1: Introduction to nf-core\nLearn fundamental ideas and skills that are essential for using Nextflow and nf-core workflows.\n\n\nDay 2: Customising nf-core\nWrite, run, adjust, and re-run an nf-core workflow as we step through various customisation scenarios.\n\n\n\n\n\nCourse survey\nPlease fill out our course survey before you leave. Help us help you! üòÅ\n\n\nCredits and acknowledgements\nThis workshop event and accompanying materials were developed by the Sydney Informatics Hub, University of Sydney in partnership with Seqera Labs, Pawsey Supercomputing Research Centre, and Australia‚Äôs National Research Education Network (AARNet) enabled through the Australian BioCommons (NCRIS via Bioplatforms Australia). This workshop was developed as a part of the Australian BioCommons Bring Your Own Data Platforms project.\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Set up your computer",
    "section": "",
    "text": "In this workshop series, we will be using Pawsey‚Äôs Nimbus cloud. The Pawsey Supercomputing Research Centre is one of two, Tier-1, High Performance Computing facilities in Australia.\nThe main requirements for this workshop are a personal computer with:\n\nA web broswer\nVisual Studio Code or a terminal application\n\nBelow, you will find instructions on how to set up a terminal application and web browser on your computer and how to connect to Nimbus. Each participant will be provided with their instance‚Äôs IP address at the beginning of the workshop.\n\nOption 1: Install and set up Visual Studio Code\nVisual Studio Code (VS Code) is a lightweight and powerful source code editor available for Windows, macOS and Linux computers.\n\nDownload Visual Studio Code for your system from here and follow the instructions for:\n\nmacOS\nLinux\nWindows\n\nOpen the VS Code application on your computer\n\n\n\nClick on the extensions button (four blocks) on the left side bar and install the remote SSH extension. Click on the blue install button.\n\n\n\nInstall the Live Server extension. Click on the blue install button.\n\n\n\nInstall the Nextflow extension. Click on the blue install button.\n\n\n\nLogin via Visual Studio Code\n\nConnect to your instance with VS code by adding the host details to your .ssh config file:\n\nCtrl+Shift+P to open command palette\nSelect Remote-SSH: Open SSH configuraiton file\nAdd new entry, filling out host name and identity file:\n\n\nHost nfcoreWorkshop\n  HostName 146.118.XX.XXX  \n  User training     \n\nConnect to this addres:\n\nCtrl+Shift+P to open command palette\nSelect Remote-SSH: Connect to Host and select name of your host\nSelect Linux from dropdown menu and then continue\n\nHaving successfully logged in, you should see a small green box in the bottom left corner of your screen:\n\n\n\nUnder the actions listed under Start, select Open folder then open /home/training\nSelect the box for Trust the authors of all files in the parent folder ‚Äòhome‚Äô then click Yes, I trust the authors\nTo open a terminal, from the top ribbon options, select Terminal ‚Äì> New Terminal\n\n\n\n\n\nOption 2: Install and set up a terminal application\nThe terminal applications available to you will depend on your operating system.\n\nLinux terminals\nIf you use Linux, chances are you already know your shell and how to use it. Basically, just open your preferred terminal program and off you go!\n\n\nOS X (Mac)\nMac operating systems come with a terminal program, called Terminal. Just look for it in your Applications folder, or hit Command + Space and type ‚Äòterminal‚Äô. You may find that other, 3rd party terminal programs are more user-friendly and powerful, like Iterm2.\n\n\nWindows\nWe recommend MobaXterm, which offers a rich experience as a full-featured X-server and terminal emulator for ssh connections, the free version is more than adequate.\nTo install and start using MobaXterm:\n\nGo to https://mobaxterm.mobatek.net/download.html\nUnder ‚ÄòHome Edition‚Äô select the Download now button\nSelect the MobaXterm Home Edition (Installer edition)\nOnce the program is downloaded, install it as you would any other windows program\nOnce the program is installed, start the MobaXterm program\nFrom this screen, click on ‚Äòstart local terminal‚Äô (and install Cygwin if prompted)\n\n\n\n\nLogin via Terminal\nTo log in to Nimbus, we will use a Secure Shell (SSH) connection. To connect, you need 3 things: 1. The assigned IP address of your instance (i.e.¬†###.###.##.###). Each participant will be provided with their instance‚Äôs IP address at the beginning of the workshop. 2. Your login name. In our case, this will be training for all participants. 3. Your password. All participants will be provided with a password at the beginning of the workshop.\nTo log in, type the following into your terminal, using your login name and the instance‚Äôs IP address:\nssh training@###.###.###.###\nYou will receive a message saying:\nThe authenticity of host 'XXX.XXX.XX.XXX (XXX.XXX.XX.XXX)' can't be established.\nRemember your host address will be different than the one above. There will then be a message saying:\nAre you sure you want to continue connecting (yes/no)?\nIf you would like to skip this message next time you log in, answer ‚Äòyes‚Äô. It will then give a warning:\nWarning: Permanently added 'XXX.XXX.XX.XXX' (ECDSA) to the list of known hosts.\nEnter the password provided at the beginning of the workshop. Ask one of the demonstrators if you‚Äôve forgotten it.\n\n\n\n\n\n\nPay Attention\n\n\n\nWhen you type a password on the terminal, there will not be any indication the password is being entered. You‚Äôll not see a moving cursor, or even any asterisks, or bullets. That is an intentional security mechanism used by all terminal applications and can trip us up sometimes, so be careful when typing or copying your password in.\n\n\nHaving successfully logged in, your terminal should then display something like that shown in the figure below:\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  }
]